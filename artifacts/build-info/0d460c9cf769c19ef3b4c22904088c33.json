{"id":"0d460c9cf769c19ef3b4c22904088c33","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/ArcadeGame.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./Counters.sol\";\r\n\r\ncontract ArcadeGame is ERC721, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    struct Player {\r\n        uint256 score;\r\n        uint256 rewards;\r\n        uint256 level;\r\n        uint256[] items;\r\n    }\r\n\r\n    struct Item {\r\n        uint256 id;\r\n        string name;\r\n        uint256 power;\r\n    }\r\n\r\n    IERC20 public token;\r\n    Counters.Counter private _itemIdCounter;\r\n    Counters.Counter private _nftIdCounter;\r\n    uint256 public gameCost;\r\n    uint256 public levelUpScore;\r\n    uint256 public initialAirdropAmount;\r\n\r\n    mapping(address => Player) public players;\r\n    mapping(uint256 => Item) public items;\r\n    mapping(uint256 => address) public nftOwners;\r\n\r\n    event GamePlayed(address indexed player, uint256 score, uint256 level);\r\n    event RewardsClaimed(address indexed player, uint256 rewards);\r\n    event ItemAdded(uint256 indexed itemId, string name, uint256 power);\r\n    event ItemPurchased(address indexed player, uint256 indexed itemId);\r\n    event LevelUp(address indexed player, uint256 newLevel);\r\n\r\n    constructor(address _token, address _initialOwner, uint256 _initialAirdropAmount) \r\n    ERC721(\"ArcadeGameToken\", \"AGT\") \r\n    Ownable(_initialOwner) {\r\n        token = IERC20(_token);\r\n        gameCost = 100 * 10**18; // Example cost in tokens\r\n        levelUpScore = 1000; // Score needed to level up\r\n        initialAirdropAmount = _initialAirdropAmount; // Initial airdrop amount for new players\r\n    }\r\n\r\n    function initializePlayer(address playerAddress) public {\r\n        if (players[playerAddress].level == 0 && players[playerAddress].score == 0 && players[playerAddress].rewards == 0) {\r\n            players[playerAddress] = Player(0, 0, 1, new uint256[](0)); // Initialize player with default values\r\n            require(token.transfer(playerAddress, initialAirdropAmount), \"Airdrop failed\"); // Airdrop tokens to new player\r\n        }\r\n    }\r\n\r\n    function playGame(uint256 _score) public {\r\n        require(token.balanceOf(msg.sender) >= gameCost, \"Insufficient tokens to play\");\r\n        require(token.transferFrom(msg.sender, address(this), gameCost), \"Token transfer failed\");\r\n\r\n        initializePlayer(msg.sender); // Ensure player is initialized\r\n\r\n        Player storage player = players[msg.sender];\r\n        player.score += _score;\r\n        player.rewards += _score / 10; // Example reward calculation\r\n\r\n        if (player.score >= levelUpScore) {\r\n            player.level++;\r\n            player.score -= levelUpScore;\r\n            emit LevelUp(msg.sender, player.level);\r\n        }\r\n\r\n        emit GamePlayed(msg.sender, _score, player.level);\r\n    }\r\n\r\n    function claimRewards() external {\r\n        Player storage player = players[msg.sender];\r\n        uint256 rewards = player.rewards;\r\n        require(rewards > 0, \"No rewards to claim\");\r\n\r\n        player.rewards = 0;\r\n        require(token.transfer(msg.sender, rewards), \"Reward transfer failed\");\r\n\r\n        emit RewardsClaimed(msg.sender, rewards);\r\n    }\r\n\r\n    function mintNFT() public {\r\n        uint256 nftId = _nftIdCounter.current();\r\n        _nftIdCounter.increment();\r\n\r\n        _mint(msg.sender, nftId);\r\n        nftOwners[nftId] = msg.sender;\r\n    }\r\n\r\n    function addItem(string memory _name, uint256 _power) external onlyOwner {\r\n        uint256 itemId = _itemIdCounter.current();\r\n        _itemIdCounter.increment();\r\n\r\n        items[itemId] = Item(itemId, _name, _power);\r\n        emit ItemAdded(itemId, _name, _power);\r\n    }\r\n\r\n    function purchaseItem(uint256 _itemId) external {\r\n        Item memory item = items[_itemId];\r\n        require(token.balanceOf(msg.sender) >= item.power, \"Insufficient tokens to purchase item\");\r\n        require(token.transferFrom(msg.sender, address(this), item.power), \"Token transfer failed\");\r\n\r\n        players[msg.sender].items.push(_itemId);\r\n        emit ItemPurchased(msg.sender, _itemId);\r\n    }\r\n\r\n    function getPlayerDetails(address _player) external view returns (Player memory) {\r\n        require(players[_player].level != 0 || players[_player].score != 0 || players[_player].rewards != 0, \"Player not initialized\");\r\n        return players[_player];\r\n    }\r\n\r\n    function getItems() external  view returns (Item[] memory) {\r\n        uint256 itemCount = _itemIdCounter.current();\r\n        Item[] memory itemList = new Item[](itemCount);\r\n\r\n        for (uint256 i = 0; i < itemCount; i++) {\r\n            itemList[i] = items[i];\r\n        }\r\n\r\n        return itemList;\r\n    }\r\n\r\n    function setGameCost(uint256 _gameCost) external onlyOwner {\r\n        gameCost = _gameCost;\r\n    }\r\n\r\n    function setLevelUpScore(uint256 _levelUpScore) external onlyOwner {\r\n        levelUpScore = _levelUpScore;\r\n    }\r\n\r\n    function setInitialAirdropAmount(uint256 _initialAirdropAmount) external onlyOwner {\r\n        initialAirdropAmount = _initialAirdropAmount;\r\n    }\r\n}\r\n"},"contracts/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1564],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":1565,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,1564],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[284],"IERC20Errors":[189],"IERC721Errors":[237]},"id":285,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"138:139:1","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":189,"linearizedBaseContracts":[189],"name":"IERC20Errors","nameLocation":"288:12:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"307:309:1","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":159,"name":"ERC20InsufficientBalance","nameLocation":"627:24:1","nodeType":"ErrorDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"sender","nameLocation":"660:6:1","nodeType":"VariableDeclaration","scope":159,"src":"652:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"balance","nameLocation":"676:7:1","nodeType":"VariableDeclaration","scope":159,"src":"668:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"needed","nameLocation":"693:6:1","nodeType":"VariableDeclaration","scope":159,"src":"685:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:1"},"src":"621:80:1"},{"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"707:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":164,"name":"ERC20InvalidSender","nameLocation":"870:18:1","nodeType":"ErrorDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"sender","nameLocation":"897:6:1","nodeType":"VariableDeclaration","scope":164,"src":"889:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:1"},"src":"864:41:1"},{"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"911:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":169,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:1","nodeType":"ErrorDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:1","nodeType":"VariableDeclaration","scope":169,"src":"1102:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:1"},"src":"1075:45:1"},{"documentation":{"id":170,"nodeType":"StructuredDocumentation","src":"1126:345:1","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":178,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:1","nodeType":"ErrorDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"spender","nameLocation":"1517:7:1","nodeType":"VariableDeclaration","scope":178,"src":"1509:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":171,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:1","nodeType":"VariableDeclaration","scope":178,"src":"1526:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"needed","nameLocation":"1553:6:1","nodeType":"VariableDeclaration","scope":178,"src":"1545:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:1"},"src":"1476:85:1"},{"documentation":{"id":179,"nodeType":"StructuredDocumentation","src":"1567:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":183,"name":"ERC20InvalidApprover","nameLocation":"1752:20:1","nodeType":"ErrorDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":181,"mutability":"mutable","name":"approver","nameLocation":"1781:8:1","nodeType":"VariableDeclaration","scope":183,"src":"1773:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":180,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:1"},"src":"1746:45:1"},{"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1797:195:1","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":188,"name":"ERC20InvalidSpender","nameLocation":"2003:19:1","nodeType":"ErrorDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"spender","nameLocation":"2031:7:1","nodeType":"VariableDeclaration","scope":188,"src":"2023:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:1"},"src":"1997:43:1"}],"scope":285,"src":"278:1764:1","usedErrors":[159,164,169,178,183,188],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"2044:141:1","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":237,"linearizedBaseContracts":[237],"name":"IERC721Errors","nameLocation":"2196:13:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"2216:219:1","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":195,"name":"ERC721InvalidOwner","nameLocation":"2446:18:1","nodeType":"ErrorDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"owner","nameLocation":"2473:5:1","nodeType":"VariableDeclaration","scope":195,"src":"2465:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:1"},"src":"2440:40:1"},{"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"2486:132:1","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":200,"name":"ERC721NonexistentToken","nameLocation":"2629:22:1","nodeType":"ErrorDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:1","nodeType":"VariableDeclaration","scope":200,"src":"2652:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:1"},"src":"2623:46:1"},{"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"2675:289:1","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":209,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:1","nodeType":"ErrorDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":203,"mutability":"mutable","name":"sender","nameLocation":"3004:6:1","nodeType":"VariableDeclaration","scope":209,"src":"2996:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":202,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":205,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:1","nodeType":"VariableDeclaration","scope":209,"src":"3012:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":204,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"owner","nameLocation":"3037:5:1","nodeType":"VariableDeclaration","scope":209,"src":"3029:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:1"},"src":"2969:75:1"},{"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"3050:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":214,"name":"ERC721InvalidSender","nameLocation":"3213:19:1","nodeType":"ErrorDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"sender","nameLocation":"3241:6:1","nodeType":"VariableDeclaration","scope":214,"src":"3233:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:1"},"src":"3207:42:1"},{"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"3255:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":219,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:1","nodeType":"ErrorDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:1","nodeType":"VariableDeclaration","scope":219,"src":"3447:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:1"},"src":"3419:46:1"},{"documentation":{"id":220,"nodeType":"StructuredDocumentation","src":"3471:247:1","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":226,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:1","nodeType":"ErrorDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"operator","nameLocation":"3764:8:1","nodeType":"VariableDeclaration","scope":226,"src":"3756:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:1","nodeType":"VariableDeclaration","scope":226,"src":"3774:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:1"},"src":"3723:68:1"},{"documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"3797:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":231,"name":"ERC721InvalidApprover","nameLocation":"3982:21:1","nodeType":"ErrorDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"approver","nameLocation":"4012:8:1","nodeType":"VariableDeclaration","scope":231,"src":"4004:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:1"},"src":"3976:46:1"},{"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"4028:197:1","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":236,"name":"ERC721InvalidOperator","nameLocation":"4236:21:1","nodeType":"ErrorDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"operator","nameLocation":"4266:8:1","nodeType":"VariableDeclaration","scope":236,"src":"4258:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:1"},"src":"4230:46:1"}],"scope":285,"src":"2186:2092:1","usedErrors":[195,200,209,214,219,226,231,236],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"4280:143:1","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":284,"linearizedBaseContracts":[284],"name":"IERC1155Errors","nameLocation":"4434:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"4455:361:1","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":249,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:1","nodeType":"ErrorDefinition","parameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"sender","nameLocation":"4862:6:1","nodeType":"VariableDeclaration","scope":249,"src":"4854:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":240,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"balance","nameLocation":"4878:7:1","nodeType":"VariableDeclaration","scope":249,"src":"4870:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":242,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"needed","nameLocation":"4895:6:1","nodeType":"VariableDeclaration","scope":249,"src":"4887:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":247,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:1","nodeType":"VariableDeclaration","scope":249,"src":"4903:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:1"},"src":"4821:99:1"},{"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"4926:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":254,"name":"ERC1155InvalidSender","nameLocation":"5089:20:1","nodeType":"ErrorDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"sender","nameLocation":"5118:6:1","nodeType":"VariableDeclaration","scope":254,"src":"5110:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:1"},"src":"5083:43:1"},{"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"5132:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":259,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:1","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:1","nodeType":"VariableDeclaration","scope":259,"src":"5325:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:1"},"src":"5296:47:1"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"5349:256:1","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":266,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:1","nodeType":"ErrorDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"operator","nameLocation":"5653:8:1","nodeType":"VariableDeclaration","scope":266,"src":"5645:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"owner","nameLocation":"5671:5:1","nodeType":"VariableDeclaration","scope":266,"src":"5663:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:1"},"src":"5610:68:1"},{"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"5684:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":271,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:1","nodeType":"ErrorDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"approver","nameLocation":"5900:8:1","nodeType":"VariableDeclaration","scope":271,"src":"5892:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:1"},"src":"5863:47:1"},{"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"5916:197:1","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":276,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:1","nodeType":"ErrorDefinition","parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"operator","nameLocation":"6155:8:1","nodeType":"VariableDeclaration","scope":276,"src":"6147:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":273,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:1"},"src":"6118:47:1"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"6171:280:1","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":283,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:1","nodeType":"ErrorDefinition","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:1","nodeType":"VariableDeclaration","scope":283,"src":"6488:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:1","nodeType":"VariableDeclaration","scope":283,"src":"6507:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:1"},"src":"6456:73:1"}],"scope":285,"src":"4424:2107:1","usedErrors":[249,254,259,266,271,276,283],"usedEvents":[]}],"src":"112:6420:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[362]},"id":363,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":286,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":287,"nodeType":"StructuredDocumentation","src":"132:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":362,"linearizedBaseContracts":[362],"name":"IERC20","nameLocation":"213:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"226:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":296,"name":"Transfer","nameLocation":"395:8:2","nodeType":"EventDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:2","nodeType":"VariableDeclaration","scope":296,"src":"404:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":292,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:2","nodeType":"VariableDeclaration","scope":296,"src":"426:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":294,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:2","nodeType":"VariableDeclaration","scope":296,"src":"446:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:2"},"src":"389:72:2"},{"anonymous":false,"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"467:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":305,"name":"Approval","nameLocation":"626:8:2","nodeType":"EventDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:2","nodeType":"VariableDeclaration","scope":305,"src":"635:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":298,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":301,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:2","nodeType":"VariableDeclaration","scope":305,"src":"658:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:2","nodeType":"VariableDeclaration","scope":305,"src":"683:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:2"},"src":"620:78:2"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"704:65:2","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":311,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":311,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":308,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":362,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":312,"nodeType":"StructuredDocumentation","src":"835:71:2","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":319,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:2","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"account","nameLocation":"938:7:2","nodeType":"VariableDeclaration","scope":319,"src":"930:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:2"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"970:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:2"},"scope":362,"src":"911:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"985:213:2","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":329,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:2","nodeType":"FunctionDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"to","nameLocation":"1229:2:2","nodeType":"VariableDeclaration","scope":329,"src":"1221:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":324,"mutability":"mutable","name":"value","nameLocation":"1241:5:2","nodeType":"VariableDeclaration","scope":329,"src":"1233:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":323,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:2"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":329,"src":"1266:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":326,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:2"},"scope":362,"src":"1203:69:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"1278:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":339,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:2","nodeType":"FunctionDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"owner","nameLocation":"1574:5:2","nodeType":"VariableDeclaration","scope":339,"src":"1566:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":334,"mutability":"mutable","name":"spender","nameLocation":"1589:7:2","nodeType":"VariableDeclaration","scope":339,"src":"1581:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:2"},"returnParameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":339,"src":"1621:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":336,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:2"},"scope":362,"src":"1547:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":340,"nodeType":"StructuredDocumentation","src":"1636:667:2","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":349,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:2","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"mutability":"mutable","name":"spender","nameLocation":"2333:7:2","nodeType":"VariableDeclaration","scope":349,"src":"2325:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":341,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":344,"mutability":"mutable","name":"value","nameLocation":"2350:5:2","nodeType":"VariableDeclaration","scope":349,"src":"2342:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":343,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:2"},"returnParameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":349,"src":"2375:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":346,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:2"},"scope":362,"src":"2308:73:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"2387:297:2","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":361,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:2","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"from","nameLocation":"2719:4:2","nodeType":"VariableDeclaration","scope":361,"src":"2711:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"to","nameLocation":"2733:2:2","nodeType":"VariableDeclaration","scope":361,"src":"2725:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"value","nameLocation":"2745:5:2","nodeType":"VariableDeclaration","scope":361,"src":"2737:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":355,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:2"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":361,"src":"2770:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":358,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:2"},"scope":362,"src":"2689:87:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":363,"src":"203:2575:2","usedErrors":[],"usedEvents":[296,305]}],"src":"106:2673:2"},"id":2},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[1564],"ERC165":[1843],"ERC721":[1371],"IERC165":[1855],"IERC721":[1488],"IERC721Errors":[237],"IERC721Metadata":[1534],"IERC721Receiver":[1506],"Strings":[1819]},"id":1372,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":364,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":366,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1489,"src":"133:38:3","symbolAliases":[{"foreign":{"id":365,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"141:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1507,"src":"172:54:3","symbolAliases":[{"foreign":{"id":367,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"180:15:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":370,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1535,"src":"227:65:3","symbolAliases":[{"foreign":{"id":369,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"235:15:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":372,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1565,"src":"293:48:3","symbolAliases":[{"foreign":{"id":371,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"301:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":374,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1820,"src":"342:48:3","symbolAliases":[{"foreign":{"id":373,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"350:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1844,"src":"391:69:3","symbolAliases":[{"foreign":{"id":375,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"399:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":376,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"408:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":379,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":285,"src":"461:66:3","symbolAliases":[{"foreign":{"id":378,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"469:13:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":381,"name":"Context","nameLocations":["804:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"804:7:3"},"id":382,"nodeType":"InheritanceSpecifier","src":"804:7:3"},{"baseName":{"id":383,"name":"ERC165","nameLocations":["813:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"813:6:3"},"id":384,"nodeType":"InheritanceSpecifier","src":"813:6:3"},{"baseName":{"id":385,"name":"IERC721","nameLocations":["821:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"821:7:3"},"id":386,"nodeType":"InheritanceSpecifier","src":"821:7:3"},{"baseName":{"id":387,"name":"IERC721Metadata","nameLocations":["830:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":1534,"src":"830:15:3"},"id":388,"nodeType":"InheritanceSpecifier","src":"830:15:3"},{"baseName":{"id":389,"name":"IERC721Errors","nameLocations":["847:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":237,"src":"847:13:3"},"id":390,"nodeType":"InheritanceSpecifier","src":"847:13:3"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"529:246:3","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1371,"linearizedBaseContracts":[1371,237,1534,1488,1843,1855,1564],"name":"ERC721","nameLocation":"794:6:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":393,"libraryName":{"id":391,"name":"Strings","nameLocations":["873:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1819,"src":"873:7:3"},"nodeType":"UsingForDirective","src":"867:26:3","typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":395,"mutability":"mutable","name":"_name","nameLocation":"932:5:3","nodeType":"VariableDeclaration","scope":1371,"src":"917:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":394,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":397,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:3","nodeType":"VariableDeclaration","scope":1371,"src":"964:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":396,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":401,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:3","nodeType":"VariableDeclaration","scope":1371,"src":"993:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":400,"keyName":"tokenId","keyNameLocation":"1009:7:3","keyType":{"id":398,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":405,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:3","nodeType":"VariableDeclaration","scope":1371,"src":"1051:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":404,"keyName":"owner","keyNameLocation":"1067:5:3","keyType":{"id":402,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":409,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:3","nodeType":"VariableDeclaration","scope":1371,"src":"1109:59:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":408,"keyName":"tokenId","keyNameLocation":"1125:7:3","keyType":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":415,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:3","nodeType":"VariableDeclaration","scope":1371,"src":"1175:86:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":414,"keyName":"owner","keyNameLocation":"1191:5:3","keyType":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":413,"keyName":"operator","keyNameLocation":"1216:8:3","keyType":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":431,"nodeType":"Block","src":"1437:57:3","statements":[{"expression":{"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":423,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"1447:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":424,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1455:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":426,"nodeType":"ExpressionStatement","src":"1447:13:3"},{"expression":{"id":429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":427,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"1470:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":428,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"1480:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":430,"nodeType":"ExpressionStatement","src":"1470:17:3"}]},"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"1268:108:3","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":432,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"name_","nameLocation":"1407:5:3","nodeType":"VariableDeclaration","scope":432,"src":"1393:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":417,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:3","nodeType":"VariableDeclaration","scope":432,"src":"1414:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":419,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:3"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[],"src":"1437:0:3"},"scope":1371,"src":"1381:113:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1842,1854],"body":{"id":462,"nodeType":"Block","src":"1669:192:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":443,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"1698:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":445,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"1718:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1488_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1488_$","typeString":"type(contract IERC721)"}],"id":444,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1713:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1488","typeString":"type(contract IERC721)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"1754:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":451,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"1774:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1534_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1534_$","typeString":"type(contract IERC721Metadata)"}],"id":450,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1534","typeString":"type(contract IERC721Metadata)"}},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":458,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"1842:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":456,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1818:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1371_$","typeString":"type(contract super ERC721)"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1842,"src":"1818:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":442,"id":461,"nodeType":"Return","src":"1679:175:3"}]},"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"1500:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":463,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:3","nodeType":"FunctionDefinition","overrides":{"id":439,"nodeType":"OverrideSpecifier","overrides":[{"id":437,"name":"ERC165","nameLocations":["1637:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"1637:6:3"},{"id":438,"name":"IERC165","nameLocations":["1645:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"1645:7:3"}],"src":"1628:25:3"},"parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:3","nodeType":"VariableDeclaration","scope":463,"src":"1588:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":434,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:3"},"returnParameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"1663:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":440,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:3"},"scope":1371,"src":"1561:300:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1413],"body":{"id":490,"nodeType":"Block","src":"1992:136:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":471,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"2006:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:3","typeDescriptions":{}}},"id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":485,"nodeType":"IfStatement","src":"2002:87:3","trueBody":{"id":484,"nodeType":"Block","src":"2027:62:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:3","typeDescriptions":{}}},"id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":477,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2048:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":483,"nodeType":"RevertStatement","src":"2041:37:3"}]}},{"expression":{"baseExpression":{"id":486,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"2105:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":488,"indexExpression":{"id":487,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"2115:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":470,"id":489,"nodeType":"Return","src":"2098:23:3"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"1867:48:3","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":491,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:3","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"owner","nameLocation":"1947:5:3","nodeType":"VariableDeclaration","scope":491,"src":"1939:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:3"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":491,"src":"1983:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:3"},"scope":1371,"src":"1920:208:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1421],"body":{"id":503,"nodeType":"Block","src":"2257:46:3","statements":[{"expression":{"arguments":[{"id":500,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"2288:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":499,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"2274:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":498,"id":502,"nodeType":"Return","src":"2267:29:3"}]},"documentation":{"id":492,"nodeType":"StructuredDocumentation","src":"2134:46:3","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":504,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:3","nodeType":"FunctionDefinition","parameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:3","nodeType":"VariableDeclaration","scope":504,"src":"2202:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:3"},"returnParameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"2248:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:3"},"scope":1371,"src":"2185:118:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1519],"body":{"id":512,"nodeType":"Block","src":"2425:29:3","statements":[{"expression":{"id":510,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2442:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":509,"id":511,"nodeType":"Return","src":"2435:12:3"}]},"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"2309:51:3","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":513,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:3","nodeType":"FunctionDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"2378:2:3"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":513,"src":"2410:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":507,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:3"},"scope":1371,"src":"2365:89:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1525],"body":{"id":521,"nodeType":"Block","src":"2580:31:3","statements":[{"expression":{"id":519,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2597:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":518,"id":520,"nodeType":"Return","src":"2590:14:3"}]},"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"2460:53:3","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":522,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:3","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"2533:2:3"},"returnParameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":522,"src":"2565:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":516,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:3"},"scope":1371,"src":"2518:93:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1533],"body":{"id":557,"nodeType":"Block","src":"2756:176:3","statements":[{"expression":{"arguments":[{"id":531,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2780:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":530,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"2766:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":533,"nodeType":"ExpressionStatement","src":"2766:22:3"},{"assignments":[535],"declarations":[{"constant":false,"id":535,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:3","nodeType":"VariableDeclaration","scope":557,"src":"2799:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":534,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":538,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":536,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"2823:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:3"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":541,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2856:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":539,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:3","typeDescriptions":{}}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:3","memberName":"length","nodeType":"MemberAccess","src":"2850:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:3","trueExpression":{"arguments":[{"id":549,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2892:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":550,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2901:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"2901:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":546,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:3","typeDescriptions":{}}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:3","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:3","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":529,"id":556,"nodeType":"Return","src":"2843:82:3"}]},"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"2617:55:3","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":558,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:3","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:3","nodeType":"VariableDeclaration","scope":558,"src":"2695:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:3"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"2741:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":527,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:3"},"scope":1371,"src":"2677:255:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":566,"nodeType":"Block","src":"3240:26:3","statements":[{"expression":{"hexValue":"","id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":563,"id":565,"nodeType":"Return","src":"3250:9:3"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"2938:231:3","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:3","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"3191:2:3"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":567,"src":"3225:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":561,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:3"},"scope":1371,"src":"3174:92:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1461],"body":{"id":582,"nodeType":"Block","src":"3384:52:3","statements":[{"expression":{"arguments":[{"id":576,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"3403:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":577,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"3407:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":578,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3416:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":575,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1174,1240],"referencedDeclaration":1174,"src":"3394:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":581,"nodeType":"ExpressionStatement","src":"3394:35:3"}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"3272:46:3","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":583,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:3","nodeType":"FunctionDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"to","nameLocation":"3348:2:3","nodeType":"VariableDeclaration","scope":583,"src":"3340:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:3","nodeType":"VariableDeclaration","scope":583,"src":"3352:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:3"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"3384:0:3"},"scope":1371,"src":"3323:113:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1477],"body":{"id":599,"nodeType":"Block","src":"3573:78:3","statements":[{"expression":{"arguments":[{"id":592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3597:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":591,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"3583:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":594,"nodeType":"ExpressionStatement","src":"3583:22:3"},{"expression":{"arguments":[{"id":596,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3636:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":595,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"3623:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":590,"id":598,"nodeType":"Return","src":"3616:28:3"}]},"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"3442:50:3","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":600,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:3","nodeType":"FunctionDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:3","nodeType":"VariableDeclaration","scope":600,"src":"3518:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:3"},"returnParameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"3564:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:3"},"scope":1371,"src":"3497:154:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1469],"body":{"id":615,"nodeType":"Block","src":"3793:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":609,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3822:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":611,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3836:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":612,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"3846:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":608,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"3803:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":614,"nodeType":"ExpressionStatement","src":"3803:52:3"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"3657:56:3","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":616,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:3","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"operator","nameLocation":"3753:8:3","nodeType":"VariableDeclaration","scope":616,"src":"3745:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"approved","nameLocation":"3768:8:3","nodeType":"VariableDeclaration","scope":616,"src":"3763:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":604,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:3"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[],"src":"3793:0:3"},"scope":1371,"src":"3718:144:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1487],"body":{"id":632,"nodeType":"Block","src":"4022:59:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":626,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"4039:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":628,"indexExpression":{"id":627,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"4058:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":630,"indexExpression":{"id":629,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"4065:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":625,"id":631,"nodeType":"Return","src":"4032:42:3"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"3868:55:3","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":633,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:3","nodeType":"FunctionDefinition","parameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"owner","nameLocation":"3962:5:3","nodeType":"VariableDeclaration","scope":633,"src":"3954:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":621,"mutability":"mutable","name":"operator","nameLocation":"3977:8:3","nodeType":"VariableDeclaration","scope":633,"src":"3969:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:3"},"returnParameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":633,"src":"4016:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":623,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:3"},"scope":1371,"src":"3928:153:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1453],"body":{"id":678,"nodeType":"Block","src":"4223:498:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":643,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"4237:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:3","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":657,"nodeType":"IfStatement","src":"4233:87:3","trueBody":{"id":656,"nodeType":"Block","src":"4255:65:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:3","typeDescriptions":{}}},"id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":649,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4276:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":655,"nodeType":"RevertStatement","src":"4269:40:3"}]}},{"assignments":[659],"declarations":[{"constant":false,"id":659,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:3","nodeType":"VariableDeclaration","scope":678,"src":"4538:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":666,"initialValue":{"arguments":[{"id":661,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"4570:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":662,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4574:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":663,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"4583:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":660,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"4562:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":667,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"4610:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":668,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"4627:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":677,"nodeType":"IfStatement","src":"4606:109:3","trueBody":{"id":676,"nodeType":"Block","src":"4633:82:3","statements":[{"errorCall":{"arguments":[{"id":671,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"4675:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":672,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4681:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":673,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"4690:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":670,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"4654:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":675,"nodeType":"RevertStatement","src":"4647:57:3"}]}}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"4087:51:3","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":679,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:3","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"from","nameLocation":"4173:4:3","nodeType":"VariableDeclaration","scope":679,"src":"4165:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"to","nameLocation":"4187:2:3","nodeType":"VariableDeclaration","scope":679,"src":"4179:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:3","nodeType":"VariableDeclaration","scope":679,"src":"4191:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:3"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[],"src":"4223:0:3"},"scope":1371,"src":"4143:578:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1443],"body":{"id":696,"nodeType":"Block","src":"4863:56:3","statements":[{"expression":{"arguments":[{"id":690,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4890:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":691,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"4896:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":692,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"4900:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":689,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[697,723],"referencedDeclaration":723,"src":"4873:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":695,"nodeType":"ExpressionStatement","src":"4873:39:3"}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"4727:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":697,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:3","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"from","nameLocation":"4821:4:3","nodeType":"VariableDeclaration","scope":697,"src":"4813:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":681,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"to","nameLocation":"4835:2:3","nodeType":"VariableDeclaration","scope":697,"src":"4827:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:3","nodeType":"VariableDeclaration","scope":697,"src":"4839:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:3"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"4863:0:3"},"scope":1371,"src":"4787:132:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1433],"body":{"id":722,"nodeType":"Block","src":"5088:105:3","statements":[{"expression":{"arguments":[{"id":710,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"5111:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":711,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"5117:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":712,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"5121:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":709,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"5098:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":714,"nodeType":"ExpressionStatement","src":"5098:31:3"},{"expression":{"arguments":[{"id":716,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"5162:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":717,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"5168:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":718,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"5172:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":719,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5181:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":715,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"5139:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":721,"nodeType":"ExpressionStatement","src":"5139:47:3"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"4925:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":723,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:3","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"from","nameLocation":"5019:4:3","nodeType":"VariableDeclaration","scope":723,"src":"5011:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"to","nameLocation":"5033:2:3","nodeType":"VariableDeclaration","scope":723,"src":"5025:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:3","nodeType":"VariableDeclaration","scope":723,"src":"5037:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"data","nameLocation":"5067:4:3","nodeType":"VariableDeclaration","scope":723,"src":"5054:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":705,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:3"},"returnParameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"5088:0:3"},"scope":1371,"src":"4985:208:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":735,"nodeType":"Block","src":"5782:40:3","statements":[{"expression":{"baseExpression":{"id":731,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"5799:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":733,"indexExpression":{"id":732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"5807:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":730,"id":734,"nodeType":"Return","src":"5792:23:3"}]},"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"5199:503:3","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":736,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:3","nodeType":"FunctionDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":726,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:3","nodeType":"VariableDeclaration","scope":736,"src":"5725:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":725,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:3"},"returnParameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":736,"src":"5773:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:3"},"scope":1371,"src":"5707:115:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":748,"nodeType":"Block","src":"6017:48:3","statements":[{"expression":{"baseExpression":{"id":744,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6034:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":746,"indexExpression":{"id":745,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"6050:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":743,"id":747,"nodeType":"Return","src":"6027:31:3"}]},"documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"5828:105:3","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":749,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:3","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:3","nodeType":"VariableDeclaration","scope":749,"src":"5960:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:3"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":749,"src":"6008:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":741,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:3"},"scope":1371,"src":"5938:127:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":784,"nodeType":"Block","src":"6485:163:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":761,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6514:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:3","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":767,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"6552:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":768,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6561:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":771,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"6589:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":772,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6596:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":770,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6572:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":776,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"6621:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":775,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"6608:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":778,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6633:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":781,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":760,"id":783,"nodeType":"Return","src":"6495:146:3"}]},"documentation":{"id":750,"nodeType":"StructuredDocumentation","src":"6071:300:3","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":785,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:3","nodeType":"FunctionDefinition","parameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"owner","nameLocation":"6407:5:3","nodeType":"VariableDeclaration","scope":785,"src":"6399:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"spender","nameLocation":"6422:7:3","nodeType":"VariableDeclaration","scope":785,"src":"6414:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":753,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:3","nodeType":"VariableDeclaration","scope":785,"src":"6431:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":755,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:3"},"returnParameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":785,"src":"6479:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":758,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:3"},"scope":1371,"src":"6376:272:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":821,"nodeType":"Block","src":"7179:271:3","statements":[{"condition":{"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:3","subExpression":{"arguments":[{"id":796,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"7208:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":797,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"7215:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":798,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"7224:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":795,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"7194:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":820,"nodeType":"IfStatement","src":"7189:255:3","trueBody":{"id":819,"nodeType":"Block","src":"7234:210:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"7252:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:3","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":817,"nodeType":"Block","src":"7350:84:3","statements":[{"errorCall":{"arguments":[{"id":813,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"7402:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":814,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"7411:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":812,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7375:26:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"RevertStatement","src":"7368:51:3"}]},"id":818,"nodeType":"IfStatement","src":"7248:186:3","trueBody":{"id":811,"nodeType":"Block","src":"7273:71:3","statements":[{"errorCall":{"arguments":[{"id":808,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"7321:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":807,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"7298:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":810,"nodeType":"RevertStatement","src":"7291:38:3"}]}}]}}]},"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"6654:423:3","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":822,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:3","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"owner","nameLocation":"7116:5:3","nodeType":"VariableDeclaration","scope":822,"src":"7108:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"spender","nameLocation":"7131:7:3","nodeType":"VariableDeclaration","scope":822,"src":"7123:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:3","nodeType":"VariableDeclaration","scope":822,"src":"7140:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:3"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"7179:0:3"},"scope":1371,"src":"7082:368:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":837,"nodeType":"Block","src":"8167:78:3","statements":[{"id":836,"nodeType":"UncheckedBlock","src":"8177:62:3","statements":[{"expression":{"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":830,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"8201:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":832,"indexExpression":{"id":831,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"8211:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8223:5:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":835,"nodeType":"ExpressionStatement","src":"8201:27:3"}]}]},"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"7456:631:3","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":838,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:3","nodeType":"FunctionDefinition","parameters":{"id":828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"account","nameLocation":"8126:7:3","nodeType":"VariableDeclaration","scope":838,"src":"8118:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":827,"mutability":"mutable","name":"value","nameLocation":"8143:5:3","nodeType":"VariableDeclaration","scope":838,"src":"8135:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":826,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:3"},"returnParameters":{"id":829,"nodeType":"ParameterList","parameters":[],"src":"8167:0:3"},"scope":1371,"src":"8092:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"8933:700:3","statements":[{"assignments":[851],"declarations":[{"constant":false,"id":851,"mutability":"mutable","name":"from","nameLocation":"8951:4:3","nodeType":"VariableDeclaration","scope":927,"src":"8943:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":850,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":855,"initialValue":{"arguments":[{"id":853,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8967:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":852,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8958:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":856,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"9035:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:3","typeDescriptions":{}}},"id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":869,"nodeType":"IfStatement","src":"9031:86:3","trueBody":{"id":868,"nodeType":"Block","src":"9055:62:3","statements":[{"expression":{"arguments":[{"id":863,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9086:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":864,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"9092:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":865,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9098:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":862,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"9069:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"ExpressionStatement","src":"9069:37:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":870,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9161:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":871,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:3","typeDescriptions":{}}},"id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":897,"nodeType":"IfStatement","src":"9157:256:3","trueBody":{"id":896,"nodeType":"Block","src":"9181:232:3","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:3","typeDescriptions":{}}},"id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":881,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9298:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:3","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":876,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1174,1240],"referencedDeclaration":1240,"src":"9277:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":888,"nodeType":"ExpressionStatement","src":"9277:48:3"},{"id":895,"nodeType":"UncheckedBlock","src":"9340:63:3","statements":[{"expression":{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":889,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"9368:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":891,"indexExpression":{"id":890,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9378:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":894,"nodeType":"ExpressionStatement","src":"9368:20:3"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9427:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":899,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:3","typeDescriptions":{}}},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":912,"nodeType":"IfStatement","src":"9423:107:3","trueBody":{"id":911,"nodeType":"Block","src":"9445:85:3","statements":[{"id":910,"nodeType":"UncheckedBlock","src":"9459:61:3","statements":[{"expression":{"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":904,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"9487:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":906,"indexExpression":{"id":905,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9497:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":909,"nodeType":"ExpressionStatement","src":"9487:18:3"}]}]}},{"expression":{"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":913,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"9540:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":915,"indexExpression":{"id":914,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9548:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":916,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9559:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":918,"nodeType":"ExpressionStatement","src":"9540:21:3"},{"eventCall":{"arguments":[{"id":920,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9586:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":921,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9592:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":922,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9596:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":919,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"9577:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"EmitStatement","src":"9572:32:3"},{"expression":{"id":925,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9622:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":849,"id":926,"nodeType":"Return","src":"9615:11:3"}]},"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"8251:582:3","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:3","nodeType":"FunctionDefinition","parameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"to","nameLocation":"8863:2:3","nodeType":"VariableDeclaration","scope":928,"src":"8855:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:3","nodeType":"VariableDeclaration","scope":928,"src":"8867:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":845,"mutability":"mutable","name":"auth","nameLocation":"8892:4:3","nodeType":"VariableDeclaration","scope":928,"src":"8884:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:3"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"8924:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:3"},"scope":1371,"src":"8838:795:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":977,"nodeType":"Block","src":"10008:274:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"10022:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:3","typeDescriptions":{}}},"id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":950,"nodeType":"IfStatement","src":"10018:87:3","trueBody":{"id":949,"nodeType":"Block","src":"10040:65:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":943,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:3","typeDescriptions":{}}},"id":946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":942,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10061:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":948,"nodeType":"RevertStatement","src":"10054:40:3"}]}},{"assignments":[952],"declarations":[{"constant":false,"id":952,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:3","nodeType":"VariableDeclaration","scope":977,"src":"10114:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":961,"initialValue":{"arguments":[{"id":954,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"10146:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":955,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"10150:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":956,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:3","typeDescriptions":{}}},"id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":953,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"10138:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":962,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"10184:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:3","typeDescriptions":{}}},"id":966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"10180:96:3","trueBody":{"id":975,"nodeType":"Block","src":"10213:63:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:3","typeDescriptions":{}}},"id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":968,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"10234:19:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"RevertStatement","src":"10227:38:3"}]}}]},"documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"9639:311:3","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":978,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:3","nodeType":"FunctionDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"to","nameLocation":"9978:2:3","nodeType":"VariableDeclaration","scope":978,"src":"9970:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:3","nodeType":"VariableDeclaration","scope":978,"src":"9982:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:3"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[],"src":"10008:0:3"},"scope":1371,"src":"9955:327:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":992,"nodeType":"Block","src":"10690:43:3","statements":[{"expression":{"arguments":[{"id":987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"10710:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":988,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"10714:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":986,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[993,1019],"referencedDeclaration":1019,"src":"10700:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"10700:26:3"}]},"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"10288:340:3","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":993,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:3","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"to","nameLocation":"10660:2:3","nodeType":"VariableDeclaration","scope":993,"src":"10652:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:3","nodeType":"VariableDeclaration","scope":993,"src":"10664:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:3"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"10690:0:3"},"scope":1371,"src":"10633:100:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1018,"nodeType":"Block","src":"11038:98:3","statements":[{"expression":{"arguments":[{"id":1004,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"11054:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1005,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"11058:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1003,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"11048:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"11048:18:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:3","typeDescriptions":{}}},"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"11111:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"11115:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1015,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"11124:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1008,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"11076:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1017,"nodeType":"ExpressionStatement","src":"11076:53:3"}]},"documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"10739:210:3","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1019,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:3","nodeType":"FunctionDefinition","parameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"to","nameLocation":"10981:2:3","nodeType":"VariableDeclaration","scope":1019,"src":"10973:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":995,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:3","nodeType":"VariableDeclaration","scope":1019,"src":"10985:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1000,"mutability":"mutable","name":"data","nameLocation":"11015:4:3","nodeType":"VariableDeclaration","scope":1019,"src":"11002:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":999,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:3"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[],"src":"11038:0:3"},"scope":1371,"src":"10954:182:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1051,"nodeType":"Block","src":"11503:186:3","statements":[{"assignments":[1026],"declarations":[{"constant":false,"id":1026,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:3","nodeType":"VariableDeclaration","scope":1051,"src":"11513:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1038,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:3","typeDescriptions":{}}},"id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1032,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"11557:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:3","typeDescriptions":{}}},"id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1027,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"11537:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"11591:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1040,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:3","typeDescriptions":{}}},"id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1050,"nodeType":"IfStatement","src":"11587:96:3","trueBody":{"id":1049,"nodeType":"Block","src":"11620:63:3","statements":[{"errorCall":{"arguments":[{"id":1046,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"11664:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1045,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"11641:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1048,"nodeType":"RevertStatement","src":"11634:38:3"}]}}]},"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"11142:315:3","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1052,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:3","nodeType":"FunctionDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:3","nodeType":"VariableDeclaration","scope":1052,"src":"11477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1021,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:3"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"11503:0:3"},"scope":1371,"src":"11462:227:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1111,"nodeType":"Block","src":"12084:389:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12098:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1063,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:3","typeDescriptions":{}}},"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1076,"nodeType":"IfStatement","src":"12094:87:3","trueBody":{"id":1075,"nodeType":"Block","src":"12116:65:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:3","typeDescriptions":{}}},"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1068,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"12137:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1074,"nodeType":"RevertStatement","src":"12130:40:3"}]}},{"assignments":[1078],"declarations":[{"constant":false,"id":1078,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:3","nodeType":"VariableDeclaration","scope":1111,"src":"12190:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1077,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1087,"initialValue":{"arguments":[{"id":1080,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12222:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1081,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"12226:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1082,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:3","typeDescriptions":{}}},"id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1079,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"12214:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"12260:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1089,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:3","typeDescriptions":{}}},"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"12362:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1100,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"12379:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1109,"nodeType":"IfStatement","src":"12358:109:3","trueBody":{"id":1108,"nodeType":"Block","src":"12385:82:3","statements":[{"errorCall":{"arguments":[{"id":1103,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"12427:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1104,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"12433:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1105,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"12442:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1102,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"12406:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1107,"nodeType":"RevertStatement","src":"12399:57:3"}]}},"id":1110,"nodeType":"IfStatement","src":"12256:211:3","trueBody":{"id":1098,"nodeType":"Block","src":"12289:63:3","statements":[{"errorCall":{"arguments":[{"id":1095,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"12333:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1094,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"12310:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1097,"nodeType":"RevertStatement","src":"12303:38:3"}]}}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"11695:313:3","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1112,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:3","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"from","nameLocation":"12040:4:3","nodeType":"VariableDeclaration","scope":1112,"src":"12032:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"to","nameLocation":"12054:2:3","nodeType":"VariableDeclaration","scope":1112,"src":"12046:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:3","nodeType":"VariableDeclaration","scope":1112,"src":"12058:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:3"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"12084:0:3"},"scope":1371,"src":"12013:460:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1129,"nodeType":"Block","src":"13481:53:3","statements":[{"expression":{"arguments":[{"id":1123,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"13505:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1124,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"13511:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1125,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"13515:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1122,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[1130,1156],"referencedDeclaration":1156,"src":"13491:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"13491:36:3"}]},"documentation":{"id":1113,"nodeType":"StructuredDocumentation","src":"12479:922:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1130,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:3","nodeType":"FunctionDefinition","parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"from","nameLocation":"13437:4:3","nodeType":"VariableDeclaration","scope":1130,"src":"13429:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"to","nameLocation":"13451:2:3","nodeType":"VariableDeclaration","scope":1130,"src":"13443:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:3","nodeType":"VariableDeclaration","scope":1130,"src":"13455:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:3"},"returnParameters":{"id":1121,"nodeType":"ParameterList","parameters":[],"src":"13481:0:3"},"scope":1371,"src":"13406:128:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"13873:102:3","statements":[{"expression":{"arguments":[{"id":1143,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"13893:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1144,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"13899:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1145,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"13903:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1142,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"13883:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1147,"nodeType":"ExpressionStatement","src":"13883:28:3"},{"expression":{"arguments":[{"id":1149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"13944:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"13950:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1151,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"13954:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"13963:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1148,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"13921:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1154,"nodeType":"ExpressionStatement","src":"13921:47:3"}]},"documentation":{"id":1131,"nodeType":"StructuredDocumentation","src":"13540:226:3","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:3","nodeType":"FunctionDefinition","parameters":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"from","nameLocation":"13802:4:3","nodeType":"VariableDeclaration","scope":1156,"src":"13794:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"to","nameLocation":"13816:2:3","nodeType":"VariableDeclaration","scope":1156,"src":"13808:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1134,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1137,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:3","nodeType":"VariableDeclaration","scope":1156,"src":"13820:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"data","nameLocation":"13850:4:3","nodeType":"VariableDeclaration","scope":1156,"src":"13837:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1138,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:3"},"returnParameters":{"id":1141,"nodeType":"ParameterList","parameters":[],"src":"13873:0:3"},"scope":1371,"src":"13771:204:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1173,"nodeType":"Block","src":"14488:50:3","statements":[{"expression":{"arguments":[{"id":1167,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"14507:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"14511:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1169,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"14520:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1166,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1174,1240],"referencedDeclaration":1240,"src":"14498:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1172,"nodeType":"ExpressionStatement","src":"14498:33:3"}]},"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"13981:432:3","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:3","nodeType":"FunctionDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"to","nameLocation":"14444:2:3","nodeType":"VariableDeclaration","scope":1174,"src":"14436:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:3","nodeType":"VariableDeclaration","scope":1174,"src":"14448:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"auth","nameLocation":"14473:4:3","nodeType":"VariableDeclaration","scope":1174,"src":"14465:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:3"},"returnParameters":{"id":1165,"nodeType":"ParameterList","parameters":[],"src":"14488:0:3"},"scope":1371,"src":"14418:120:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1239,"nodeType":"Block","src":"14814:568:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1186,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"14880:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"14893:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:3","typeDescriptions":{}}},"id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1232,"nodeType":"IfStatement","src":"14876:460:3","trueBody":{"id":1231,"nodeType":"Block","src":"14913:423:3","statements":[{"assignments":[1195],"declarations":[{"constant":false,"id":1195,"mutability":"mutable","name":"owner","nameLocation":"14935:5:3","nodeType":"VariableDeclaration","scope":1231,"src":"14927:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1199,"initialValue":{"arguments":[{"id":1197,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"14957:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1196,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"14943:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1200,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15093:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:3","typeDescriptions":{}}},"id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1206,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"15115:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1207,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15124:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:3","subExpression":{"arguments":[{"id":1211,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"15150:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1212,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15157:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1210,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"15133:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1221,"nodeType":"IfStatement","src":"15089:142:3","trueBody":{"id":1220,"nodeType":"Block","src":"15164:67:3","statements":[{"errorCall":{"arguments":[{"id":1217,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15211:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1216,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"15189:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1219,"nodeType":"RevertStatement","src":"15182:34:3"}]}},{"condition":{"id":1222,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"15249:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1230,"nodeType":"IfStatement","src":"15245:81:3","trueBody":{"id":1229,"nodeType":"Block","src":"15260:66:3","statements":[{"eventCall":{"arguments":[{"id":1224,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"15292:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1225,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"15299:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"15303:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1223,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"15283:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1228,"nodeType":"EmitStatement","src":"15278:33:3"}]}}]}},{"expression":{"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1233,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"15346:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1235,"indexExpression":{"id":1234,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"15362:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1236,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"15373:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1238,"nodeType":"ExpressionStatement","src":"15346:29:3"}]},"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"14544:171:3","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1240,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:3","nodeType":"FunctionDefinition","parameters":{"id":1184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"to","nameLocation":"14746:2:3","nodeType":"VariableDeclaration","scope":1240,"src":"14738:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:3","nodeType":"VariableDeclaration","scope":1240,"src":"14750:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"auth","nameLocation":"14775:4:3","nodeType":"VariableDeclaration","scope":1240,"src":"14767:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:3","nodeType":"VariableDeclaration","scope":1240,"src":"14781:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1182,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:3"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[],"src":"14814:0:3"},"scope":1371,"src":"14720:662:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1276,"nodeType":"Block","src":"15684:219:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1250,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15698:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:3","typeDescriptions":{}}},"id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1261,"nodeType":"IfStatement","src":"15694:91:3","trueBody":{"id":1260,"nodeType":"Block","src":"15722:63:3","statements":[{"errorCall":{"arguments":[{"id":1257,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15765:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1256,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"15743:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1259,"nodeType":"RevertStatement","src":"15736:38:3"}]}},{"expression":{"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1262,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"15794:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1265,"indexExpression":{"id":1263,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"15813:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1266,"indexExpression":{"id":1264,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15820:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1267,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"15832:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1269,"nodeType":"ExpressionStatement","src":"15794:46:3"},{"eventCall":{"arguments":[{"id":1271,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"15870:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1272,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15877:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1273,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"15887:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1270,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"15855:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"EmitStatement","src":"15850:46:3"}]},"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"15388:198:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:3","nodeType":"FunctionDefinition","parameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"owner","nameLocation":"15627:5:3","nodeType":"VariableDeclaration","scope":1277,"src":"15619:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1242,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"operator","nameLocation":"15642:8:3","nodeType":"VariableDeclaration","scope":1277,"src":"15634:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1244,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"approved","nameLocation":"15657:8:3","nodeType":"VariableDeclaration","scope":1277,"src":"15652:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1246,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:3"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[],"src":"15684:0:3"},"scope":1371,"src":"15591:312:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1305,"nodeType":"Block","src":"16210:169:3","statements":[{"assignments":[1286],"declarations":[{"constant":false,"id":1286,"mutability":"mutable","name":"owner","nameLocation":"16228:5:3","nodeType":"VariableDeclaration","scope":1305,"src":"16220:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1290,"initialValue":{"arguments":[{"id":1288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"16245:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1287,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"16236:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1291,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"16267:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:3","typeDescriptions":{}}},"id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1302,"nodeType":"IfStatement","src":"16263:88:3","trueBody":{"id":1301,"nodeType":"Block","src":"16288:63:3","statements":[{"errorCall":{"arguments":[{"id":1298,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"16332:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1297,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"16309:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1300,"nodeType":"RevertStatement","src":"16302:38:3"}]}},{"expression":{"id":1303,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"16367:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1284,"id":1304,"nodeType":"Return","src":"16360:12:3"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"15909:224:3","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1306,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:3","nodeType":"FunctionDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:3","nodeType":"VariableDeclaration","scope":1306,"src":"16161:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:3"},"returnParameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1306,"src":"16201:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:3"},"scope":1371,"src":"16138:241:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1369,"nodeType":"Block","src":"17020:680:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1318,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17034:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:3","memberName":"code","nodeType":"MemberAccess","src":"17034:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:3","memberName":"length","nodeType":"MemberAccess","src":"17034:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"nodeType":"IfStatement","src":"17030:664:3","trueBody":{"id":1367,"nodeType":"Block","src":"17054:640:3","statements":[{"clauses":[{"block":{"id":1347,"nodeType":"Block","src":"17168:162:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1336,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"17190:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1337,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"17200:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1506_$","typeString":"type(contract IERC721Receiver)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:3","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"17200:32:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:3","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1346,"nodeType":"IfStatement","src":"17186:130:3","trueBody":{"id":1345,"nodeType":"Block","src":"17243:73:3","statements":[{"errorCall":{"arguments":[{"id":1342,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17294:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1341,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"17272:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1344,"nodeType":"RevertStatement","src":"17265:32:3"}]}}]},"errorName":"","id":1348,"nodeType":"TryCatchClause","parameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"mutability":"mutable","name":"retval","nameLocation":"17160:6:3","nodeType":"VariableDeclaration","scope":1348,"src":"17153:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1333,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:3"},"src":"17144:186:3"},{"block":{"id":1364,"nodeType":"Block","src":"17359:325:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1352,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"17381:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:3","memberName":"length","nodeType":"MemberAccess","src":"17381:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1362,"nodeType":"Block","src":"17480:190:3","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:3","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:3"},"nodeType":"YulFunctionCall","src":"17599:15:3"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:3"},"nodeType":"YulFunctionCall","src":"17616:13:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:3"},"nodeType":"YulFunctionCall","src":"17592:38:3"},"nodeType":"YulExpressionStatement","src":"17592:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1350,"isOffset":false,"isSlot":false,"src":"17607:6:3","valueSize":1},{"declaration":1350,"isOffset":false,"isSlot":false,"src":"17622:6:3","valueSize":1}],"id":1361,"nodeType":"InlineAssembly","src":"17557:95:3"}]},"id":1363,"nodeType":"IfStatement","src":"17377:293:3","trueBody":{"id":1360,"nodeType":"Block","src":"17401:73:3","statements":[{"errorCall":{"arguments":[{"id":1357,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17452:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1356,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"17430:21:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1359,"nodeType":"RevertStatement","src":"17423:32:3"}]}}]},"errorName":"","id":1365,"nodeType":"TryCatchClause","parameters":{"id":1351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1350,"mutability":"mutable","name":"reason","nameLocation":"17351:6:3","nodeType":"VariableDeclaration","scope":1365,"src":"17338:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1349,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:3"},"src":"17331:353:3"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1327,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"17109:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1329,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"17123:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"17129:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1331,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"17138:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1324,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17088:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1323,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"17072:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1506_$","typeString":"type(contract IERC721Receiver)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1506","typeString":"contract IERC721Receiver"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:3","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"17072:36:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1366,"nodeType":"TryStatement","src":"17068:616:3"}]}}]},"documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"16385:528:3","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":1370,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:3","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"from","nameLocation":"16958:4:3","nodeType":"VariableDeclaration","scope":1370,"src":"16950:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1308,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"to","nameLocation":"16972:2:3","nodeType":"VariableDeclaration","scope":1370,"src":"16964:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1310,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:3","nodeType":"VariableDeclaration","scope":1370,"src":"16976:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"data","nameLocation":"17006:4:3","nodeType":"VariableDeclaration","scope":1370,"src":"16993:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1314,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:3"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[],"src":"17020:0:3"},"scope":1371,"src":"16918:782:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1372,"src":"776:16926:3","usedErrors":[195,200,209,214,219,226,231,236],"usedEvents":[1387,1396,1405]}],"src":"107:17596:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1855],"IERC721":[1488]},"id":1489,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1373,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1375,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1489,"sourceUnit":1856,"src":"134:62:4","symbolAliases":[{"foreign":{"id":1374,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"142:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1377,"name":"IERC165","nameLocations":["287:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"287:7:4"},"id":1378,"nodeType":"InheritanceSpecifier","src":"287:7:4"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"198:67:4","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1488,"linearizedBaseContracts":[1488,1855],"name":"IERC721","nameLocation":"276:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1379,"nodeType":"StructuredDocumentation","src":"301:88:4","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1387,"name":"Transfer","nameLocation":"400:8:4","nodeType":"EventDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:4","nodeType":"VariableDeclaration","scope":1387,"src":"409:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1380,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1383,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:4","nodeType":"VariableDeclaration","scope":1387,"src":"431:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:4","nodeType":"VariableDeclaration","scope":1387,"src":"451:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:4"},"src":"394:82:4"},{"anonymous":false,"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"482:94:4","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1396,"name":"Approval","nameLocation":"587:8:4","nodeType":"EventDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:4","nodeType":"VariableDeclaration","scope":1396,"src":"596:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1389,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1392,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:4","nodeType":"VariableDeclaration","scope":1396,"src":"619:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1394,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:4","nodeType":"VariableDeclaration","scope":1396,"src":"645:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:4"},"src":"581:89:4"},{"anonymous":false,"documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"676:117:4","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1405,"name":"ApprovalForAll","nameLocation":"804:14:4","nodeType":"EventDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:4","nodeType":"VariableDeclaration","scope":1405,"src":"819:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1401,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:4","nodeType":"VariableDeclaration","scope":1405,"src":"842:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1400,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1403,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:4","nodeType":"VariableDeclaration","scope":1405,"src":"868:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1402,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:4"},"src":"798:85:4"},{"documentation":{"id":1406,"nodeType":"StructuredDocumentation","src":"889:76:4","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1413,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:4","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"owner","nameLocation":"997:5:4","nodeType":"VariableDeclaration","scope":1413,"src":"989:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1407,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:4"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"balance","nameLocation":"1035:7:4","nodeType":"VariableDeclaration","scope":1413,"src":"1027:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:4"},"scope":1488,"src":"970:74:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"1050:131:4","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1421,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:4","nodeType":"FunctionDefinition","parameters":{"id":1417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:4","nodeType":"VariableDeclaration","scope":1421,"src":"1203:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1415,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:4"},"returnParameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"owner","nameLocation":"1251:5:4","nodeType":"VariableDeclaration","scope":1421,"src":"1243:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1418,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:4"},"scope":1488,"src":"1186:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"1264:565:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1433,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:4","nodeType":"FunctionDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"from","nameLocation":"1868:4:4","nodeType":"VariableDeclaration","scope":1433,"src":"1860:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1423,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"to","nameLocation":"1882:2:4","nodeType":"VariableDeclaration","scope":1433,"src":"1874:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:4","nodeType":"VariableDeclaration","scope":1433,"src":"1886:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"data","nameLocation":"1918:4:4","nodeType":"VariableDeclaration","scope":1433,"src":"1903:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1429,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:4"},"returnParameters":{"id":1432,"nodeType":"ParameterList","parameters":[],"src":"1932:0:4"},"scope":1488,"src":"1834:99:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"1939:705:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1443,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:4","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"from","nameLocation":"2683:4:4","nodeType":"VariableDeclaration","scope":1443,"src":"2675:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"to","nameLocation":"2697:2:4","nodeType":"VariableDeclaration","scope":1443,"src":"2689:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:4","nodeType":"VariableDeclaration","scope":1443,"src":"2701:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:4"},"returnParameters":{"id":1442,"nodeType":"ParameterList","parameters":[],"src":"2726:0:4"},"scope":1488,"src":"2649:78:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"2733:732:4","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1453,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:4","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1446,"mutability":"mutable","name":"from","nameLocation":"3500:4:4","nodeType":"VariableDeclaration","scope":1453,"src":"3492:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"to","nameLocation":"3514:2:4","nodeType":"VariableDeclaration","scope":1453,"src":"3506:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1447,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:4","nodeType":"VariableDeclaration","scope":1453,"src":"3518:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:4"},"returnParameters":{"id":1452,"nodeType":"ParameterList","parameters":[],"src":"3543:0:4"},"scope":1488,"src":"3470:74:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"3550:452:4","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1461,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:4","nodeType":"FunctionDefinition","parameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"to","nameLocation":"4032:2:4","nodeType":"VariableDeclaration","scope":1461,"src":"4024:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:4","nodeType":"VariableDeclaration","scope":1461,"src":"4036:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1457,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:4"},"returnParameters":{"id":1460,"nodeType":"ParameterList","parameters":[],"src":"4061:0:4"},"scope":1488,"src":"4007:55:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1462,"nodeType":"StructuredDocumentation","src":"4068:315:4","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1469,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:4","nodeType":"FunctionDefinition","parameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1464,"mutability":"mutable","name":"operator","nameLocation":"4423:8:4","nodeType":"VariableDeclaration","scope":1469,"src":"4415:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"approved","nameLocation":"4438:8:4","nodeType":"VariableDeclaration","scope":1469,"src":"4433:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1465,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:4"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[],"src":"4456:0:4"},"scope":1488,"src":"4388:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1470,"nodeType":"StructuredDocumentation","src":"4463:139:4","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1477,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:4","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:4","nodeType":"VariableDeclaration","scope":1477,"src":"4628:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:4"},"returnParameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"mutability":"mutable","name":"operator","nameLocation":"4676:8:4","nodeType":"VariableDeclaration","scope":1477,"src":"4668:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:4"},"scope":1488,"src":"4607:79:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1478,"nodeType":"StructuredDocumentation","src":"4692:138:4","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1487,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:4","nodeType":"FunctionDefinition","parameters":{"id":1483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"owner","nameLocation":"4869:5:4","nodeType":"VariableDeclaration","scope":1487,"src":"4861:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"operator","nameLocation":"4884:8:4","nodeType":"VariableDeclaration","scope":1487,"src":"4876:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1481,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:4"},"returnParameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1487,"src":"4917:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1484,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:4"},"scope":1488,"src":"4835:88:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1489,"src":"266:4659:4","usedErrors":[],"usedEvents":[1387,1396,1405]}],"src":"108:4818:4"},"id":4},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1506]},"id":1507,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1490,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"142:152:5","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1506,"linearizedBaseContracts":[1506],"name":"IERC721Receiver","nameLocation":"305:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1492,"nodeType":"StructuredDocumentation","src":"327:500:5","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1505,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:5","nodeType":"FunctionDefinition","parameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"operator","nameLocation":"875:8:5","nodeType":"VariableDeclaration","scope":1505,"src":"867:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1493,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"from","nameLocation":"901:4:5","nodeType":"VariableDeclaration","scope":1505,"src":"893:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:5","nodeType":"VariableDeclaration","scope":1505,"src":"915:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"data","nameLocation":"955:4:5","nodeType":"VariableDeclaration","scope":1505,"src":"940:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1499,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:5"},"returnParameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1505,"src":"984:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1502,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:5"},"scope":1506,"src":"832:160:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1507,"src":"295:699:5","usedErrors":[],"usedEvents":[]}],"src":"116:879:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[1488],"IERC721Metadata":[1534]},"id":1535,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1508,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1535,"sourceUnit":1489,"src":"153:39:6","symbolAliases":[{"foreign":{"id":1509,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"161:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1512,"name":"IERC721","nameLocations":["357:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"357:7:6"},"id":1513,"nodeType":"InheritanceSpecifier","src":"357:7:6"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"194:133:6","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1534,"linearizedBaseContracts":[1534,1488,1855],"name":"IERC721Metadata","nameLocation":"338:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1514,"nodeType":"StructuredDocumentation","src":"371:58:6","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1519,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:6","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[],"src":"447:2:6"},"returnParameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1519,"src":"473:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1516,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:6"},"scope":1534,"src":"434:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1520,"nodeType":"StructuredDocumentation","src":"494:60:6","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1525,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:6","nodeType":"FunctionDefinition","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[],"src":"574:2:6"},"returnParameters":{"id":1524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1525,"src":"600:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1522,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:6"},"scope":1534,"src":"559:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1526,"nodeType":"StructuredDocumentation","src":"621:90:6","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1533,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:6","nodeType":"FunctionDefinition","parameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:6","nodeType":"VariableDeclaration","scope":1533,"src":"734:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:6"},"returnParameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1533,"src":"774:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1530,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:6"},"scope":1534,"src":"716:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1535,"src":"328:463:6","usedErrors":[],"usedEvents":[1387,1396,1405]}],"src":"127:665:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1564]},"id":1565,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1536,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:7"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1537,"nodeType":"StructuredDocumentation","src":"127:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1564,"linearizedBaseContracts":[1564],"name":"Context","nameLocation":"642:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1545,"nodeType":"Block","src":"718:34:7","statements":[{"expression":{"expression":{"id":1542,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:7","memberName":"sender","nodeType":"MemberAccess","src":"735:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1541,"id":1544,"nodeType":"Return","src":"728:17:7"}]},"id":1546,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:7","nodeType":"FunctionDefinition","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[],"src":"675:2:7"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1546,"src":"709:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1539,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:7"},"scope":1564,"src":"656:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1554,"nodeType":"Block","src":"825:32:7","statements":[{"expression":{"expression":{"id":1551,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:7","memberName":"data","nodeType":"MemberAccess","src":"842:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1550,"id":1553,"nodeType":"Return","src":"835:15:7"}]},"id":1555,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:7","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[],"src":"775:2:7"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1555,"src":"809:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1548,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:7"},"scope":1564,"src":"758:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1562,"nodeType":"Block","src":"935:25:7","statements":[{"expression":{"hexValue":"30","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1559,"id":1561,"nodeType":"Return","src":"945:8:7"}]},"id":1563,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:7","nodeType":"FunctionDefinition","parameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"892:2:7"},"returnParameters":{"id":1559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1563,"src":"926:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1557,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:7"},"scope":1564,"src":"863:97:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1565,"src":"624:338:7","usedErrors":[],"usedEvents":[]}],"src":"101:862:7"},"id":7},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2909],"SignedMath":[3014],"Strings":[1819]},"id":1820,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1566,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:8"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1820,"sourceUnit":2910,"src":"127:37:8","symbolAliases":[{"foreign":{"id":1567,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"135:4:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1570,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1820,"sourceUnit":3015,"src":"165:49:8","symbolAliases":[{"foreign":{"id":1569,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"173:10:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"216:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1819,"linearizedBaseContracts":[1819],"name":"Strings","nameLocation":"259:7:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1574,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:8","nodeType":"VariableDeclaration","scope":1819,"src":"273:56:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1572,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1577,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:8","nodeType":"VariableDeclaration","scope":1819,"src":"335:42:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1575,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1578,"nodeType":"StructuredDocumentation","src":"384:81:8","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1584,"name":"StringsInsufficientHexLength","nameLocation":"476:28:8","nodeType":"ErrorDefinition","parameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1580,"mutability":"mutable","name":"value","nameLocation":"513:5:8","nodeType":"VariableDeclaration","scope":1584,"src":"505:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1579,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1582,"mutability":"mutable","name":"length","nameLocation":"528:6:8","nodeType":"VariableDeclaration","scope":1584,"src":"520:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:8"},"src":"470:66:8"},{"body":{"id":1631,"nodeType":"Block","src":"708:627:8","statements":[{"id":1630,"nodeType":"UncheckedBlock","src":"718:611:8","statements":[{"assignments":[1593],"declarations":[{"constant":false,"id":1593,"mutability":"mutable","name":"length","nameLocation":"750:6:8","nodeType":"VariableDeclaration","scope":1630,"src":"742:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1592,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1600,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"770:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1594,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"759:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2909_$","typeString":"type(library Math)"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"759:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:8"},{"assignments":[1602],"declarations":[{"constant":false,"id":1602,"mutability":"mutable","name":"buffer","nameLocation":"808:6:8","nodeType":"VariableDeclaration","scope":1630,"src":"794:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1601,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1607,"initialValue":{"arguments":[{"id":1605,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"828:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1603,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:8"},{"assignments":[1609],"declarations":[{"constant":false,"id":1609,"mutability":"mutable","name":"ptr","nameLocation":"857:3:8","nodeType":"VariableDeclaration","scope":1630,"src":"849:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1608,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1610,"nodeType":"VariableDeclarationStatement","src":"849:11:8"},{"AST":{"nodeType":"YulBlock","src":"930:67:8","statements":[{"nodeType":"YulAssignment","src":"948:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:8"},"nodeType":"YulFunctionCall","src":"967:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:8"},"nodeType":"YulFunctionCall","src":"955:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1602,"isOffset":false,"isSlot":false,"src":"959:6:8","valueSize":1},{"declaration":1593,"isOffset":false,"isSlot":false,"src":"975:6:8","valueSize":1},{"declaration":1609,"isOffset":false,"isSlot":false,"src":"948:3:8","valueSize":1}],"id":1611,"nodeType":"InlineAssembly","src":"921:76:8"},{"body":{"id":1626,"nodeType":"Block","src":"1023:269:8","statements":[{"expression":{"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:8","subExpression":{"id":1613,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"1041:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1615,"nodeType":"ExpressionStatement","src":"1041:5:8"},{"AST":{"nodeType":"YulBlock","src":"1124:86:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:8"},"nodeType":"YulFunctionCall","src":"1164:14:8"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:8"},"nodeType":"YulFunctionCall","src":"1159:32:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:8"},"nodeType":"YulFunctionCall","src":"1146:46:8"},"nodeType":"YulExpressionStatement","src":"1146:46:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1574,"isOffset":false,"isSlot":false,"src":"1180:10:8","valueSize":1},{"declaration":1609,"isOffset":false,"isSlot":false,"src":"1154:3:8","valueSize":1},{"declaration":1587,"isOffset":false,"isSlot":false,"src":"1168:5:8","valueSize":1}],"id":1616,"nodeType":"InlineAssembly","src":"1115:95:8"},{"expression":{"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"1227:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1620,"nodeType":"ExpressionStatement","src":"1227:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"1260:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1625,"nodeType":"IfStatement","src":"1256:21:8","trueBody":{"id":1624,"nodeType":"Break","src":"1272:5:8"}}]},"condition":{"hexValue":"74727565","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1627,"nodeType":"WhileStatement","src":"1010:282:8"},{"expression":{"id":1628,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"1312:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1591,"id":1629,"nodeType":"Return","src":"1305:13:8"}]}]},"documentation":{"id":1585,"nodeType":"StructuredDocumentation","src":"542:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1632,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:8","nodeType":"FunctionDefinition","parameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"value","nameLocation":"663:5:8","nodeType":"VariableDeclaration","scope":1632,"src":"655:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:8"},"returnParameters":{"id":1591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1632,"src":"693:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1589,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:8"},"scope":1819,"src":"637:698:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1657,"nodeType":"Block","src":"1511:92:8","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"1542:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:8","trueExpression":{"hexValue":"2d","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"1588:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1650,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"1573:10:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3014_$","typeString":"type(library SignedMath)"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:8","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"1573:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1649,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"1564:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1640,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:8","typeDescriptions":{}}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:8","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:8","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1639,"id":1656,"nodeType":"Return","src":"1521:75:8"}]},"documentation":{"id":1633,"nodeType":"StructuredDocumentation","src":"1341:89:8","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1658,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:8","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1635,"mutability":"mutable","name":"value","nameLocation":"1466:5:8","nodeType":"VariableDeclaration","scope":1658,"src":"1459:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1634,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:8"},"returnParameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1658,"src":"1496:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1637,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:8"},"scope":1819,"src":"1435:168:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1677,"nodeType":"Block","src":"1782:100:8","statements":[{"id":1676,"nodeType":"UncheckedBlock","src":"1792:84:8","statements":[{"expression":{"arguments":[{"id":1667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"1835:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"1854:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1668,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"1842:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2909_$","typeString":"type(library Math)"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2851,"src":"1842:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1666,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1678,1761,1781],"referencedDeclaration":1761,"src":"1823:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1665,"id":1675,"nodeType":"Return","src":"1816:49:8"}]}]},"documentation":{"id":1659,"nodeType":"StructuredDocumentation","src":"1609:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1678,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:8","nodeType":"FunctionDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"value","nameLocation":"1737:5:8","nodeType":"VariableDeclaration","scope":1678,"src":"1729:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:8"},"returnParameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1678,"src":"1767:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1663,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:8"},"scope":1819,"src":"1708:174:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1760,"nodeType":"Block","src":"2095:435:8","statements":[{"assignments":[1689],"declarations":[{"constant":false,"id":1689,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:8","nodeType":"VariableDeclaration","scope":1760,"src":"2105:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1691,"initialValue":{"id":1690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"2126:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:8"},{"assignments":[1693],"declarations":[{"constant":false,"id":1693,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:8","nodeType":"VariableDeclaration","scope":1760,"src":"2141:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1692,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1702,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1697,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"2177:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1694,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:8"},{"expression":{"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1703,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"2198:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1705,"indexExpression":{"hexValue":"30","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1708,"nodeType":"ExpressionStatement","src":"2198:15:8"},{"expression":{"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1709,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"2223:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1711,"indexExpression":{"hexValue":"31","id":1710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1714,"nodeType":"ExpressionStatement","src":"2223:15:8"},{"body":{"id":1743,"nodeType":"Block","src":"2293:95:8","statements":[{"expression":{"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1729,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"2307:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1731,"indexExpression":{"id":1730,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"2314:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1732,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"2319:10:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1736,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1733,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"2330:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1738,"nodeType":"ExpressionStatement","src":"2307:40:8"},{"expression":{"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1739,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"2361:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1742,"nodeType":"ExpressionStatement","src":"2361:16:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1723,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"2281:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1744,"initializationExpression":{"assignments":[1716],"declarations":[{"constant":false,"id":1716,"mutability":"mutable","name":"i","nameLocation":"2261:1:8","nodeType":"VariableDeclaration","scope":1744,"src":"2253:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1722,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1718,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"2269:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:8"},"loopExpression":{"expression":{"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:8","subExpression":{"id":1726,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"2290:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1728,"nodeType":"ExpressionStatement","src":"2288:3:8"},"nodeType":"ForStatement","src":"2248:140:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1745,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"2401:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1754,"nodeType":"IfStatement","src":"2397:96:8","trueBody":{"id":1753,"nodeType":"Block","src":"2418:75:8","statements":[{"errorCall":{"arguments":[{"id":1749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"2468:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1750,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"2475:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1748,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"2439:28:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1752,"nodeType":"RevertStatement","src":"2432:50:8"}]}},{"expression":{"arguments":[{"id":1757,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"2516:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1755,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:8","typeDescriptions":{}}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1687,"id":1759,"nodeType":"Return","src":"2502:21:8"}]},"documentation":{"id":1679,"nodeType":"StructuredDocumentation","src":"1888:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1761,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:8","nodeType":"FunctionDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1681,"mutability":"mutable","name":"value","nameLocation":"2034:5:8","nodeType":"VariableDeclaration","scope":1761,"src":"2026:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1680,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"length","nameLocation":"2049:6:8","nodeType":"VariableDeclaration","scope":1761,"src":"2041:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1682,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:8"},"returnParameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1761,"src":"2080:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1685,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:8"},"scope":1819,"src":"2005:525:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1780,"nodeType":"Block","src":"2762:75:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1774,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"2807:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1772,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:8","typeDescriptions":{}}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:8","typeDescriptions":{}}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1777,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"2815:14:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1769,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1678,1761,1781],"referencedDeclaration":1761,"src":"2779:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1768,"id":1779,"nodeType":"Return","src":"2772:58:8"}]},"documentation":{"id":1762,"nodeType":"StructuredDocumentation","src":"2536:148:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":1781,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:8","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"addr","nameLocation":"2718:4:8","nodeType":"VariableDeclaration","scope":1781,"src":"2710:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:8"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1781,"src":"2747:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1766,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:8"},"scope":1819,"src":"2689:148:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1817,"nodeType":"Block","src":"2992:104:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1793,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"3015:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1791,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:8","typeDescriptions":{}}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:8","memberName":"length","nodeType":"MemberAccess","src":"3009:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1798,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"3034:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1796,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:8","typeDescriptions":{}}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:8","memberName":"length","nodeType":"MemberAccess","src":"3028:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1805,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"3063:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1803,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:8","typeDescriptions":{}}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1802,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1811,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"3086:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1809,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:8","typeDescriptions":{}}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1808,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1790,"id":1816,"nodeType":"Return","src":"3002:87:8"}]},"documentation":{"id":1782,"nodeType":"StructuredDocumentation","src":"2843:66:8","text":" @dev Returns true if the two strings are equal."},"id":1818,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:8","nodeType":"FunctionDefinition","parameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"a","nameLocation":"2943:1:8","nodeType":"VariableDeclaration","scope":1818,"src":"2929:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1783,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"b","nameLocation":"2960:1:8","nodeType":"VariableDeclaration","scope":1818,"src":"2946:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1785,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:8"},"returnParameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1818,"src":"2986:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1788,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:8"},"scope":1819,"src":"2914:182:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1820,"src":"251:2847:8","usedErrors":[1584],"usedEvents":[]}],"src":"101:2998:8"},"id":8},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1843],"IERC165":[1855]},"id":1844,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1821,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:9"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1844,"sourceUnit":1856,"src":"140:38:9","symbolAliases":[{"foreign":{"id":1822,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"148:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1825,"name":"IERC165","nameLocations":["687:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"687:7:9"},"id":1826,"nodeType":"InheritanceSpecifier","src":"687:7:9"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"180:478:9","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1843,"linearizedBaseContracts":[1843,1855],"name":"ERC165","nameLocation":"677:6:9","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1854],"body":{"id":1841,"nodeType":"Block","src":"844:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1834,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"861:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1836,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"881:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1855_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1855_$","typeString":"type(contract IERC165)"}],"id":1835,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1855","typeString":"type(contract IERC165)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1833,"id":1840,"nodeType":"Return","src":"854:47:9"}]},"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"701:56:9","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1842,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:9","nodeType":"FunctionDefinition","parameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:9","nodeType":"VariableDeclaration","scope":1842,"src":"789:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1828,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:9"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1842,"src":"838:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1831,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:9"},"scope":1843,"src":"762:146:9","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1844,"src":"659:251:9","usedErrors":[],"usedEvents":[]}],"src":"114:797:9"},"id":9},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1855]},"id":1856,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1845,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1846,"nodeType":"StructuredDocumentation","src":"141:279:10","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1855,"linearizedBaseContracts":[1855],"name":"IERC165","nameLocation":"431:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"445:340:10","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1854,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:10","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:10","nodeType":"VariableDeclaration","scope":1854,"src":"817:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1848,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:10"},"returnParameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1854,"src":"860:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1851,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:10"},"scope":1855,"src":"790:76:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1856,"src":"421:447:10","usedErrors":[],"usedEvents":[]}],"src":"115:754:10"},"id":10},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2909]},"id":2910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1857,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"129:73:11","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2909,"linearizedBaseContracts":[2909],"name":"Math","nameLocation":"211:4:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1859,"nodeType":"StructuredDocumentation","src":"222:50:11","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1861,"name":"MathOverflowedMulDiv","nameLocation":"283:20:11","nodeType":"ErrorDefinition","parameters":{"id":1860,"nodeType":"ParameterList","parameters":[],"src":"303:2:11"},"src":"277:29:11"},{"canonicalName":"Math.Rounding","id":1866,"members":[{"id":1862,"name":"Floor","nameLocation":"336:5:11","nodeType":"EnumValue","src":"336:5:11"},{"id":1863,"name":"Ceil","nameLocation":"379:4:11","nodeType":"EnumValue","src":"379:4:11"},{"id":1864,"name":"Trunc","nameLocation":"421:5:11","nodeType":"EnumValue","src":"421:5:11"},{"id":1865,"name":"Expand","nameLocation":"451:6:11","nodeType":"EnumValue","src":"451:6:11"}],"name":"Rounding","nameLocation":"317:8:11","nodeType":"EnumDefinition","src":"312:169:11"},{"body":{"id":1897,"nodeType":"Block","src":"661:140:11","statements":[{"id":1896,"nodeType":"UncheckedBlock","src":"671:124:11","statements":[{"assignments":[1879],"declarations":[{"constant":false,"id":1879,"mutability":"mutable","name":"c","nameLocation":"703:1:11","nodeType":"VariableDeclaration","scope":1896,"src":"695:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1883,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1880,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"707:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1881,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"711:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1884,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"730:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1885,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"734:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1891,"nodeType":"IfStatement","src":"726:28:11","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1877,"id":1890,"nodeType":"Return","src":"737:17:11"}},{"expression":{"components":[{"hexValue":"74727565","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1893,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"782:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1894,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1877,"id":1895,"nodeType":"Return","src":"768:16:11"}]}]},"documentation":{"id":1867,"nodeType":"StructuredDocumentation","src":"487:93:11","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":1898,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:11","nodeType":"FunctionDefinition","parameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"a","nameLocation":"609:1:11","nodeType":"VariableDeclaration","scope":1898,"src":"601:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"b","nameLocation":"620:1:11","nodeType":"VariableDeclaration","scope":1898,"src":"612:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:11"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"646:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1873,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"652:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:11"},"scope":2909,"src":"585:216:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1925,"nodeType":"Block","src":"984:113:11","statements":[{"id":1924,"nodeType":"UncheckedBlock","src":"994:97:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1910,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"1022:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"1026:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1917,"nodeType":"IfStatement","src":"1018:28:11","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1915,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1909,"id":1916,"nodeType":"Return","src":"1029:17:11"}},{"expression":{"components":[{"hexValue":"74727565","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"1074:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1920,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"1078:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1922,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1909,"id":1923,"nodeType":"Return","src":"1060:20:11"}]}]},"documentation":{"id":1899,"nodeType":"StructuredDocumentation","src":"807:96:11","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":1926,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:11","nodeType":"FunctionDefinition","parameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1901,"mutability":"mutable","name":"a","nameLocation":"932:1:11","nodeType":"VariableDeclaration","scope":1926,"src":"924:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1900,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1903,"mutability":"mutable","name":"b","nameLocation":"943:1:11","nodeType":"VariableDeclaration","scope":1926,"src":"935:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1902,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:11"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1926,"src":"969:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1905,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1926,"src":"975:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1907,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:11"},"scope":2909,"src":"908:189:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1967,"nodeType":"Block","src":"1283:417:11","statements":[{"id":1966,"nodeType":"UncheckedBlock","src":"1293:401:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"1551:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1945,"nodeType":"IfStatement","src":"1547:28:11","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1943,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1937,"id":1944,"nodeType":"Return","src":"1559:16:11"}},{"assignments":[1947],"declarations":[{"constant":false,"id":1947,"mutability":"mutable","name":"c","nameLocation":"1597:1:11","nodeType":"VariableDeclaration","scope":1966,"src":"1589:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1946,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1951,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1948,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"1601:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1949,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"1605:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"1624:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1953,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"1628:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1955,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"1633:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1961,"nodeType":"IfStatement","src":"1620:33:11","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1937,"id":1960,"nodeType":"Return","src":"1636:17:11"}},{"expression":{"components":[{"hexValue":"74727565","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1963,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"1681:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1964,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1937,"id":1965,"nodeType":"Return","src":"1667:16:11"}]}]},"documentation":{"id":1927,"nodeType":"StructuredDocumentation","src":"1103:99:11","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":1968,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:11","nodeType":"FunctionDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1929,"mutability":"mutable","name":"a","nameLocation":"1231:1:11","nodeType":"VariableDeclaration","scope":1968,"src":"1223:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1931,"mutability":"mutable","name":"b","nameLocation":"1242:1:11","nodeType":"VariableDeclaration","scope":1968,"src":"1234:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1930,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:11"},"returnParameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"1268:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1933,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"1274:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1935,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:11"},"scope":2909,"src":"1207:493:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1995,"nodeType":"Block","src":"1887:114:11","statements":[{"id":1994,"nodeType":"UncheckedBlock","src":"1897:98:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1980,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"1925:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1987,"nodeType":"IfStatement","src":"1921:29:11","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1985,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1979,"id":1986,"nodeType":"Return","src":"1933:17:11"}},{"expression":{"components":[{"hexValue":"74727565","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1989,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"1978:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1990,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"1982:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1992,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1979,"id":1993,"nodeType":"Return","src":"1964:20:11"}]}]},"documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"1706:100:11","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":1996,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:11","nodeType":"FunctionDefinition","parameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1971,"mutability":"mutable","name":"a","nameLocation":"1835:1:11","nodeType":"VariableDeclaration","scope":1996,"src":"1827:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1970,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1973,"mutability":"mutable","name":"b","nameLocation":"1846:1:11","nodeType":"VariableDeclaration","scope":1996,"src":"1838:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1972,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:11"},"returnParameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1996,"src":"1872:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1975,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1996,"src":"1878:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1977,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:11"},"scope":2909,"src":"1811:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2023,"nodeType":"Block","src":"2198:114:11","statements":[{"id":2022,"nodeType":"UncheckedBlock","src":"2208:98:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2008,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2236:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2015,"nodeType":"IfStatement","src":"2232:29:11","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2013,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2007,"id":2014,"nodeType":"Return","src":"2244:17:11"}},{"expression":{"components":[{"hexValue":"74727565","id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"2289:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2018,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2293:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2020,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2007,"id":2021,"nodeType":"Return","src":"2275:20:11"}]}]},"documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"2007:110:11","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2024,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:11","nodeType":"FunctionDefinition","parameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1999,"mutability":"mutable","name":"a","nameLocation":"2146:1:11","nodeType":"VariableDeclaration","scope":2024,"src":"2138:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2001,"mutability":"mutable","name":"b","nameLocation":"2157:1:11","nodeType":"VariableDeclaration","scope":2024,"src":"2149:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:11"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2024,"src":"2183:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2003,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2024,"src":"2189:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:11"},"scope":2909,"src":"2122:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2041,"nodeType":"Block","src":"2449:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2034,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"2466:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2035,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2470:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2038,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2478:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:11","trueExpression":{"id":2037,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"2474:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2033,"id":2040,"nodeType":"Return","src":"2459:20:11"}]},"documentation":{"id":2025,"nodeType":"StructuredDocumentation","src":"2318:59:11","text":" @dev Returns the largest of two numbers."},"id":2042,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:11","nodeType":"FunctionDefinition","parameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2027,"mutability":"mutable","name":"a","nameLocation":"2403:1:11","nodeType":"VariableDeclaration","scope":2042,"src":"2395:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2029,"mutability":"mutable","name":"b","nameLocation":"2414:1:11","nodeType":"VariableDeclaration","scope":2042,"src":"2406:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:11"},"returnParameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2042,"src":"2440:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:11"},"scope":2909,"src":"2382:104:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2059,"nodeType":"Block","src":"2624:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2052,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"2641:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2053,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"2645:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2056,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"2653:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:11","trueExpression":{"id":2055,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"2649:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2051,"id":2058,"nodeType":"Return","src":"2634:20:11"}]},"documentation":{"id":2043,"nodeType":"StructuredDocumentation","src":"2492:60:11","text":" @dev Returns the smallest of two numbers."},"id":2060,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:11","nodeType":"FunctionDefinition","parameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2045,"mutability":"mutable","name":"a","nameLocation":"2578:1:11","nodeType":"VariableDeclaration","scope":2060,"src":"2570:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2044,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"b","nameLocation":"2589:1:11","nodeType":"VariableDeclaration","scope":2060,"src":"2581:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:11"},"returnParameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2060,"src":"2615:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2049,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:11"},"scope":2909,"src":"2557:104:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2082,"nodeType":"Block","src":"2845:82:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2070,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"2900:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2071,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"2904:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2074,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"2910:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2075,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"2914:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2077,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2069,"id":2081,"nodeType":"Return","src":"2892:28:11"}]},"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"2667:102:11","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2083,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:11","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"a","nameLocation":"2799:1:11","nodeType":"VariableDeclaration","scope":2083,"src":"2791:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"b","nameLocation":"2810:1:11","nodeType":"VariableDeclaration","scope":2083,"src":"2802:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2064,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:11"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2083,"src":"2836:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:11"},"scope":2909,"src":"2774:153:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2116,"nodeType":"Block","src":"3219:260:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"3233:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2101,"nodeType":"IfStatement","src":"3229:127:11","trueBody":{"id":2100,"nodeType":"Block","src":"3241:115:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2096,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"3340:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2097,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"3344:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2092,"id":2099,"nodeType":"Return","src":"3333:12:11"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2102,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"3444:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"3458:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2109,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2110,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"3467:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:11","trueExpression":{"hexValue":"30","id":2105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2092,"id":2115,"nodeType":"Return","src":"3437:35:11"}]},"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"2933:210:11","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":2117,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:11","nodeType":"FunctionDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"a","nameLocation":"3173:1:11","nodeType":"VariableDeclaration","scope":2117,"src":"3165:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2085,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2088,"mutability":"mutable","name":"b","nameLocation":"3184:1:11","nodeType":"VariableDeclaration","scope":2117,"src":"3176:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:11"},"returnParameters":{"id":2092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2117,"src":"3210:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2090,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:11"},"scope":2909,"src":"3148:331:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2242,"nodeType":"Block","src":"3901:4018:11","statements":[{"id":2241,"nodeType":"UncheckedBlock","src":"3911:4002:11","statements":[{"assignments":[2130],"declarations":[{"constant":false,"id":2130,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:11","nodeType":"VariableDeclaration","scope":2241,"src":"4232:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2134,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"4248:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2132,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"4252:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:11"},{"assignments":[2136],"declarations":[{"constant":false,"id":2136,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:11","nodeType":"VariableDeclaration","scope":2241,"src":"4312:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2135,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2137,"nodeType":"VariableDeclarationStatement","src":"4312:13:11"},{"AST":{"nodeType":"YulBlock","src":"4392:122:11","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:11"},"nodeType":"YulFunctionCall","src":"4433:6:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:11"},"nodeType":"YulFunctionCall","src":"4420:20:11"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:11","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:11","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:11"},"nodeType":"YulFunctionCall","src":"4470:14:11"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:11"},"nodeType":"YulFunctionCall","src":"4486:13:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:11"},"nodeType":"YulFunctionCall","src":"4466:34:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2130,"isOffset":false,"isSlot":false,"src":"4478:5:11","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"4493:5:11","valueSize":1},{"declaration":2136,"isOffset":false,"isSlot":false,"src":"4457:5:11","valueSize":1},{"declaration":2120,"isOffset":false,"isSlot":false,"src":"4427:1:11","valueSize":1},{"declaration":2122,"isOffset":false,"isSlot":false,"src":"4430:1:11","valueSize":1}],"id":2138,"nodeType":"InlineAssembly","src":"4383:131:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"4595:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2147,"nodeType":"IfStatement","src":"4591:368:11","trueBody":{"id":2146,"nodeType":"Block","src":"4607:352:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2142,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"4925:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2143,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"4933:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2128,"id":2145,"nodeType":"Return","src":"4918:26:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"5065:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2149,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"5080:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2155,"nodeType":"IfStatement","src":"5061:88:11","trueBody":{"id":2154,"nodeType":"Block","src":"5087:62:11","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2151,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"5112:20:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2153,"nodeType":"RevertStatement","src":"5105:29:11"}]}},{"assignments":[2157],"declarations":[{"constant":false,"id":2157,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:11","nodeType":"VariableDeclaration","scope":2241,"src":"5404:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2156,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2158,"nodeType":"VariableDeclarationStatement","src":"5404:17:11"},{"AST":{"nodeType":"YulBlock","src":"5444:291:11","statements":[{"nodeType":"YulAssignment","src":"5513:38:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:11"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:11"},"nodeType":"YulFunctionCall","src":"5526:25:11"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:11"}]},{"nodeType":"YulAssignment","src":"5633:41:11","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:11"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:11"},"nodeType":"YulFunctionCall","src":"5653:20:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:11"},"nodeType":"YulFunctionCall","src":"5642:32:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:11"}]},{"nodeType":"YulAssignment","src":"5691:30:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:11"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:11"},"nodeType":"YulFunctionCall","src":"5700:21:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2124,"isOffset":false,"isSlot":false,"src":"5539:11:11","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"5667:5:11","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"5691:5:11","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"5704:5:11","valueSize":1},{"declaration":2136,"isOffset":false,"isSlot":false,"src":"5633:5:11","valueSize":1},{"declaration":2136,"isOffset":false,"isSlot":false,"src":"5646:5:11","valueSize":1},{"declaration":2157,"isOffset":false,"isSlot":false,"src":"5513:9:11","valueSize":1},{"declaration":2157,"isOffset":false,"isSlot":false,"src":"5656:9:11","valueSize":1},{"declaration":2157,"isOffset":false,"isSlot":false,"src":"5711:9:11","valueSize":1},{"declaration":2120,"isOffset":false,"isSlot":false,"src":"5533:1:11","valueSize":1},{"declaration":2122,"isOffset":false,"isSlot":false,"src":"5536:1:11","valueSize":1}],"id":2159,"nodeType":"InlineAssembly","src":"5435:300:11"},{"assignments":[2161],"declarations":[{"constant":false,"id":2161,"mutability":"mutable","name":"twos","nameLocation":"5947:4:11","nodeType":"VariableDeclaration","scope":2241,"src":"5939:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2160,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2168,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2162,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"5954:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2164,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"5973:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:11"},{"AST":{"nodeType":"YulBlock","src":"6008:362:11","statements":[{"nodeType":"YulAssignment","src":"6073:37:11","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:11"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:11"},"nodeType":"YulFunctionCall","src":"6088:22:11"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:11"}]},{"nodeType":"YulAssignment","src":"6177:25:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:11"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:11"},"nodeType":"YulFunctionCall","src":"6186:16:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:11"}]},{"nodeType":"YulAssignment","src":"6317:39:11","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:11","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:11"},"nodeType":"YulFunctionCall","src":"6333:12:11"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:11"},"nodeType":"YulFunctionCall","src":"6329:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:11"},"nodeType":"YulFunctionCall","src":"6325:31:11"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2124,"isOffset":false,"isSlot":false,"src":"6073:11:11","valueSize":1},{"declaration":2124,"isOffset":false,"isSlot":false,"src":"6092:11:11","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"6177:5:11","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"6190:5:11","valueSize":1},{"declaration":2161,"isOffset":false,"isSlot":false,"src":"6105:4:11","valueSize":1},{"declaration":2161,"isOffset":false,"isSlot":false,"src":"6197:4:11","valueSize":1},{"declaration":2161,"isOffset":false,"isSlot":false,"src":"6317:4:11","valueSize":1},{"declaration":2161,"isOffset":false,"isSlot":false,"src":"6340:4:11","valueSize":1},{"declaration":2161,"isOffset":false,"isSlot":false,"src":"6347:4:11","valueSize":1}],"id":2169,"nodeType":"InlineAssembly","src":"5999:371:11"},{"expression":{"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2170,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"6436:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"6445:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2172,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"6453:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2175,"nodeType":"ExpressionStatement","src":"6436:21:11"},{"assignments":[2177],"declarations":[{"constant":false,"id":2177,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:11","nodeType":"VariableDeclaration","scope":2241,"src":"6775:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2176,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2184,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:11","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2179,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"6798:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:11"},{"expression":{"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2185,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7031:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2187,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"7046:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2188,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7060:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2192,"nodeType":"ExpressionStatement","src":"7031:36:11"},{"expression":{"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2193,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7100:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"7115:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2196,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7129:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2200,"nodeType":"ExpressionStatement","src":"7100:36:11"},{"expression":{"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2201,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7170:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2203,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"7185:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2204,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7199:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2208,"nodeType":"ExpressionStatement","src":"7170:36:11"},{"expression":{"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2209,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7240:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2211,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"7255:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2212,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7269:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2216,"nodeType":"ExpressionStatement","src":"7240:36:11"},{"expression":{"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2217,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7310:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2219,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"7325:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2220,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7339:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2224,"nodeType":"ExpressionStatement","src":"7310:36:11"},{"expression":{"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2225,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7381:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"7396:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2228,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7410:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ExpressionStatement","src":"7381:36:11"},{"expression":{"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"7851:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2234,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"7860:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2235,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"7868:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2238,"nodeType":"ExpressionStatement","src":"7851:24:11"},{"expression":{"id":2239,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"7896:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2128,"id":2240,"nodeType":"Return","src":"7889:13:11"}]}]},"documentation":{"id":2118,"nodeType":"StructuredDocumentation","src":"3485:313:11","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2243,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:11","nodeType":"FunctionDefinition","parameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2120,"mutability":"mutable","name":"x","nameLocation":"3827:1:11","nodeType":"VariableDeclaration","scope":2243,"src":"3819:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2119,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2122,"mutability":"mutable","name":"y","nameLocation":"3838:1:11","nodeType":"VariableDeclaration","scope":2243,"src":"3830:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2121,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2124,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:11","nodeType":"VariableDeclaration","scope":2243,"src":"3841:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:11"},"returnParameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"mutability":"mutable","name":"result","nameLocation":"3893:6:11","nodeType":"VariableDeclaration","scope":2243,"src":"3885:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:11"},"scope":2909,"src":"3803:4116:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2285,"nodeType":"Block","src":"8161:192:11","statements":[{"assignments":[2259],"declarations":[{"constant":false,"id":2259,"mutability":"mutable","name":"result","nameLocation":"8179:6:11","nodeType":"VariableDeclaration","scope":2285,"src":"8171:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2258,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2265,"initialValue":{"arguments":[{"id":2261,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"8195:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2262,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"8198:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2263,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8201:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2260,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2243,2286],"referencedDeclaration":2243,"src":"8188:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:11"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2267,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"8244:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}],"id":2266,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8227:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1866_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2270,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"8264:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2271,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"8267:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2272,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8270:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2269,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:11","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2282,"nodeType":"IfStatement","src":"8223:101:11","trueBody":{"id":2281,"nodeType":"Block","src":"8288:36:11","statements":[{"expression":{"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"8302:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2280,"nodeType":"ExpressionStatement","src":"8302:11:11"}]}},{"expression":{"id":2283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"8340:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2257,"id":2284,"nodeType":"Return","src":"8333:13:11"}]},"documentation":{"id":2244,"nodeType":"StructuredDocumentation","src":"7925:121:11","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2286,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:11","nodeType":"FunctionDefinition","parameters":{"id":2254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"x","nameLocation":"8075:1:11","nodeType":"VariableDeclaration","scope":2286,"src":"8067:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2248,"mutability":"mutable","name":"y","nameLocation":"8086:1:11","nodeType":"VariableDeclaration","scope":2286,"src":"8078:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2250,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:11","nodeType":"VariableDeclaration","scope":2286,"src":"8089:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2253,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:11","nodeType":"VariableDeclaration","scope":2286,"src":"8110:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"},"typeName":{"id":2252,"nodeType":"UserDefinedTypeName","pathNode":{"id":2251,"name":"Rounding","nameLocations":["8110:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"8110:8:11"},"referencedDeclaration":1866,"src":"8110:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:11"},"returnParameters":{"id":2257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2286,"src":"8152:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2255,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:11"},"scope":2909,"src":"8051:302:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2397,"nodeType":"Block","src":"8644:1585:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2294,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"8658:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2300,"nodeType":"IfStatement","src":"8654:45:11","trueBody":{"id":2299,"nodeType":"Block","src":"8666:33:11","statements":[{"expression":{"hexValue":"30","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2293,"id":2298,"nodeType":"Return","src":"8680:8:11"}]}},{"assignments":[2302],"declarations":[{"constant":false,"id":2302,"mutability":"mutable","name":"result","nameLocation":"9386:6:11","nodeType":"VariableDeclaration","scope":2397,"src":"9378:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2311,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2305,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"9406:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2304,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2565,2600],"referencedDeclaration":2565,"src":"9401:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:11"},{"id":2396,"nodeType":"UncheckedBlock","src":"9815:408:11","statements":[{"expression":{"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9839:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9849:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"9858:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2315,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9862:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2322,"nodeType":"ExpressionStatement","src":"9839:35:11"},{"expression":{"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9888:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9898:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2325,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"9907:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9911:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2333,"nodeType":"ExpressionStatement","src":"9888:35:11"},{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2334,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9937:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9947:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"9956:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9960:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2340,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"9937:35:11"},{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9986:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"9996:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"10005:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10009:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"9986:35:11"},{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10035:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10045:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"10054:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10058:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"10035:35:11"},{"expression":{"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2367,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10084:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10094:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2369,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"10103:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10107:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2373,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2377,"nodeType":"ExpressionStatement","src":"10084:35:11"},{"expression":{"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10133:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10143:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2380,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"10152:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10156:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2384,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2388,"nodeType":"ExpressionStatement","src":"10133:35:11"},{"expression":{"arguments":[{"id":2390,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10193:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2391,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"10201:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2392,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"10205:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2389,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"10189:3:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2293,"id":2395,"nodeType":"Return","src":"10182:30:11"}]}]},"documentation":{"id":2287,"nodeType":"StructuredDocumentation","src":"8359:223:11","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2398,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:11","nodeType":"FunctionDefinition","parameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"a","nameLocation":"8609:1:11","nodeType":"VariableDeclaration","scope":2398,"src":"8601:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2288,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:11"},"returnParameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2398,"src":"8635:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2291,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:11"},"scope":2909,"src":"8587:1642:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2432,"nodeType":"Block","src":"10405:164:11","statements":[{"id":2431,"nodeType":"UncheckedBlock","src":"10415:148:11","statements":[{"assignments":[2410],"declarations":[{"constant":false,"id":2410,"mutability":"mutable","name":"result","nameLocation":"10447:6:11","nodeType":"VariableDeclaration","scope":2431,"src":"10439:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2409,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2414,"initialValue":{"arguments":[{"id":2412,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"10461:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2411,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2398,2433],"referencedDeclaration":2398,"src":"10456:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2415,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"10484:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2417,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10511:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}],"id":2416,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"10494:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1866_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"10524:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2420,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"10533:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2422,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"10542:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:11","trueExpression":{"hexValue":"31","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2428,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2408,"id":2430,"nodeType":"Return","src":"10477:75:11"}]}]},"documentation":{"id":2399,"nodeType":"StructuredDocumentation","src":"10235:89:11","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2433,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:11","nodeType":"FunctionDefinition","parameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"a","nameLocation":"10351:1:11","nodeType":"VariableDeclaration","scope":2433,"src":"10343:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2404,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:11","nodeType":"VariableDeclaration","scope":2433,"src":"10354:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"},"typeName":{"id":2403,"nodeType":"UserDefinedTypeName","pathNode":{"id":2402,"name":"Rounding","nameLocations":["10354:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"10354:8:11"},"referencedDeclaration":1866,"src":"10354:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:11"},"returnParameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2433,"src":"10396:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2406,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:11"},"scope":2909,"src":"10329:240:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2564,"nodeType":"Block","src":"10760:922:11","statements":[{"assignments":[2442],"declarations":[{"constant":false,"id":2442,"mutability":"mutable","name":"result","nameLocation":"10778:6:11","nodeType":"VariableDeclaration","scope":2564,"src":"10770:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2444,"initialValue":{"hexValue":"30","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:11"},{"id":2561,"nodeType":"UncheckedBlock","src":"10798:855:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"10826:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2459,"nodeType":"IfStatement","src":"10822:99:11","trueBody":{"id":2458,"nodeType":"Block","src":"10844:77:11","statements":[{"expression":{"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"10862:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2453,"nodeType":"ExpressionStatement","src":"10862:13:11"},{"expression":{"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2454,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"10893:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2457,"nodeType":"ExpressionStatement","src":"10893:13:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"10938:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2474,"nodeType":"IfStatement","src":"10934:96:11","trueBody":{"id":2473,"nodeType":"Block","src":"10955:75:11","statements":[{"expression":{"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"10973:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2468,"nodeType":"ExpressionStatement","src":"10973:12:11"},{"expression":{"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11003:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2472,"nodeType":"ExpressionStatement","src":"11003:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11047:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2489,"nodeType":"IfStatement","src":"11043:96:11","trueBody":{"id":2488,"nodeType":"Block","src":"11064:75:11","statements":[{"expression":{"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11082:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2483,"nodeType":"ExpressionStatement","src":"11082:12:11"},{"expression":{"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2484,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11112:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2487,"nodeType":"ExpressionStatement","src":"11112:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11156:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2504,"nodeType":"IfStatement","src":"11152:96:11","trueBody":{"id":2503,"nodeType":"Block","src":"11173:75:11","statements":[{"expression":{"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11191:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2498,"nodeType":"ExpressionStatement","src":"11191:12:11"},{"expression":{"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2499,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11221:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2502,"nodeType":"ExpressionStatement","src":"11221:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11265:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2519,"nodeType":"IfStatement","src":"11261:93:11","trueBody":{"id":2518,"nodeType":"Block","src":"11281:73:11","statements":[{"expression":{"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11299:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2513,"nodeType":"ExpressionStatement","src":"11299:11:11"},{"expression":{"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11328:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2517,"nodeType":"ExpressionStatement","src":"11328:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11371:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2534,"nodeType":"IfStatement","src":"11367:93:11","trueBody":{"id":2533,"nodeType":"Block","src":"11387:73:11","statements":[{"expression":{"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11405:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2528,"nodeType":"ExpressionStatement","src":"11405:11:11"},{"expression":{"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2529,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11434:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2532,"nodeType":"ExpressionStatement","src":"11434:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2535,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11477:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2549,"nodeType":"IfStatement","src":"11473:93:11","trueBody":{"id":2548,"nodeType":"Block","src":"11493:73:11","statements":[{"expression":{"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2540,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11511:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2543,"nodeType":"ExpressionStatement","src":"11511:11:11"},{"expression":{"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11540:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2547,"nodeType":"ExpressionStatement","src":"11540:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"11583:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2560,"nodeType":"IfStatement","src":"11579:64:11","trueBody":{"id":2559,"nodeType":"Block","src":"11599:44:11","statements":[{"expression":{"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11617:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2558,"nodeType":"ExpressionStatement","src":"11617:11:11"}]}}]},{"expression":{"id":2562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"11669:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2440,"id":2563,"nodeType":"Return","src":"11662:13:11"}]},"documentation":{"id":2434,"nodeType":"StructuredDocumentation","src":"10575:119:11","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2565,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:11","nodeType":"FunctionDefinition","parameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"value","nameLocation":"10721:5:11","nodeType":"VariableDeclaration","scope":2565,"src":"10713:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2435,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:11"},"returnParameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2565,"src":"10751:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:11"},"scope":2909,"src":"10699:983:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2599,"nodeType":"Block","src":"11915:168:11","statements":[{"id":2598,"nodeType":"UncheckedBlock","src":"11925:152:11","statements":[{"assignments":[2577],"declarations":[{"constant":false,"id":2577,"mutability":"mutable","name":"result","nameLocation":"11957:6:11","nodeType":"VariableDeclaration","scope":2598,"src":"11949:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2576,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2581,"initialValue":{"arguments":[{"id":2579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11971:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2578,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2565,2600],"referencedDeclaration":2565,"src":"11966:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"11998:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2584,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"12025:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}],"id":2583,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"12008:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1866_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2587,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"12043:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"12052:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:11","trueExpression":{"hexValue":"31","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2595,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2575,"id":2597,"nodeType":"Return","src":"11991:75:11"}]}]},"documentation":{"id":2566,"nodeType":"StructuredDocumentation","src":"11688:142:11","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2600,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:11","nodeType":"FunctionDefinition","parameters":{"id":2572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2568,"mutability":"mutable","name":"value","nameLocation":"11857:5:11","nodeType":"VariableDeclaration","scope":2600,"src":"11849:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2567,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2571,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:11","nodeType":"VariableDeclaration","scope":2600,"src":"11864:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"},"typeName":{"id":2570,"nodeType":"UserDefinedTypeName","pathNode":{"id":2569,"name":"Rounding","nameLocations":["11864:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"11864:8:11"},"referencedDeclaration":1866,"src":"11864:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:11"},"returnParameters":{"id":2575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2600,"src":"11906:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2573,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:11"},"scope":2909,"src":"11835:248:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2728,"nodeType":"Block","src":"12276:854:11","statements":[{"assignments":[2609],"declarations":[{"constant":false,"id":2609,"mutability":"mutable","name":"result","nameLocation":"12294:6:11","nodeType":"VariableDeclaration","scope":2728,"src":"12286:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2611,"initialValue":{"hexValue":"30","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:11"},{"id":2725,"nodeType":"UncheckedBlock","src":"12314:787:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12342:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2628,"nodeType":"IfStatement","src":"12338:103:11","trueBody":{"id":2627,"nodeType":"Block","src":"12361:80:11","statements":[{"expression":{"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12379:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2622,"nodeType":"ExpressionStatement","src":"12379:17:11"},{"expression":{"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12414:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2626,"nodeType":"ExpressionStatement","src":"12414:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2629,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12458:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2645,"nodeType":"IfStatement","src":"12454:103:11","trueBody":{"id":2644,"nodeType":"Block","src":"12477:80:11","statements":[{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12495:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2639,"nodeType":"ExpressionStatement","src":"12495:17:11"},{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2640,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12530:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"12530:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12574:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2662,"nodeType":"IfStatement","src":"12570:103:11","trueBody":{"id":2661,"nodeType":"Block","src":"12593:80:11","statements":[{"expression":{"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12611:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2656,"nodeType":"ExpressionStatement","src":"12611:17:11"},{"expression":{"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12646:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2660,"nodeType":"ExpressionStatement","src":"12646:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12690:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2679,"nodeType":"IfStatement","src":"12686:100:11","trueBody":{"id":2678,"nodeType":"Block","src":"12708:78:11","statements":[{"expression":{"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12726:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2673,"nodeType":"ExpressionStatement","src":"12726:16:11"},{"expression":{"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12760:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2677,"nodeType":"ExpressionStatement","src":"12760:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12803:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2696,"nodeType":"IfStatement","src":"12799:100:11","trueBody":{"id":2695,"nodeType":"Block","src":"12821:78:11","statements":[{"expression":{"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12839:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2690,"nodeType":"ExpressionStatement","src":"12839:16:11"},{"expression":{"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12873:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2694,"nodeType":"ExpressionStatement","src":"12873:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12916:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:11","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2713,"nodeType":"IfStatement","src":"12912:100:11","trueBody":{"id":2712,"nodeType":"Block","src":"12934:78:11","statements":[{"expression":{"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"12952:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:11","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2707,"nodeType":"ExpressionStatement","src":"12952:16:11"},{"expression":{"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2708,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12986:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2711,"nodeType":"ExpressionStatement","src":"12986:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"13029:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2724,"nodeType":"IfStatement","src":"13025:66:11","trueBody":{"id":2723,"nodeType":"Block","src":"13047:44:11","statements":[{"expression":{"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2719,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"13065:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2722,"nodeType":"ExpressionStatement","src":"13065:11:11"}]}}]},{"expression":{"id":2726,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"13117:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2607,"id":2727,"nodeType":"Return","src":"13110:13:11"}]},"documentation":{"id":2601,"nodeType":"StructuredDocumentation","src":"12089:120:11","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2729,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:11","nodeType":"FunctionDefinition","parameters":{"id":2604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2603,"mutability":"mutable","name":"value","nameLocation":"12237:5:11","nodeType":"VariableDeclaration","scope":2729,"src":"12229:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:11"},"returnParameters":{"id":2607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2729,"src":"12267:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2605,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:11"},"scope":2909,"src":"12214:916:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2763,"nodeType":"Block","src":"13365:170:11","statements":[{"id":2762,"nodeType":"UncheckedBlock","src":"13375:154:11","statements":[{"assignments":[2741],"declarations":[{"constant":false,"id":2741,"mutability":"mutable","name":"result","nameLocation":"13407:6:11","nodeType":"VariableDeclaration","scope":2762,"src":"13399:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2740,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2745,"initialValue":{"arguments":[{"id":2743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"13422:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2742,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2729,2764],"referencedDeclaration":2729,"src":"13416:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"13449:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2748,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13476:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}],"id":2747,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"13459:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1866_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2751,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"13495:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"13504:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:11","trueExpression":{"hexValue":"31","id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2759,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2739,"id":2761,"nodeType":"Return","src":"13442:76:11"}]}]},"documentation":{"id":2730,"nodeType":"StructuredDocumentation","src":"13136:143:11","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2764,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:11","nodeType":"FunctionDefinition","parameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"value","nameLocation":"13307:5:11","nodeType":"VariableDeclaration","scope":2764,"src":"13299:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:11","nodeType":"VariableDeclaration","scope":2764,"src":"13314:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"},"typeName":{"id":2734,"nodeType":"UserDefinedTypeName","pathNode":{"id":2733,"name":"Rounding","nameLocations":["13314:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"13314:8:11"},"referencedDeclaration":1866,"src":"13314:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:11"},"returnParameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2764,"src":"13356:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2737,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:11"},"scope":2909,"src":"13284:251:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2850,"nodeType":"Block","src":"13855:600:11","statements":[{"assignments":[2773],"declarations":[{"constant":false,"id":2773,"mutability":"mutable","name":"result","nameLocation":"13873:6:11","nodeType":"VariableDeclaration","scope":2850,"src":"13865:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2772,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2775,"initialValue":{"hexValue":"30","id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:11"},{"id":2847,"nodeType":"UncheckedBlock","src":"13893:533:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2776,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"13921:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2790,"nodeType":"IfStatement","src":"13917:98:11","trueBody":{"id":2789,"nodeType":"Block","src":"13939:76:11","statements":[{"expression":{"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"13957:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2784,"nodeType":"ExpressionStatement","src":"13957:13:11"},{"expression":{"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2785,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"13988:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2788,"nodeType":"ExpressionStatement","src":"13988:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14032:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2805,"nodeType":"IfStatement","src":"14028:95:11","trueBody":{"id":2804,"nodeType":"Block","src":"14049:74:11","statements":[{"expression":{"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14067:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2799,"nodeType":"ExpressionStatement","src":"14067:12:11"},{"expression":{"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2800,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"14097:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2803,"nodeType":"ExpressionStatement","src":"14097:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14140:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2820,"nodeType":"IfStatement","src":"14136:95:11","trueBody":{"id":2819,"nodeType":"Block","src":"14157:74:11","statements":[{"expression":{"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14175:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2814,"nodeType":"ExpressionStatement","src":"14175:12:11"},{"expression":{"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2815,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"14205:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2818,"nodeType":"ExpressionStatement","src":"14205:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14248:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2835,"nodeType":"IfStatement","src":"14244:95:11","trueBody":{"id":2834,"nodeType":"Block","src":"14265:74:11","statements":[{"expression":{"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14283:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2829,"nodeType":"ExpressionStatement","src":"14283:12:11"},{"expression":{"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"14313:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2833,"nodeType":"ExpressionStatement","src":"14313:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"14356:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2846,"nodeType":"IfStatement","src":"14352:64:11","trueBody":{"id":2845,"nodeType":"Block","src":"14372:44:11","statements":[{"expression":{"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"14390:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2844,"nodeType":"ExpressionStatement","src":"14390:11:11"}]}}]},{"expression":{"id":2848,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"14442:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2771,"id":2849,"nodeType":"Return","src":"14435:13:11"}]},"documentation":{"id":2765,"nodeType":"StructuredDocumentation","src":"13541:246:11","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2851,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:11","nodeType":"FunctionDefinition","parameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2767,"mutability":"mutable","name":"value","nameLocation":"13816:5:11","nodeType":"VariableDeclaration","scope":2851,"src":"13808:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:11"},"returnParameters":{"id":2771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2851,"src":"13846:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2769,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:11"},"scope":2909,"src":"13792:663:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2888,"nodeType":"Block","src":"14692:177:11","statements":[{"id":2887,"nodeType":"UncheckedBlock","src":"14702:161:11","statements":[{"assignments":[2863],"declarations":[{"constant":false,"id":2863,"mutability":"mutable","name":"result","nameLocation":"14734:6:11","nodeType":"VariableDeclaration","scope":2887,"src":"14726:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2867,"initialValue":{"arguments":[{"id":2865,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"14750:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2864,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2851,2889],"referencedDeclaration":2851,"src":"14743:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2868,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"14777:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2870,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"14804:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}],"id":2869,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"14787:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1866_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"14823:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:11","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2876,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"14838:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:11","trueExpression":{"hexValue":"31","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2884,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2861,"id":2886,"nodeType":"Return","src":"14770:82:11"}]}]},"documentation":{"id":2852,"nodeType":"StructuredDocumentation","src":"14461:144:11","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2889,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:11","nodeType":"FunctionDefinition","parameters":{"id":2858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"value","nameLocation":"14634:5:11","nodeType":"VariableDeclaration","scope":2889,"src":"14626:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2853,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2857,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:11","nodeType":"VariableDeclaration","scope":2889,"src":"14641:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"},"typeName":{"id":2856,"nodeType":"UserDefinedTypeName","pathNode":{"id":2855,"name":"Rounding","nameLocations":["14641:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"14641:8:11"},"referencedDeclaration":1866,"src":"14641:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:11"},"returnParameters":{"id":2861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2889,"src":"14683:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:11"},"scope":2909,"src":"14610:259:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2907,"nodeType":"Block","src":"15067:48:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2900,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"15090:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}],"id":2899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2898,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:11","typeDescriptions":{}}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2897,"id":2906,"nodeType":"Return","src":"15077:31:11"}]},"documentation":{"id":2890,"nodeType":"StructuredDocumentation","src":"14875:113:11","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":2908,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:11","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:11","nodeType":"VariableDeclaration","scope":2908,"src":"15019:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"},"typeName":{"id":2892,"nodeType":"UserDefinedTypeName","pathNode":{"id":2891,"name":"Rounding","nameLocations":["15019:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"15019:8:11"},"referencedDeclaration":1866,"src":"15019:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1866","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:11"},"returnParameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2908,"src":"15061:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2895,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:11"},"scope":2909,"src":"14993:122:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2910,"src":"203:14914:11","usedErrors":[1861],"usedEvents":[]}],"src":"103:15015:11"},"id":11},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3014]},"id":3015,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2911,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"135:80:12","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3014,"linearizedBaseContracts":[3014],"name":"SignedMath","nameLocation":"224:10:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2929,"nodeType":"Block","src":"376:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2922,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"393:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2923,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"397:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2926,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"405:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:12","trueExpression":{"id":2925,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"401:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2921,"id":2928,"nodeType":"Return","src":"386:20:12"}]},"documentation":{"id":2913,"nodeType":"StructuredDocumentation","src":"241:66:12","text":" @dev Returns the largest of two signed numbers."},"id":2930,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:12","nodeType":"FunctionDefinition","parameters":{"id":2918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2915,"mutability":"mutable","name":"a","nameLocation":"332:1:12","nodeType":"VariableDeclaration","scope":2930,"src":"325:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2914,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2917,"mutability":"mutable","name":"b","nameLocation":"342:1:12","nodeType":"VariableDeclaration","scope":2930,"src":"335:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2916,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:12"},"returnParameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2930,"src":"368:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2919,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:12"},"scope":3014,"src":"312:101:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2947,"nodeType":"Block","src":"555:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2940,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"572:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2941,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"576:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2944,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"584:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:12","trueExpression":{"id":2943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"580:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2939,"id":2946,"nodeType":"Return","src":"565:20:12"}]},"documentation":{"id":2931,"nodeType":"StructuredDocumentation","src":"419:67:12","text":" @dev Returns the smallest of two signed numbers."},"id":2948,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:12","nodeType":"FunctionDefinition","parameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2933,"mutability":"mutable","name":"a","nameLocation":"511:1:12","nodeType":"VariableDeclaration","scope":2948,"src":"504:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2932,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2935,"mutability":"mutable","name":"b","nameLocation":"521:1:12","nodeType":"VariableDeclaration","scope":2948,"src":"514:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2934,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:12"},"returnParameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2948,"src":"547:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2937,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:12"},"scope":3014,"src":"491:101:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2991,"nodeType":"Block","src":"797:162:12","statements":[{"assignments":[2959],"declarations":[{"constant":false,"id":2959,"mutability":"mutable","name":"x","nameLocation":"866:1:12","nodeType":"VariableDeclaration","scope":2991,"src":"859:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2958,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2972,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2960,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"871:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2961,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"875:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2963,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2964,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"882:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2965,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"886:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2970,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:12"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2973,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"911:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2978,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"931:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:12","typeDescriptions":{}}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:12","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2974,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:12","typeDescriptions":{}}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"945:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2984,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"949:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2986,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2988,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2957,"id":2990,"nodeType":"Return","src":"904:48:12"}]},"documentation":{"id":2949,"nodeType":"StructuredDocumentation","src":"598:126:12","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2992,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:12","nodeType":"FunctionDefinition","parameters":{"id":2954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2951,"mutability":"mutable","name":"a","nameLocation":"753:1:12","nodeType":"VariableDeclaration","scope":2992,"src":"746:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2950,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2953,"mutability":"mutable","name":"b","nameLocation":"763:1:12","nodeType":"VariableDeclaration","scope":2992,"src":"756:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2952,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:12"},"returnParameters":{"id":2957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2992,"src":"789:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2955,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:12"},"scope":3014,"src":"729:230:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3012,"nodeType":"Block","src":"1103:158:12","statements":[{"id":3011,"nodeType":"UncheckedBlock","src":"1113:142:12","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3002,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"1228:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:12","subExpression":{"id":3006,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"1242:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:12","trueExpression":{"id":3005,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"1237:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:12","typeDescriptions":{}}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2999,"id":3010,"nodeType":"Return","src":"1213:31:12"}]}]},"documentation":{"id":2993,"nodeType":"StructuredDocumentation","src":"965:78:12","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:12","nodeType":"FunctionDefinition","parameters":{"id":2996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2995,"mutability":"mutable","name":"n","nameLocation":"1068:1:12","nodeType":"VariableDeclaration","scope":3013,"src":"1061:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2994,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:12"},"returnParameters":{"id":2999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3013,"src":"1094:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:12"},"scope":3014,"src":"1048:213:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3015,"src":"216:1047:12","usedErrors":[],"usedEvents":[]}],"src":"109:1155:12"},"id":12},"contracts/ArcadeGame.sol":{"ast":{"absolutePath":"contracts/ArcadeGame.sol","exportedSymbols":{"ArcadeGame":[3577],"Context":[1564],"Counters":[3651],"ERC165":[1843],"ERC721":[1371],"IERC165":[1855],"IERC20":[362],"IERC721":[1488],"IERC721Errors":[237],"IERC721Metadata":[1534],"IERC721Receiver":[1506],"Ownable":[147],"Strings":[1819]},"id":3578,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3016,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":3017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3578,"sourceUnit":1372,"src":"60:57:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3018,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3578,"sourceUnit":363,"src":"119:56:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3019,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3578,"sourceUnit":148,"src":"177:52:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Counters.sol","file":"./Counters.sol","id":3020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3578,"sourceUnit":3652,"src":"231:24:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3021,"name":"ERC721","nameLocations":["282:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1371,"src":"282:6:13"},"id":3022,"nodeType":"InheritanceSpecifier","src":"282:6:13"},{"baseName":{"id":3023,"name":"Ownable","nameLocations":["290:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"290:7:13"},"id":3024,"nodeType":"InheritanceSpecifier","src":"290:7:13"}],"canonicalName":"ArcadeGame","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3577,"linearizedBaseContracts":[3577,147,1371,237,1534,1488,1843,1855,1564],"name":"ArcadeGame","nameLocation":"268:10:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3028,"libraryName":{"id":3025,"name":"Counters","nameLocations":["311:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":3651,"src":"311:8:13"},"nodeType":"UsingForDirective","src":"305:36:13","typeName":{"id":3027,"nodeType":"UserDefinedTypeName","pathNode":{"id":3026,"name":"Counters.Counter","nameLocations":["324:8:13","333:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"324:16:13"},"referencedDeclaration":3583,"src":"324:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}}},{"canonicalName":"ArcadeGame.Player","id":3038,"members":[{"constant":false,"id":3030,"mutability":"mutable","name":"score","nameLocation":"382:5:13","nodeType":"VariableDeclaration","scope":3038,"src":"374:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"374:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3032,"mutability":"mutable","name":"rewards","nameLocation":"406:7:13","nodeType":"VariableDeclaration","scope":3038,"src":"398:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3031,"name":"uint256","nodeType":"ElementaryTypeName","src":"398:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3034,"mutability":"mutable","name":"level","nameLocation":"432:5:13","nodeType":"VariableDeclaration","scope":3038,"src":"424:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3033,"name":"uint256","nodeType":"ElementaryTypeName","src":"424:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3037,"mutability":"mutable","name":"items","nameLocation":"458:5:13","nodeType":"VariableDeclaration","scope":3038,"src":"448:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3035,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3036,"nodeType":"ArrayTypeName","src":"448:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"Player","nameLocation":"356:6:13","nodeType":"StructDefinition","scope":3577,"src":"349:122:13","visibility":"public"},{"canonicalName":"ArcadeGame.Item","id":3045,"members":[{"constant":false,"id":3040,"mutability":"mutable","name":"id","nameLocation":"510:2:13","nodeType":"VariableDeclaration","scope":3045,"src":"502:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3039,"name":"uint256","nodeType":"ElementaryTypeName","src":"502:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3042,"mutability":"mutable","name":"name","nameLocation":"530:4:13","nodeType":"VariableDeclaration","scope":3045,"src":"523:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3041,"name":"string","nodeType":"ElementaryTypeName","src":"523:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"power","nameLocation":"553:5:13","nodeType":"VariableDeclaration","scope":3045,"src":"545:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"545:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Item","nameLocation":"486:4:13","nodeType":"StructDefinition","scope":3577,"src":"479:87:13","visibility":"public"},{"constant":false,"functionSelector":"fc0c546a","id":3048,"mutability":"mutable","name":"token","nameLocation":"588:5:13","nodeType":"VariableDeclaration","scope":3577,"src":"574:19:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"},"typeName":{"id":3047,"nodeType":"UserDefinedTypeName","pathNode":{"id":3046,"name":"IERC20","nameLocations":["574:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":362,"src":"574:6:13"},"referencedDeclaration":362,"src":"574:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"id":3051,"mutability":"mutable","name":"_itemIdCounter","nameLocation":"625:14:13","nodeType":"VariableDeclaration","scope":3577,"src":"600:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter"},"typeName":{"id":3050,"nodeType":"UserDefinedTypeName","pathNode":{"id":3049,"name":"Counters.Counter","nameLocations":["600:8:13","609:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"600:16:13"},"referencedDeclaration":3583,"src":"600:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":3054,"mutability":"mutable","name":"_nftIdCounter","nameLocation":"671:13:13","nodeType":"VariableDeclaration","scope":3577,"src":"646:38:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter"},"typeName":{"id":3053,"nodeType":"UserDefinedTypeName","pathNode":{"id":3052,"name":"Counters.Counter","nameLocations":["646:8:13","655:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"646:16:13"},"referencedDeclaration":3583,"src":"646:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"functionSelector":"cab896dc","id":3056,"mutability":"mutable","name":"gameCost","nameLocation":"706:8:13","nodeType":"VariableDeclaration","scope":3577,"src":"691:23:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"691:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"affc55c0","id":3058,"mutability":"mutable","name":"levelUpScore","nameLocation":"736:12:13","nodeType":"VariableDeclaration","scope":3577,"src":"721:27:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3057,"name":"uint256","nodeType":"ElementaryTypeName","src":"721:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e7804338","id":3060,"mutability":"mutable","name":"initialAirdropAmount","nameLocation":"770:20:13","nodeType":"VariableDeclaration","scope":3577,"src":"755:35:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"755:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e2eb41ff","id":3065,"mutability":"mutable","name":"players","nameLocation":"833:7:13","nodeType":"VariableDeclaration","scope":3577,"src":"799:41:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player)"},"typeName":{"id":3064,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3061,"name":"address","nodeType":"ElementaryTypeName","src":"807:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"799:26:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3063,"nodeType":"UserDefinedTypeName","pathNode":{"id":3062,"name":"Player","nameLocations":["818:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3038,"src":"818:6:13"},"referencedDeclaration":3038,"src":"818:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player"}}},"visibility":"public"},{"constant":false,"functionSelector":"bfb231d2","id":3070,"mutability":"mutable","name":"items","nameLocation":"879:5:13","nodeType":"VariableDeclaration","scope":3577,"src":"847:37:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Item_$3045_storage_$","typeString":"mapping(uint256 => struct ArcadeGame.Item)"},"typeName":{"id":3069,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3066,"name":"uint256","nodeType":"ElementaryTypeName","src":"855:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"847:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Item_$3045_storage_$","typeString":"mapping(uint256 => struct ArcadeGame.Item)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3068,"nodeType":"UserDefinedTypeName","pathNode":{"id":3067,"name":"Item","nameLocations":["866:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"866:4:13"},"referencedDeclaration":3045,"src":"866:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage_ptr","typeString":"struct ArcadeGame.Item"}}},"visibility":"public"},{"constant":false,"functionSelector":"bbd94c2f","id":3074,"mutability":"mutable","name":"nftOwners","nameLocation":"926:9:13","nodeType":"VariableDeclaration","scope":3577,"src":"891:44:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":3073,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"899:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"891:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3072,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"24b31e1dbf1732a12bb700d3d77e5fb96ff3b693374d9fa15ccbc03f42715076","id":3082,"name":"GamePlayed","nameLocation":"950:10:13","nodeType":"EventDefinition","parameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3076,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"977:6:13","nodeType":"VariableDeclaration","scope":3082,"src":"961:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3075,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3078,"indexed":false,"mutability":"mutable","name":"score","nameLocation":"993:5:13","nodeType":"VariableDeclaration","scope":3082,"src":"985:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3077,"name":"uint256","nodeType":"ElementaryTypeName","src":"985:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3080,"indexed":false,"mutability":"mutable","name":"level","nameLocation":"1008:5:13","nodeType":"VariableDeclaration","scope":3082,"src":"1000:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"1000:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"960:54:13"},"src":"944:71:13"},{"anonymous":false,"eventSelector":"fc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe","id":3088,"name":"RewardsClaimed","nameLocation":"1027:14:13","nodeType":"EventDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3084,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1058:6:13","nodeType":"VariableDeclaration","scope":3088,"src":"1042:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3083,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3086,"indexed":false,"mutability":"mutable","name":"rewards","nameLocation":"1074:7:13","nodeType":"VariableDeclaration","scope":3088,"src":"1066:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"1066:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1041:41:13"},"src":"1021:62:13"},{"anonymous":false,"eventSelector":"0444434676a57f70f8479401c50fb4add3e31052f88f4b35e155b7759e5968e5","id":3096,"name":"ItemAdded","nameLocation":"1095:9:13","nodeType":"EventDefinition","parameters":{"id":3095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3090,"indexed":true,"mutability":"mutable","name":"itemId","nameLocation":"1121:6:13","nodeType":"VariableDeclaration","scope":3096,"src":"1105:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3089,"name":"uint256","nodeType":"ElementaryTypeName","src":"1105:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3092,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"1136:4:13","nodeType":"VariableDeclaration","scope":3096,"src":"1129:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3091,"name":"string","nodeType":"ElementaryTypeName","src":"1129:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3094,"indexed":false,"mutability":"mutable","name":"power","nameLocation":"1150:5:13","nodeType":"VariableDeclaration","scope":3096,"src":"1142:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3093,"name":"uint256","nodeType":"ElementaryTypeName","src":"1142:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1104:52:13"},"src":"1089:68:13"},{"anonymous":false,"eventSelector":"792fe07c0f3ce4ef42df79c4a2b07925168cddbaabf7a7ef1351f027a3760313","id":3102,"name":"ItemPurchased","nameLocation":"1169:13:13","nodeType":"EventDefinition","parameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3098,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1199:6:13","nodeType":"VariableDeclaration","scope":3102,"src":"1183:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3097,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3100,"indexed":true,"mutability":"mutable","name":"itemId","nameLocation":"1223:6:13","nodeType":"VariableDeclaration","scope":3102,"src":"1207:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3099,"name":"uint256","nodeType":"ElementaryTypeName","src":"1207:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1182:48:13"},"src":"1163:68:13"},{"anonymous":false,"eventSelector":"91e51c29e7e87a74ad3b8ccba98538970f50a4309242735467f41e27c6b0fbac","id":3108,"name":"LevelUp","nameLocation":"1243:7:13","nodeType":"EventDefinition","parameters":{"id":3107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3104,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1267:6:13","nodeType":"VariableDeclaration","scope":3108,"src":"1251:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3103,"name":"address","nodeType":"ElementaryTypeName","src":"1251:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3106,"indexed":false,"mutability":"mutable","name":"newLevel","nameLocation":"1283:8:13","nodeType":"VariableDeclaration","scope":3108,"src":"1275:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3105,"name":"uint256","nodeType":"ElementaryTypeName","src":"1275:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1250:42:13"},"src":"1237:56:13"},{"body":{"id":3146,"nodeType":"Block","src":"1451:256:13","statements":[{"expression":{"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3124,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"1462:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3126,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"1477:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3125,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"1470:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$362_$","typeString":"type(contract IERC20)"}},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1470:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"src":"1462:22:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3129,"nodeType":"ExpressionStatement","src":"1462:22:13"},{"expression":{"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3130,"name":"gameCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"1495:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000_by_1","typeString":"int_const 100000000000000000000"},"id":3135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313030","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1506:3:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"id":3134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1512:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3138","id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1516:2:13","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"1512:6:13","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"}},"src":"1506:12:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000_by_1","typeString":"int_const 100000000000000000000"}},"src":"1495:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3137,"nodeType":"ExpressionStatement","src":"1495:23:13"},{"expression":{"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3138,"name":"levelUpScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"1555:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31303030","id":3139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1570:4:13","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"1555:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3141,"nodeType":"ExpressionStatement","src":"1555:19:13"},{"expression":{"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3142,"name":"initialAirdropAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"1613:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3143,"name":"_initialAirdropAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"1636:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1613:44:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3145,"nodeType":"ExpressionStatement","src":"1613:44:13"}]},"id":3147,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"41726361646547616d65546f6b656e","id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1396:17:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_0caf7ca388a40b434d1b6c367d19331b329377f1461aa291162b7a5a25dda934","typeString":"literal_string \"ArcadeGameToken\""},"value":"ArcadeGameToken"},{"hexValue":"414754","id":3118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1415:5:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_020b170f91c066c3b60afbd956bde3e8bb83774f7e708722a631a992618345d5","typeString":"literal_string \"AGT\""},"value":"AGT"}],"id":3119,"kind":"baseConstructorSpecifier","modifierName":{"id":3116,"name":"ERC721","nameLocations":["1389:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1371,"src":"1389:6:13"},"nodeType":"ModifierInvocation","src":"1389:32:13"},{"arguments":[{"id":3121,"name":"_initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"1436:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3122,"kind":"baseConstructorSpecifier","modifierName":{"id":3120,"name":"Ownable","nameLocations":["1428:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1428:7:13"},"nodeType":"ModifierInvocation","src":"1428:22:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"_token","nameLocation":"1321:6:13","nodeType":"VariableDeclaration","scope":3147,"src":"1313:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3109,"name":"address","nodeType":"ElementaryTypeName","src":"1313:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3112,"mutability":"mutable","name":"_initialOwner","nameLocation":"1337:13:13","nodeType":"VariableDeclaration","scope":3147,"src":"1329:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3111,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3114,"mutability":"mutable","name":"_initialAirdropAmount","nameLocation":"1360:21:13","nodeType":"VariableDeclaration","scope":3147,"src":"1352:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3113,"name":"uint256","nodeType":"ElementaryTypeName","src":"1352:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1312:70:13"},"returnParameters":{"id":3123,"nodeType":"ParameterList","parameters":[],"src":"1451:0:13"},"scope":3577,"src":"1301:406:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3198,"nodeType":"Block","src":"1771:384:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3152,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1786:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3154,"indexExpression":{"id":3153,"name":"playerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"1794:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1786:22:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1809:5:13","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"1786:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1818:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1786:33:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3158,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1823:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3160,"indexExpression":{"id":3159,"name":"playerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"1831:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1823:22:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3161,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1846:5:13","memberName":"score","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"1823:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1855:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1823:33:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1786:70:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3165,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1860:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3167,"indexExpression":{"id":3166,"name":"playerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"1868:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1860:22:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1883:7:13","memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":3032,"src":"1860:30:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1894:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1860:35:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1786:109:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3197,"nodeType":"IfStatement","src":"1782:366:13","trueBody":{"id":3196,"nodeType":"Block","src":"1897:251:13","statements":[{"expression":{"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3172,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1912:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3174,"indexExpression":{"id":3173,"name":"playerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"1920:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1912:22:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1944:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1947:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"arguments":[{"hexValue":"30","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1967:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1953:13:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":3179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1957:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3180,"nodeType":"ArrayTypeName","src":"1957:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1953:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":3175,"name":"Player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"1937:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Player_$3038_storage_ptr_$","typeString":"type(struct ArcadeGame.Player storage pointer)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1937:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_memory_ptr","typeString":"struct ArcadeGame.Player memory"}},"src":"1912:58:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3186,"nodeType":"ExpressionStatement","src":"1912:58:13"},{"expression":{"arguments":[{"arguments":[{"id":3190,"name":"playerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"2049:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3191,"name":"initialAirdropAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"2064:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3188,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"2034:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2040:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":329,"src":"2034:14:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2034:51:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"41697264726f70206661696c6564","id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2087:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f","typeString":"literal_string \"Airdrop failed\""},"value":"Airdrop failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f","typeString":"literal_string \"Airdrop failed\""}],"id":3187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2026:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2026:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3195,"nodeType":"ExpressionStatement","src":"2026:78:13"}]}}]},"functionSelector":"139652e4","id":3199,"implemented":true,"kind":"function","modifiers":[],"name":"initializePlayer","nameLocation":"1724:16:13","nodeType":"FunctionDefinition","parameters":{"id":3150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3149,"mutability":"mutable","name":"playerAddress","nameLocation":"1749:13:13","nodeType":"VariableDeclaration","scope":3199,"src":"1741:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3148,"name":"address","nodeType":"ElementaryTypeName","src":"1741:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1740:23:13"},"returnParameters":{"id":3151,"nodeType":"ParameterList","parameters":[],"src":"1771:0:13"},"scope":3577,"src":"1715:440:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3288,"nodeType":"Block","src":"2204:675:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3207,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2239:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2243:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2239:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3205,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"2223:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2229:9:13","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":319,"src":"2223:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2223:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3210,"name":"gameCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2254:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2223:39:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e7320746f20706c6179","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:29:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536","typeString":"literal_string \"Insufficient tokens to play\""},"value":"Insufficient tokens to play"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536","typeString":"literal_string \"Insufficient tokens to play\""}],"id":3204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2215:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2215:79:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3214,"nodeType":"ExpressionStatement","src":"2215:79:13"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3218,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2332:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2336:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2332:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3222,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2352:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_ArcadeGame_$3577","typeString":"contract ArcadeGame"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ArcadeGame_$3577","typeString":"contract ArcadeGame"}],"id":3221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2344:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3220,"name":"address","nodeType":"ElementaryTypeName","src":"2344:7:13","typeDescriptions":{}}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2344:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3224,"name":"gameCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2359:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3216,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"2313:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:12:13","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":361,"src":"2313:18:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2313:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e207472616e73666572206661696c6564","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2370:23:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""},"value":"Token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""}],"id":3215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2305:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2305:89:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3228,"nodeType":"ExpressionStatement","src":"2305:89:13"},{"expression":{"arguments":[{"expression":{"id":3230,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2424:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2428:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2424:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3229,"name":"initializePlayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"2407:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2407:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3233,"nodeType":"ExpressionStatement","src":"2407:28:13"},{"assignments":[3236],"declarations":[{"constant":false,"id":3236,"mutability":"mutable","name":"player","nameLocation":"2495:6:13","nodeType":"VariableDeclaration","scope":3288,"src":"2480:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player"},"typeName":{"id":3235,"nodeType":"UserDefinedTypeName","pathNode":{"id":3234,"name":"Player","nameLocations":["2480:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3038,"src":"2480:6:13"},"referencedDeclaration":3038,"src":"2480:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player"}},"visibility":"internal"}],"id":3241,"initialValue":{"baseExpression":{"id":3237,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"2504:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3240,"indexExpression":{"expression":{"id":3238,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2512:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2516:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2512:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2504:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2480:43:13"},{"expression":{"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3242,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2534:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2541:5:13","memberName":"score","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"2534:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3245,"name":"_score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2550:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2534:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3247,"nodeType":"ExpressionStatement","src":"2534:22:13"},{"expression":{"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3248,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2567:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2574:7:13","memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":3032,"src":"2567:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3251,"name":"_score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2585:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2594:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"2585:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2567:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3255,"nodeType":"ExpressionStatement","src":"2567:29:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3256,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2643:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2650:5:13","memberName":"score","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"2643:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3258,"name":"levelUpScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"2659:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2643:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3279,"nodeType":"IfStatement","src":"2639:171:13","trueBody":{"id":3278,"nodeType":"Block","src":"2673:137:13","statements":[{"expression":{"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2688:14:13","subExpression":{"expression":{"id":3260,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2688:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2695:5:13","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"2688:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3264,"nodeType":"ExpressionStatement","src":"2688:14:13"},{"expression":{"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3265,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2717:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2724:5:13","memberName":"score","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"2717:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3268,"name":"levelUpScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"2733:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2717:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3270,"nodeType":"ExpressionStatement","src":"2717:28:13"},{"eventCall":{"arguments":[{"expression":{"id":3272,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2773:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2777:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2773:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3274,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2785:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2792:5:13","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"2785:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3271,"name":"LevelUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"2765:7:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3277,"nodeType":"EmitStatement","src":"2760:38:13"}]}},{"eventCall":{"arguments":[{"expression":{"id":3281,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2838:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2842:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2838:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3283,"name":"_score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2850:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3284,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2858:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2865:5:13","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"2858:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3280,"name":"GamePlayed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"2827:10:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:44:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3287,"nodeType":"EmitStatement","src":"2822:49:13"}]},"functionSelector":"5873533d","id":3289,"implemented":true,"kind":"function","modifiers":[],"name":"playGame","nameLocation":"2172:8:13","nodeType":"FunctionDefinition","parameters":{"id":3202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"_score","nameLocation":"2189:6:13","nodeType":"VariableDeclaration","scope":3289,"src":"2181:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2181:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2180:16:13"},"returnParameters":{"id":3203,"nodeType":"ParameterList","parameters":[],"src":"2204:0:13"},"scope":3577,"src":"2163:716:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3334,"nodeType":"Block","src":"2920:324:13","statements":[{"assignments":[3294],"declarations":[{"constant":false,"id":3294,"mutability":"mutable","name":"player","nameLocation":"2946:6:13","nodeType":"VariableDeclaration","scope":3334,"src":"2931:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player"},"typeName":{"id":3293,"nodeType":"UserDefinedTypeName","pathNode":{"id":3292,"name":"Player","nameLocations":["2931:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3038,"src":"2931:6:13"},"referencedDeclaration":3038,"src":"2931:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player"}},"visibility":"internal"}],"id":3299,"initialValue":{"baseExpression":{"id":3295,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"2955:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3298,"indexExpression":{"expression":{"id":3296,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2963:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2967:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2963:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2955:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2931:43:13"},{"assignments":[3301],"declarations":[{"constant":false,"id":3301,"mutability":"mutable","name":"rewards","nameLocation":"2993:7:13","nodeType":"VariableDeclaration","scope":3334,"src":"2985:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3300,"name":"uint256","nodeType":"ElementaryTypeName","src":"2985:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3304,"initialValue":{"expression":{"id":3302,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3003:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3010:7:13","memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":3032,"src":"3003:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2985:32:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"3036:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3046:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3036:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f207265776172647320746f20636c61696d","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3049:21:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d","typeString":"literal_string \"No rewards to claim\""},"value":"No rewards to claim"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d","typeString":"literal_string \"No rewards to claim\""}],"id":3305,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3028:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:43:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3311,"nodeType":"ExpressionStatement","src":"3028:43:13"},{"expression":{"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3312,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3084:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player storage pointer"}},"id":3314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3091:7:13","memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":3032,"src":"3084:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3101:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3084:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3317,"nodeType":"ExpressionStatement","src":"3084:18:13"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3321,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3136:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3140:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3136:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3323,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"3148:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3319,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"3121:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3127:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":329,"src":"3121:14:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3121:35:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526577617264207472616e73666572206661696c6564","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3158:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce","typeString":"literal_string \"Reward transfer failed\""},"value":"Reward transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce","typeString":"literal_string \"Reward transfer failed\""}],"id":3318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3113:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3113:70:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3327,"nodeType":"ExpressionStatement","src":"3113:70:13"},{"eventCall":{"arguments":[{"expression":{"id":3329,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3216:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3220:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3216:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3331,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"3228:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3328,"name":"RewardsClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"3201:14:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3201:35:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3333,"nodeType":"EmitStatement","src":"3196:40:13"}]},"functionSelector":"372500ab","id":3335,"implemented":true,"kind":"function","modifiers":[],"name":"claimRewards","nameLocation":"2896:12:13","nodeType":"FunctionDefinition","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[],"src":"2908:2:13"},"returnParameters":{"id":3291,"nodeType":"ParameterList","parameters":[],"src":"2920:0:13"},"scope":3577,"src":"2887:357:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3362,"nodeType":"Block","src":"3278:171:13","statements":[{"assignments":[3339],"declarations":[{"constant":false,"id":3339,"mutability":"mutable","name":"nftId","nameLocation":"3297:5:13","nodeType":"VariableDeclaration","scope":3362,"src":"3289:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3338,"name":"uint256","nodeType":"ElementaryTypeName","src":"3289:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3343,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3340,"name":"_nftIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"3305:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter storage ref"}},"id":3341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3319:7:13","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3595,"src":"3305:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3583_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$3583_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3305:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3289:39:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3344,"name":"_nftIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"3339:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter storage ref"}},"id":3346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3353:9:13","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"3339:23:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3583_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$3583_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3339:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3348,"nodeType":"ExpressionStatement","src":"3339:25:13"},{"expression":{"arguments":[{"expression":{"id":3350,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3383:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3387:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3383:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3352,"name":"nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"3395:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3349,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"3377:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3354,"nodeType":"ExpressionStatement","src":"3377:24:13"},{"expression":{"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3355,"name":"nftOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"3412:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3357,"indexExpression":{"id":3356,"name":"nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"3422:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3412:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3358,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3431:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3435:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3431:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3412:29:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3361,"nodeType":"ExpressionStatement","src":"3412:29:13"}]},"functionSelector":"14f710fe","id":3363,"implemented":true,"kind":"function","modifiers":[],"name":"mintNFT","nameLocation":"3261:7:13","nodeType":"FunctionDefinition","parameters":{"id":3336,"nodeType":"ParameterList","parameters":[],"src":"3268:2:13"},"returnParameters":{"id":3337,"nodeType":"ParameterList","parameters":[],"src":"3278:0:13"},"scope":3577,"src":"3252:197:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3399,"nodeType":"Block","src":"3530:201:13","statements":[{"assignments":[3373],"declarations":[{"constant":false,"id":3373,"mutability":"mutable","name":"itemId","nameLocation":"3549:6:13","nodeType":"VariableDeclaration","scope":3399,"src":"3541:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"3541:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3377,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3374,"name":"_itemIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3558:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter storage ref"}},"id":3375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3573:7:13","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3595,"src":"3558:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3583_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$3583_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3541:41:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3378,"name":"_itemIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3593:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter storage ref"}},"id":3380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3608:9:13","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"3593:24:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3583_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$3583_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3382,"nodeType":"ExpressionStatement","src":"3593:26:13"},{"expression":{"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3383,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3632:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Item_$3045_storage_$","typeString":"mapping(uint256 => struct ArcadeGame.Item storage ref)"}},"id":3385,"indexExpression":{"id":3384,"name":"itemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"3638:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3632:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage","typeString":"struct ArcadeGame.Item storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3387,"name":"itemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"3653:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3388,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"3661:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3389,"name":"_power","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"3668:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3386,"name":"Item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"3648:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Item_$3045_storage_ptr_$","typeString":"type(struct ArcadeGame.Item storage pointer)"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3648:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_memory_ptr","typeString":"struct ArcadeGame.Item memory"}},"src":"3632:43:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage","typeString":"struct ArcadeGame.Item storage ref"}},"id":3392,"nodeType":"ExpressionStatement","src":"3632:43:13"},{"eventCall":{"arguments":[{"id":3394,"name":"itemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"3701:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3395,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"3709:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3396,"name":"_power","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"3716:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3393,"name":"ItemAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"3691:9:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint256,string memory,uint256)"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3691:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3398,"nodeType":"EmitStatement","src":"3686:37:13"}]},"functionSelector":"62d6bbdf","id":3400,"implemented":true,"kind":"function","modifiers":[{"id":3370,"kind":"modifierInvocation","modifierName":{"id":3369,"name":"onlyOwner","nameLocations":["3520:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"3520:9:13"},"nodeType":"ModifierInvocation","src":"3520:9:13"}],"name":"addItem","nameLocation":"3466:7:13","nodeType":"FunctionDefinition","parameters":{"id":3368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"_name","nameLocation":"3488:5:13","nodeType":"VariableDeclaration","scope":3400,"src":"3474:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3364,"name":"string","nodeType":"ElementaryTypeName","src":"3474:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"_power","nameLocation":"3503:6:13","nodeType":"VariableDeclaration","scope":3400,"src":"3495:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"3495:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3473:37:13"},"returnParameters":{"id":3371,"nodeType":"ParameterList","parameters":[],"src":"3530:0:13"},"scope":3577,"src":"3457:274:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3454,"nodeType":"Block","src":"3787:357:13","statements":[{"assignments":[3407],"declarations":[{"constant":false,"id":3407,"mutability":"mutable","name":"item","nameLocation":"3810:4:13","nodeType":"VariableDeclaration","scope":3454,"src":"3798:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_memory_ptr","typeString":"struct ArcadeGame.Item"},"typeName":{"id":3406,"nodeType":"UserDefinedTypeName","pathNode":{"id":3405,"name":"Item","nameLocations":["3798:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"3798:4:13"},"referencedDeclaration":3045,"src":"3798:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage_ptr","typeString":"struct ArcadeGame.Item"}},"visibility":"internal"}],"id":3411,"initialValue":{"baseExpression":{"id":3408,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3817:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Item_$3045_storage_$","typeString":"mapping(uint256 => struct ArcadeGame.Item storage ref)"}},"id":3410,"indexExpression":{"id":3409,"name":"_itemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"3823:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3817:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage","typeString":"struct ArcadeGame.Item storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3798:33:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3415,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3866:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3866:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3413,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"3850:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3856:9:13","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":319,"src":"3850:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3850:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":3418,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"3881:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_memory_ptr","typeString":"struct ArcadeGame.Item memory"}},"id":3419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3886:5:13","memberName":"power","nodeType":"MemberAccess","referencedDeclaration":3044,"src":"3881:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3850:41:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e7320746f207075726368617365206974656d","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3893:38:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb","typeString":"literal_string \"Insufficient tokens to purchase item\""},"value":"Insufficient tokens to purchase item"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb","typeString":"literal_string \"Insufficient tokens to purchase item\""}],"id":3412,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3842:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:90:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3423,"nodeType":"ExpressionStatement","src":"3842:90:13"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3427,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3970:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3974:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3970:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3431,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3990:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_ArcadeGame_$3577","typeString":"contract ArcadeGame"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ArcadeGame_$3577","typeString":"contract ArcadeGame"}],"id":3430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3982:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3429,"name":"address","nodeType":"ElementaryTypeName","src":"3982:7:13","typeDescriptions":{}}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3982:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3433,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"3997:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_memory_ptr","typeString":"struct ArcadeGame.Item memory"}},"id":3434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4002:5:13","memberName":"power","nodeType":"MemberAccess","referencedDeclaration":3044,"src":"3997:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3425,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"3951:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$362","typeString":"contract IERC20"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3957:12:13","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":361,"src":"3951:18:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3951:57:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e207472616e73666572206661696c6564","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4010:23:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""},"value":"Token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""}],"id":3424,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3943:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3943:91:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3438,"nodeType":"ExpressionStatement","src":"3943:91:13"},{"expression":{"arguments":[{"id":3445,"name":"_itemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"4078:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"baseExpression":{"id":3439,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"4047:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3442,"indexExpression":{"expression":{"id":3440,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4055:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4059:6:13","memberName":"sender","nodeType":"MemberAccess","src":"4055:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4047:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4067:5:13","memberName":"items","nodeType":"MemberAccess","referencedDeclaration":3037,"src":"4047:25:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4073:4:13","memberName":"push","nodeType":"MemberAccess","src":"4047:30:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4047:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3447,"nodeType":"ExpressionStatement","src":"4047:39:13"},{"eventCall":{"arguments":[{"expression":{"id":3449,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4116:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4120:6:13","memberName":"sender","nodeType":"MemberAccess","src":"4116:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3451,"name":"_itemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"4128:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3448,"name":"ItemPurchased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"4102:13:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4102:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3453,"nodeType":"EmitStatement","src":"4097:39:13"}]},"functionSelector":"d38ea5bf","id":3455,"implemented":true,"kind":"function","modifiers":[],"name":"purchaseItem","nameLocation":"3748:12:13","nodeType":"FunctionDefinition","parameters":{"id":3403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3402,"mutability":"mutable","name":"_itemId","nameLocation":"3769:7:13","nodeType":"VariableDeclaration","scope":3455,"src":"3761:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"3761:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3760:17:13"},"returnParameters":{"id":3404,"nodeType":"ParameterList","parameters":[],"src":"3787:0:13"},"scope":3577,"src":"3739:405:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3491,"nodeType":"Block","src":"4233:179:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3464,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"4252:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3466,"indexExpression":{"id":3465,"name":"_player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"4260:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4252:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3467,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4269:5:13","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"4252:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4278:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4252:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3470,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"4283:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3472,"indexExpression":{"id":3471,"name":"_player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"4291:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4283:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4300:5:13","memberName":"score","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"4283:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4309:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4283:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4252:58:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3477,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"4314:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3479,"indexExpression":{"id":3478,"name":"_player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"4322:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4314:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"id":3480,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4331:7:13","memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":3032,"src":"4314:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4342:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4314:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4252:91:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c61796572206e6f7420696e697469616c697a6564","id":3484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4345:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813","typeString":"literal_string \"Player not initialized\""},"value":"Player not initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813","typeString":"literal_string \"Player not initialized\""}],"id":3463,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4244:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4244:126:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3486,"nodeType":"ExpressionStatement","src":"4244:126:13"},{"expression":{"baseExpression":{"id":3487,"name":"players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"4388:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Player_$3038_storage_$","typeString":"mapping(address => struct ArcadeGame.Player storage ref)"}},"id":3489,"indexExpression":{"id":3488,"name":"_player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"4396:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4388:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage","typeString":"struct ArcadeGame.Player storage ref"}},"functionReturnParameters":3462,"id":3490,"nodeType":"Return","src":"4381:23:13"}]},"functionSelector":"c8dd6ce7","id":3492,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayerDetails","nameLocation":"4161:16:13","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3457,"mutability":"mutable","name":"_player","nameLocation":"4186:7:13","nodeType":"VariableDeclaration","scope":3492,"src":"4178:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3456,"name":"address","nodeType":"ElementaryTypeName","src":"4178:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4177:17:13"},"returnParameters":{"id":3462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3492,"src":"4218:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_memory_ptr","typeString":"struct ArcadeGame.Player"},"typeName":{"id":3460,"nodeType":"UserDefinedTypeName","pathNode":{"id":3459,"name":"Player","nameLocations":["4218:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3038,"src":"4218:6:13"},"referencedDeclaration":3038,"src":"4218:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Player_$3038_storage_ptr","typeString":"struct ArcadeGame.Player"}},"visibility":"internal"}],"src":"4217:15:13"},"scope":3577,"src":"4152:260:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3539,"nodeType":"Block","src":"4479:249:13","statements":[{"assignments":[3500],"declarations":[{"constant":false,"id":3500,"mutability":"mutable","name":"itemCount","nameLocation":"4498:9:13","nodeType":"VariableDeclaration","scope":3539,"src":"4490:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3499,"name":"uint256","nodeType":"ElementaryTypeName","src":"4490:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3504,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3501,"name":"_itemIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"4510:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage","typeString":"struct Counters.Counter storage ref"}},"id":3502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4525:7:13","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3595,"src":"4510:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3583_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$3583_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4510:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4490:44:13"},{"assignments":[3509],"declarations":[{"constant":false,"id":3509,"mutability":"mutable","name":"itemList","nameLocation":"4559:8:13","nodeType":"VariableDeclaration","scope":3539,"src":"4545:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","typeString":"struct ArcadeGame.Item[]"},"typeName":{"baseType":{"id":3507,"nodeType":"UserDefinedTypeName","pathNode":{"id":3506,"name":"Item","nameLocations":["4545:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"4545:4:13"},"referencedDeclaration":3045,"src":"4545:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage_ptr","typeString":"struct ArcadeGame.Item"}},"id":3508,"nodeType":"ArrayTypeName","src":"4545:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_storage_$dyn_storage_ptr","typeString":"struct ArcadeGame.Item[]"}},"visibility":"internal"}],"id":3516,"initialValue":{"arguments":[{"id":3514,"name":"itemCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"4581:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4570:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct ArcadeGame.Item memory[] memory)"},"typeName":{"baseType":{"id":3511,"nodeType":"UserDefinedTypeName","pathNode":{"id":3510,"name":"Item","nameLocations":["4574:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"4574:4:13"},"referencedDeclaration":3045,"src":"4574:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage_ptr","typeString":"struct ArcadeGame.Item"}},"id":3512,"nodeType":"ArrayTypeName","src":"4574:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_storage_$dyn_storage_ptr","typeString":"struct ArcadeGame.Item[]"}}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4570:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","typeString":"struct ArcadeGame.Item memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"4545:46:13"},{"body":{"id":3535,"nodeType":"Block","src":"4644:49:13","statements":[{"expression":{"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3527,"name":"itemList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"4659:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","typeString":"struct ArcadeGame.Item memory[] memory"}},"id":3529,"indexExpression":{"id":3528,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"4668:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4659:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_memory_ptr","typeString":"struct ArcadeGame.Item memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3530,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"4673:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Item_$3045_storage_$","typeString":"mapping(uint256 => struct ArcadeGame.Item storage ref)"}},"id":3532,"indexExpression":{"id":3531,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"4679:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4673:8:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage","typeString":"struct ArcadeGame.Item storage ref"}},"src":"4659:22:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_memory_ptr","typeString":"struct ArcadeGame.Item memory"}},"id":3534,"nodeType":"ExpressionStatement","src":"4659:22:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"4624:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3522,"name":"itemCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"4628:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4624:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3536,"initializationExpression":{"assignments":[3518],"declarations":[{"constant":false,"id":3518,"mutability":"mutable","name":"i","nameLocation":"4617:1:13","nodeType":"VariableDeclaration","scope":3536,"src":"4609:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3517,"name":"uint256","nodeType":"ElementaryTypeName","src":"4609:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3520,"initialValue":{"hexValue":"30","id":3519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4621:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4609:13:13"},"loopExpression":{"expression":{"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4639:3:13","subExpression":{"id":3524,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"4639:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3526,"nodeType":"ExpressionStatement","src":"4639:3:13"},"nodeType":"ForStatement","src":"4604:89:13"},{"expression":{"id":3537,"name":"itemList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"4712:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","typeString":"struct ArcadeGame.Item memory[] memory"}},"functionReturnParameters":3498,"id":3538,"nodeType":"Return","src":"4705:15:13"}]},"functionSelector":"410d59cc","id":3540,"implemented":true,"kind":"function","modifiers":[],"name":"getItems","nameLocation":"4429:8:13","nodeType":"FunctionDefinition","parameters":{"id":3493,"nodeType":"ParameterList","parameters":[],"src":"4437:2:13"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3540,"src":"4464:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","typeString":"struct ArcadeGame.Item[]"},"typeName":{"baseType":{"id":3495,"nodeType":"UserDefinedTypeName","pathNode":{"id":3494,"name":"Item","nameLocations":["4464:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"4464:4:13"},"referencedDeclaration":3045,"src":"4464:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Item_$3045_storage_ptr","typeString":"struct ArcadeGame.Item"}},"id":3496,"nodeType":"ArrayTypeName","src":"4464:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Item_$3045_storage_$dyn_storage_ptr","typeString":"struct ArcadeGame.Item[]"}},"visibility":"internal"}],"src":"4463:15:13"},"scope":3577,"src":"4420:308:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3551,"nodeType":"Block","src":"4795:39:13","statements":[{"expression":{"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3547,"name":"gameCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"4806:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3548,"name":"_gameCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"4817:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4806:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3550,"nodeType":"ExpressionStatement","src":"4806:20:13"}]},"functionSelector":"7f17b79d","id":3552,"implemented":true,"kind":"function","modifiers":[{"id":3545,"kind":"modifierInvocation","modifierName":{"id":3544,"name":"onlyOwner","nameLocations":["4785:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4785:9:13"},"nodeType":"ModifierInvocation","src":"4785:9:13"}],"name":"setGameCost","nameLocation":"4745:11:13","nodeType":"FunctionDefinition","parameters":{"id":3543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3542,"mutability":"mutable","name":"_gameCost","nameLocation":"4765:9:13","nodeType":"VariableDeclaration","scope":3552,"src":"4757:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3541,"name":"uint256","nodeType":"ElementaryTypeName","src":"4757:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4756:19:13"},"returnParameters":{"id":3546,"nodeType":"ParameterList","parameters":[],"src":"4795:0:13"},"scope":3577,"src":"4736:98:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3563,"nodeType":"Block","src":"4909:47:13","statements":[{"expression":{"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3559,"name":"levelUpScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"4920:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3560,"name":"_levelUpScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"4935:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4920:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3562,"nodeType":"ExpressionStatement","src":"4920:28:13"}]},"functionSelector":"0931a4d1","id":3564,"implemented":true,"kind":"function","modifiers":[{"id":3557,"kind":"modifierInvocation","modifierName":{"id":3556,"name":"onlyOwner","nameLocations":["4899:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4899:9:13"},"nodeType":"ModifierInvocation","src":"4899:9:13"}],"name":"setLevelUpScore","nameLocation":"4851:15:13","nodeType":"FunctionDefinition","parameters":{"id":3555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3554,"mutability":"mutable","name":"_levelUpScore","nameLocation":"4875:13:13","nodeType":"VariableDeclaration","scope":3564,"src":"4867:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3553,"name":"uint256","nodeType":"ElementaryTypeName","src":"4867:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4866:23:13"},"returnParameters":{"id":3558,"nodeType":"ParameterList","parameters":[],"src":"4909:0:13"},"scope":3577,"src":"4842:114:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3575,"nodeType":"Block","src":"5047:63:13","statements":[{"expression":{"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3571,"name":"initialAirdropAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"5058:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3572,"name":"_initialAirdropAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"5081:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5058:44:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3574,"nodeType":"ExpressionStatement","src":"5058:44:13"}]},"functionSelector":"70ca3b16","id":3576,"implemented":true,"kind":"function","modifiers":[{"id":3569,"kind":"modifierInvocation","modifierName":{"id":3568,"name":"onlyOwner","nameLocations":["5037:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"5037:9:13"},"nodeType":"ModifierInvocation","src":"5037:9:13"}],"name":"setInitialAirdropAmount","nameLocation":"4973:23:13","nodeType":"FunctionDefinition","parameters":{"id":3567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3566,"mutability":"mutable","name":"_initialAirdropAmount","nameLocation":"5005:21:13","nodeType":"VariableDeclaration","scope":3576,"src":"4997:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3565,"name":"uint256","nodeType":"ElementaryTypeName","src":"4997:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4996:31:13"},"returnParameters":{"id":3570,"nodeType":"ParameterList","parameters":[],"src":"5047:0:13"},"scope":3577,"src":"4964:146:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3578,"src":"259:4854:13","usedErrors":[13,18,195,200,209,214,219,226,231,236],"usedEvents":[24,1387,1396,1405,3082,3088,3096,3102,3108]}],"src":"33:5082:13"},"id":13},"contracts/Counters.sol":{"ast":{"absolutePath":"contracts/Counters.sol","exportedSymbols":{"Counters":[3651]},"id":3652,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3579,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":3580,"nodeType":"StructuredDocumentation","src":"117:318:14","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":3651,"linearizedBaseContracts":[3651],"name":"Counters","nameLocation":"445:8:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":3583,"members":[{"constant":false,"id":3582,"mutability":"mutable","name":"_value","nameLocation":"812:6:14","nodeType":"VariableDeclaration","scope":3583,"src":"804:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3581,"name":"uint256","nodeType":"ElementaryTypeName","src":"804:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"468:7:14","nodeType":"StructDefinition","scope":3651,"src":"461:379:14","visibility":"public"},{"body":{"id":3594,"nodeType":"Block","src":"922:40:14","statements":[{"expression":{"expression":{"id":3591,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"940:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"948:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3582,"src":"940:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3590,"id":3593,"nodeType":"Return","src":"933:21:14"}]},"id":3595,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"857:7:14","nodeType":"FunctionDefinition","parameters":{"id":3587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3586,"mutability":"mutable","name":"counter","nameLocation":"881:7:14","nodeType":"VariableDeclaration","scope":3595,"src":"865:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3585,"nodeType":"UserDefinedTypeName","pathNode":{"id":3584,"name":"Counter","nameLocations":["865:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"865:7:14"},"referencedDeclaration":3583,"src":"865:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"864:25:14"},"returnParameters":{"id":3590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3595,"src":"913:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"912:9:14"},"scope":3651,"src":"848:114:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3608,"nodeType":"Block","src":"1023:74:14","statements":[{"id":3607,"nodeType":"UncheckedBlock","src":"1034:56:14","statements":[{"expression":{"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3601,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"1059:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3603,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1067:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3582,"src":"1059:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1059:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3606,"nodeType":"ExpressionStatement","src":"1059:19:14"}]}]},"id":3609,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"979:9:14","nodeType":"FunctionDefinition","parameters":{"id":3599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"mutability":"mutable","name":"counter","nameLocation":"1005:7:14","nodeType":"VariableDeclaration","scope":3609,"src":"989:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3597,"nodeType":"UserDefinedTypeName","pathNode":{"id":3596,"name":"Counter","nameLocations":["989:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"989:7:14"},"referencedDeclaration":3583,"src":"989:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"988:25:14"},"returnParameters":{"id":3600,"nodeType":"ParameterList","parameters":[],"src":"1023:0:14"},"scope":3651,"src":"970:127:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3636,"nodeType":"Block","src":"1158:182:14","statements":[{"assignments":[3616],"declarations":[{"constant":false,"id":3616,"mutability":"mutable","name":"value","nameLocation":"1177:5:14","nodeType":"VariableDeclaration","scope":3636,"src":"1169:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3619,"initialValue":{"expression":{"id":3617,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1193:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3582,"src":"1185:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1169:30:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"1218:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1226:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1218:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":3624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1229:29:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":3620,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1210:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1210:49:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3626,"nodeType":"ExpressionStatement","src":"1210:49:14"},{"id":3635,"nodeType":"UncheckedBlock","src":"1270:63:14","statements":[{"expression":{"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3627,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"1295:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1303:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3582,"src":"1295:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"1312:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1320:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1312:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1295:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3634,"nodeType":"ExpressionStatement","src":"1295:26:14"}]}]},"id":3637,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1114:9:14","nodeType":"FunctionDefinition","parameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"mutability":"mutable","name":"counter","nameLocation":"1140:7:14","nodeType":"VariableDeclaration","scope":3637,"src":"1124:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3611,"nodeType":"UserDefinedTypeName","pathNode":{"id":3610,"name":"Counter","nameLocations":["1124:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"1124:7:14"},"referencedDeclaration":3583,"src":"1124:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1123:25:14"},"returnParameters":{"id":3614,"nodeType":"ParameterList","parameters":[],"src":"1158:0:14"},"scope":3651,"src":"1105:235:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3649,"nodeType":"Block","src":"1397:37:14","statements":[{"expression":{"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3643,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"1408:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1416:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3582,"src":"1408:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1425:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1408:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"nodeType":"ExpressionStatement","src":"1408:18:14"}]},"id":3650,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1357:5:14","nodeType":"FunctionDefinition","parameters":{"id":3641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3640,"mutability":"mutable","name":"counter","nameLocation":"1379:7:14","nodeType":"VariableDeclaration","scope":3650,"src":"1363:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3639,"nodeType":"UserDefinedTypeName","pathNode":{"id":3638,"name":"Counter","nameLocations":["1363:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"1363:7:14"},"referencedDeclaration":3583,"src":"1363:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3583_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1362:25:14"},"returnParameters":{"id":3642,"nodeType":"ParameterList","parameters":[],"src":"1397:0:14"},"scope":3651,"src":"1348:86:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3652,"src":"437:1000:14","usedErrors":[],"usedEvents":[]}],"src":"90:1349:14"},"id":14}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":395,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":397,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":401,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":405,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":409,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":415,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011d1a1503b94e67b1140e37648e2b81c7ec8d2834b954c500654eb5772ec9e9164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xD1 LOG1 POP EXTCODESIZE SWAP5 0xE6 PUSH28 0x1140E37648E2B81C7EC8D2834B954C500654EB5772EC9E9164736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:2847:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011d1a1503b94e67b1140e37648e2b81c7ec8d2834b954c500654eb5772ec9e9164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xD1 LOG1 POP EXTCODESIZE SWAP5 0xE6 PUSH28 0x1140E37648E2B81C7EC8D2834B954C500654EB5772EC9E9164736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:2847:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066d55c3938bdee5e14d05a6a04425c3d0b6d4fad67efc8aafeaf67cc517b228a64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xD55C3938BDEE5E EQ 0xD0 GAS PUSH11 0x4425C3D0B6D4FAD67EFC8 0xAA INVALID 0xAF PUSH8 0xCC517B228A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"216:1047:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066d55c3938bdee5e14d05a6a04425c3d0b6d4fad67efc8aafeaf67cc517b228a64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xD55C3938BDEE5E EQ 0xD0 GAS PUSH11 0x4425C3D0B6D4FAD67EFC8 0xAA INVALID 0xAF PUSH8 0xCC517B228A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"216:1047:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ArcadeGame.sol":{"ArcadeGame":{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_initialOwner","type":"address"},{"internalType":"uint256","name":"_initialAirdropAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"score","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"level","type":"uint256"}],"name":"GamePlayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint256","name":"power","type":"uint256"}],"name":"ItemAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"ItemPurchased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"newLevel","type":"uint256"}],"name":"LevelUp","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewards","type":"uint256"}],"name":"RewardsClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_power","type":"uint256"}],"name":"addItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gameCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getItems","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"power","type":"uint256"}],"internalType":"struct ArcadeGame.Item[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_player","type":"address"}],"name":"getPlayerDetails","outputs":[{"components":[{"internalType":"uint256","name":"score","type":"uint256"},{"internalType":"uint256","name":"rewards","type":"uint256"},{"internalType":"uint256","name":"level","type":"uint256"},{"internalType":"uint256[]","name":"items","type":"uint256[]"}],"internalType":"struct ArcadeGame.Player","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialAirdropAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"playerAddress","type":"address"}],"name":"initializePlayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"items","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"power","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"levelUpScore","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nftOwners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_score","type":"uint256"}],"name":"playGame","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"players","outputs":[{"internalType":"uint256","name":"score","type":"uint256"},{"internalType":"uint256","name":"rewards","type":"uint256"},{"internalType":"uint256","name":"level","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_itemId","type":"uint256"}],"name":"purchaseItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gameCost","type":"uint256"}],"name":"setGameCost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_initialAirdropAmount","type":"uint256"}],"name":"setInitialAirdropAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_levelUpScore","type":"uint256"}],"name":"setLevelUpScore","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3147":{"entryPoint":null,"id":3147,"parameterSlots":3,"returnSlots":0},"@_432":{"entryPoint":null,"id":432,"parameterSlots":2,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":443,"id":146,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":724,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256_fromMemory":{"entryPoint":806,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1753,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1770,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1056,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":898,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1367,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":678,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":646,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":747,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1328,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":1202,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1522,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1077,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1003,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1492,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":1192,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1460,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":956,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":909,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1242,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":641,"id":null,"parameterSlots":0,"returnSlots":0},"shift_left_dynamic":{"entryPoint":1093,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1447,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1300,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1106,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1252,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":698,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":757,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1295,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7367:15","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:15","statements":[{"nodeType":"YulAssignment","src":"57:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:15"},"nodeType":"YulFunctionCall","src":"67:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:15","type":""}],"src":"7:75:15"},{"body":{"nodeType":"YulBlock","src":"177:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:15"},"nodeType":"YulFunctionCall","src":"187:12:15"},"nodeType":"YulExpressionStatement","src":"187:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:15"},{"body":{"nodeType":"YulBlock","src":"300:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:15"},"nodeType":"YulFunctionCall","src":"310:12:15"},"nodeType":"YulExpressionStatement","src":"310:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:15"},{"body":{"nodeType":"YulBlock","src":"379:81:15","statements":[{"nodeType":"YulAssignment","src":"389:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:15"},"nodeType":"YulFunctionCall","src":"400:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:15","type":""}],"src":"334:126:15"},{"body":{"nodeType":"YulBlock","src":"511:51:15","statements":[{"nodeType":"YulAssignment","src":"521:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:15"},"nodeType":"YulFunctionCall","src":"532:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:15","type":""}],"src":"466:96:15"},{"body":{"nodeType":"YulBlock","src":"611:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:15"},"nodeType":"YulFunctionCall","src":"670:12:15"},"nodeType":"YulExpressionStatement","src":"670:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:15"},"nodeType":"YulFunctionCall","src":"641:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:15"},"nodeType":"YulFunctionCall","src":"631:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:15"},"nodeType":"YulFunctionCall","src":"624:43:15"},"nodeType":"YulIf","src":"621:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:15","type":""}],"src":"568:122:15"},{"body":{"nodeType":"YulBlock","src":"759:80:15","statements":[{"nodeType":"YulAssignment","src":"769:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:15"},"nodeType":"YulFunctionCall","src":"778:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:15"},"nodeType":"YulFunctionCall","src":"800:33:15"},"nodeType":"YulExpressionStatement","src":"800:33:15"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:15","type":""}],"src":"696:143:15"},{"body":{"nodeType":"YulBlock","src":"890:32:15","statements":[{"nodeType":"YulAssignment","src":"900:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"911:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"900:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"872:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"882:7:15","type":""}],"src":"845:77:15"},{"body":{"nodeType":"YulBlock","src":"971:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:15"},"nodeType":"YulFunctionCall","src":"1030:12:15"},"nodeType":"YulExpressionStatement","src":"1030:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1001:17:15"},"nodeType":"YulFunctionCall","src":"1001:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:15"},"nodeType":"YulFunctionCall","src":"991:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:15"},"nodeType":"YulFunctionCall","src":"984:43:15"},"nodeType":"YulIf","src":"981:63:15"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:15","type":""}],"src":"928:122:15"},{"body":{"nodeType":"YulBlock","src":"1119:80:15","statements":[{"nodeType":"YulAssignment","src":"1129:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:15"},"nodeType":"YulFunctionCall","src":"1138:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1160:26:15"},"nodeType":"YulFunctionCall","src":"1160:33:15"},"nodeType":"YulExpressionStatement","src":"1160:33:15"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:15","type":""}],"src":"1056:143:15"},{"body":{"nodeType":"YulBlock","src":"1316:552:15","statements":[{"body":{"nodeType":"YulBlock","src":"1362:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1364:77:15"},"nodeType":"YulFunctionCall","src":"1364:79:15"},"nodeType":"YulExpressionStatement","src":"1364:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1337:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1346:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1333:3:15"},"nodeType":"YulFunctionCall","src":"1333:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1358:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1329:3:15"},"nodeType":"YulFunctionCall","src":"1329:32:15"},"nodeType":"YulIf","src":"1326:119:15"},{"nodeType":"YulBlock","src":"1455:128:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1470:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1484:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1474:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1499:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1545:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1556:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1541:3:15"},"nodeType":"YulFunctionCall","src":"1541:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1565:7:15"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1509:31:15"},"nodeType":"YulFunctionCall","src":"1509:64:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1499:6:15"}]}]},{"nodeType":"YulBlock","src":"1593:129:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1608:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1622:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1612:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1638:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1684:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1695:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1680:3:15"},"nodeType":"YulFunctionCall","src":"1680:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1704:7:15"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1648:31:15"},"nodeType":"YulFunctionCall","src":"1648:64:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1638:6:15"}]}]},{"nodeType":"YulBlock","src":"1732:129:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1747:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1761:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1751:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1777:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1823:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1834:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1819:3:15"},"nodeType":"YulFunctionCall","src":"1819:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1843:7:15"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1787:31:15"},"nodeType":"YulFunctionCall","src":"1787:64:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1777:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1270:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1281:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1293:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1301:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1309:6:15","type":""}],"src":"1205:663:15"},{"body":{"nodeType":"YulBlock","src":"1933:40:15","statements":[{"nodeType":"YulAssignment","src":"1944:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1960:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1954:5:15"},"nodeType":"YulFunctionCall","src":"1954:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1944:6:15"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1916:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1926:6:15","type":""}],"src":"1874:99:15"},{"body":{"nodeType":"YulBlock","src":"2007:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2024:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2027:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2017:6:15"},"nodeType":"YulFunctionCall","src":"2017:88:15"},"nodeType":"YulExpressionStatement","src":"2017:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2121:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2124:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2114:6:15"},"nodeType":"YulFunctionCall","src":"2114:15:15"},"nodeType":"YulExpressionStatement","src":"2114:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2145:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2148:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2138:6:15"},"nodeType":"YulFunctionCall","src":"2138:15:15"},"nodeType":"YulExpressionStatement","src":"2138:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1979:180:15"},{"body":{"nodeType":"YulBlock","src":"2193:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2210:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2213:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2203:6:15"},"nodeType":"YulFunctionCall","src":"2203:88:15"},"nodeType":"YulExpressionStatement","src":"2203:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2307:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2310:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2300:6:15"},"nodeType":"YulFunctionCall","src":"2300:15:15"},"nodeType":"YulExpressionStatement","src":"2300:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2331:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2334:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2324:6:15"},"nodeType":"YulFunctionCall","src":"2324:15:15"},"nodeType":"YulExpressionStatement","src":"2324:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"2165:180:15"},{"body":{"nodeType":"YulBlock","src":"2402:269:15","statements":[{"nodeType":"YulAssignment","src":"2412:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2426:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"2432:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2422:3:15"},"nodeType":"YulFunctionCall","src":"2422:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2412:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"2443:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2473:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"2479:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2469:3:15"},"nodeType":"YulFunctionCall","src":"2469:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2447:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2520:51:15","statements":[{"nodeType":"YulAssignment","src":"2534:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2548:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2556:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2544:3:15"},"nodeType":"YulFunctionCall","src":"2544:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2534:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2500:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2493:6:15"},"nodeType":"YulFunctionCall","src":"2493:26:15"},"nodeType":"YulIf","src":"2490:81:15"},{"body":{"nodeType":"YulBlock","src":"2623:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"2637:16:15"},"nodeType":"YulFunctionCall","src":"2637:18:15"},"nodeType":"YulExpressionStatement","src":"2637:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2587:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2610:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2618:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2607:2:15"},"nodeType":"YulFunctionCall","src":"2607:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2584:2:15"},"nodeType":"YulFunctionCall","src":"2584:38:15"},"nodeType":"YulIf","src":"2581:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2386:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2395:6:15","type":""}],"src":"2351:320:15"},{"body":{"nodeType":"YulBlock","src":"2731:87:15","statements":[{"nodeType":"YulAssignment","src":"2741:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"2749:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2741:4:15"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2769:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2772:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2762:6:15"},"nodeType":"YulFunctionCall","src":"2762:14:15"},"nodeType":"YulExpressionStatement","src":"2762:14:15"},{"nodeType":"YulAssignment","src":"2785:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2803:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2806:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2793:9:15"},"nodeType":"YulFunctionCall","src":"2793:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2785:4:15"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2718:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2726:4:15","type":""}],"src":"2677:141:15"},{"body":{"nodeType":"YulBlock","src":"2868:49:15","statements":[{"nodeType":"YulAssignment","src":"2878:33:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2896:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2903:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:15"},"nodeType":"YulFunctionCall","src":"2892:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"2908:2:15","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2888:3:15"},"nodeType":"YulFunctionCall","src":"2888:23:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2878:6:15"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2851:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2861:6:15","type":""}],"src":"2824:93:15"},{"body":{"nodeType":"YulBlock","src":"2976:54:15","statements":[{"nodeType":"YulAssignment","src":"2986:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3011:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"3017:5:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3007:3:15"},"nodeType":"YulFunctionCall","src":"3007:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"2986:8:15"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"2951:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"2957:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"2967:8:15","type":""}],"src":"2923:107:15"},{"body":{"nodeType":"YulBlock","src":"3112:317:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3122:35:15","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"3143:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"3155:1:15","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3139:3:15"},"nodeType":"YulFunctionCall","src":"3139:18:15"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"3126:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3166:109:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"3197:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3208:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"3178:18:15"},"nodeType":"YulFunctionCall","src":"3178:97:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3170:4:15","type":""}]},{"nodeType":"YulAssignment","src":"3284:51:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"3315:9:15"},{"name":"toInsert","nodeType":"YulIdentifier","src":"3326:8:15"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"3296:18:15"},"nodeType":"YulFunctionCall","src":"3296:39:15"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"3284:8:15"}]},{"nodeType":"YulAssignment","src":"3344:30:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3357:5:15"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"3368:4:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3364:3:15"},"nodeType":"YulFunctionCall","src":"3364:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3353:3:15"},"nodeType":"YulFunctionCall","src":"3353:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3344:5:15"}]},{"nodeType":"YulAssignment","src":"3383:40:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3396:5:15"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"3407:8:15"},{"name":"mask","nodeType":"YulIdentifier","src":"3417:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3403:3:15"},"nodeType":"YulFunctionCall","src":"3403:19:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3393:2:15"},"nodeType":"YulFunctionCall","src":"3393:30:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3383:6:15"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3073:5:15","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"3080:10:15","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"3092:8:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3105:6:15","type":""}],"src":"3036:393:15"},{"body":{"nodeType":"YulBlock","src":"3467:28:15","statements":[{"nodeType":"YulAssignment","src":"3477:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"3484:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3477:3:15"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3453:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3463:3:15","type":""}],"src":"3435:60:15"},{"body":{"nodeType":"YulBlock","src":"3561:82:15","statements":[{"nodeType":"YulAssignment","src":"3571:66:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3629:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3611:17:15"},"nodeType":"YulFunctionCall","src":"3611:24:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"3602:8:15"},"nodeType":"YulFunctionCall","src":"3602:34:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3584:17:15"},"nodeType":"YulFunctionCall","src":"3584:53:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"3571:9:15"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3541:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"3551:9:15","type":""}],"src":"3501:142:15"},{"body":{"nodeType":"YulBlock","src":"3696:28:15","statements":[{"nodeType":"YulAssignment","src":"3706:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"3713:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3706:3:15"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3682:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3692:3:15","type":""}],"src":"3649:75:15"},{"body":{"nodeType":"YulBlock","src":"3806:193:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3816:63:15","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"3871:7:15"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"3840:30:15"},"nodeType":"YulFunctionCall","src":"3840:39:15"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"3820:16:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3895:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3935:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3929:5:15"},"nodeType":"YulFunctionCall","src":"3929:11:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3942:6:15"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"3974:16:15"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"3950:23:15"},"nodeType":"YulFunctionCall","src":"3950:41:15"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"3901:27:15"},"nodeType":"YulFunctionCall","src":"3901:91:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3888:6:15"},"nodeType":"YulFunctionCall","src":"3888:105:15"},"nodeType":"YulExpressionStatement","src":"3888:105:15"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3783:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"3789:6:15","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"3797:7:15","type":""}],"src":"3730:269:15"},{"body":{"nodeType":"YulBlock","src":"4054:24:15","statements":[{"nodeType":"YulAssignment","src":"4064:8:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4071:1:15","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4064:3:15"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4050:3:15","type":""}],"src":"4005:73:15"},{"body":{"nodeType":"YulBlock","src":"4137:136:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4147:46:15","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"4161:30:15"},"nodeType":"YulFunctionCall","src":"4161:32:15"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"4151:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4246:4:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4252:6:15"},{"name":"zero_0","nodeType":"YulIdentifier","src":"4260:6:15"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"4202:43:15"},"nodeType":"YulFunctionCall","src":"4202:65:15"},"nodeType":"YulExpressionStatement","src":"4202:65:15"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"4123:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"4129:6:15","type":""}],"src":"4084:189:15"},{"body":{"nodeType":"YulBlock","src":"4329:136:15","statements":[{"body":{"nodeType":"YulBlock","src":"4396:63:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4440:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"4447:1:15","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"4410:29:15"},"nodeType":"YulFunctionCall","src":"4410:39:15"},"nodeType":"YulExpressionStatement","src":"4410:39:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4349:5:15"},{"name":"end","nodeType":"YulIdentifier","src":"4356:3:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4346:2:15"},"nodeType":"YulFunctionCall","src":"4346:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4361:26:15","statements":[{"nodeType":"YulAssignment","src":"4363:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4376:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"4383:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:15"},"nodeType":"YulFunctionCall","src":"4372:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"4363:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"4343:2:15","statements":[]},"src":"4339:120:15"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"4317:5:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"4324:3:15","type":""}],"src":"4279:186:15"},{"body":{"nodeType":"YulBlock","src":"4550:464:15","statements":[{"body":{"nodeType":"YulBlock","src":"4576:431:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4590:54:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4638:5:15"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4606:31:15"},"nodeType":"YulFunctionCall","src":"4606:38:15"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"4594:8:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4657:63:15","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"4680:8:15"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"4708:10:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"4690:17:15"},"nodeType":"YulFunctionCall","src":"4690:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4676:3:15"},"nodeType":"YulFunctionCall","src":"4676:44:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"4661:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4877:27:15","statements":[{"nodeType":"YulAssignment","src":"4879:23:15","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"4894:8:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"4879:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"4861:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"4873:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4858:2:15"},"nodeType":"YulFunctionCall","src":"4858:18:15"},"nodeType":"YulIf","src":"4855:49:15"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"4946:11:15"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"4963:8:15"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"4991:3:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"4973:17:15"},"nodeType":"YulFunctionCall","src":"4973:22:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4959:3:15"},"nodeType":"YulFunctionCall","src":"4959:37:15"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"4917:28:15"},"nodeType":"YulFunctionCall","src":"4917:80:15"},"nodeType":"YulExpressionStatement","src":"4917:80:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"4567:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"4572:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4564:2:15"},"nodeType":"YulFunctionCall","src":"4564:11:15"},"nodeType":"YulIf","src":"4561:446:15"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"4526:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"4533:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"4538:10:15","type":""}],"src":"4471:543:15"},{"body":{"nodeType":"YulBlock","src":"5083:54:15","statements":[{"nodeType":"YulAssignment","src":"5093:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"5118:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"5124:5:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5114:3:15"},"nodeType":"YulFunctionCall","src":"5114:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"5093:8:15"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"5058:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"5064:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"5074:8:15","type":""}],"src":"5020:117:15"},{"body":{"nodeType":"YulBlock","src":"5194:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5204:68:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5253:1:15","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"5256:5:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5249:3:15"},"nodeType":"YulFunctionCall","src":"5249:13:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5268:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5264:3:15"},"nodeType":"YulFunctionCall","src":"5264:6:15"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"5220:28:15"},"nodeType":"YulFunctionCall","src":"5220:51:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5216:3:15"},"nodeType":"YulFunctionCall","src":"5216:56:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"5208:4:15","type":""}]},{"nodeType":"YulAssignment","src":"5281:25:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5295:4:15"},{"name":"mask","nodeType":"YulIdentifier","src":"5301:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5291:3:15"},"nodeType":"YulFunctionCall","src":"5291:15:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5281:6:15"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5171:4:15","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"5177:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5187:6:15","type":""}],"src":"5143:169:15"},{"body":{"nodeType":"YulBlock","src":"5398:214:15","statements":[{"nodeType":"YulAssignment","src":"5531:37:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5558:4:15"},{"name":"len","nodeType":"YulIdentifier","src":"5564:3:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"5539:18:15"},"nodeType":"YulFunctionCall","src":"5539:29:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5531:4:15"}]},{"nodeType":"YulAssignment","src":"5577:29:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5588:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5598:1:15","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"5601:3:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5594:3:15"},"nodeType":"YulFunctionCall","src":"5594:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5585:2:15"},"nodeType":"YulFunctionCall","src":"5585:21:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"5577:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5379:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"5385:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"5393:4:15","type":""}],"src":"5317:295:15"},{"body":{"nodeType":"YulBlock","src":"5709:1303:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5720:51:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5767:3:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5734:32:15"},"nodeType":"YulFunctionCall","src":"5734:37:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"5724:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"5856:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5858:16:15"},"nodeType":"YulFunctionCall","src":"5858:18:15"},"nodeType":"YulExpressionStatement","src":"5858:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"5828:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5836:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5825:2:15"},"nodeType":"YulFunctionCall","src":"5825:30:15"},"nodeType":"YulIf","src":"5822:56:15"},{"nodeType":"YulVariableDeclaration","src":"5888:52:15","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5934:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5928:5:15"},"nodeType":"YulFunctionCall","src":"5928:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"5902:25:15"},"nodeType":"YulFunctionCall","src":"5902:38:15"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"5892:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6033:4:15"},{"name":"oldLen","nodeType":"YulIdentifier","src":"6039:6:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"6047:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"5987:45:15"},"nodeType":"YulFunctionCall","src":"5987:67:15"},"nodeType":"YulExpressionStatement","src":"5987:67:15"},{"nodeType":"YulVariableDeclaration","src":"6064:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6081:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"6068:9:15","type":""}]},{"nodeType":"YulAssignment","src":"6092:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6105:4:15","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"6092:9:15"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"6156:611:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6170:37:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6189:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6201:4:15","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6197:3:15"},"nodeType":"YulFunctionCall","src":"6197:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6185:3:15"},"nodeType":"YulFunctionCall","src":"6185:22:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"6174:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6221:51:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6267:4:15"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6235:31:15"},"nodeType":"YulFunctionCall","src":"6235:37:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"6225:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6285:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6294:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6289:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"6353:163:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6378:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6396:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"6401:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6392:3:15"},"nodeType":"YulFunctionCall","src":"6392:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6386:5:15"},"nodeType":"YulFunctionCall","src":"6386:26:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6371:6:15"},"nodeType":"YulFunctionCall","src":"6371:42:15"},"nodeType":"YulExpressionStatement","src":"6371:42:15"},{"nodeType":"YulAssignment","src":"6430:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6444:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6452:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6440:3:15"},"nodeType":"YulFunctionCall","src":"6440:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6430:6:15"}]},{"nodeType":"YulAssignment","src":"6471:31:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"6488:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6499:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6484:3:15"},"nodeType":"YulFunctionCall","src":"6484:18:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"6471:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6319:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"6322:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6316:2:15"},"nodeType":"YulFunctionCall","src":"6316:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6331:21:15","statements":[{"nodeType":"YulAssignment","src":"6333:17:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6342:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"6345:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6338:3:15"},"nodeType":"YulFunctionCall","src":"6338:12:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6333:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"6312:3:15","statements":[]},"src":"6308:208:15"},{"body":{"nodeType":"YulBlock","src":"6552:156:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6570:43:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6597:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"6602:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6593:3:15"},"nodeType":"YulFunctionCall","src":"6593:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6587:5:15"},"nodeType":"YulFunctionCall","src":"6587:26:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"6574:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6637:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"6664:9:15"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6679:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6687:4:15","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6675:3:15"},"nodeType":"YulFunctionCall","src":"6675:17:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"6645:18:15"},"nodeType":"YulFunctionCall","src":"6645:48:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6630:6:15"},"nodeType":"YulFunctionCall","src":"6630:64:15"},"nodeType":"YulExpressionStatement","src":"6630:64:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"6535:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"6544:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6532:2:15"},"nodeType":"YulFunctionCall","src":"6532:19:15"},"nodeType":"YulIf","src":"6529:179:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6728:4:15"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6742:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6750:1:15","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6738:3:15"},"nodeType":"YulFunctionCall","src":"6738:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"6754:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6734:3:15"},"nodeType":"YulFunctionCall","src":"6734:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6721:6:15"},"nodeType":"YulFunctionCall","src":"6721:36:15"},"nodeType":"YulExpressionStatement","src":"6721:36:15"}]},"nodeType":"YulCase","src":"6149:618:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6154:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"6784:222:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6798:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6811:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6802:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"6835:67:15","statements":[{"nodeType":"YulAssignment","src":"6853:35:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6872:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"6877:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6868:3:15"},"nodeType":"YulFunctionCall","src":"6868:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6862:5:15"},"nodeType":"YulFunctionCall","src":"6862:26:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6853:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"6828:6:15"},"nodeType":"YulIf","src":"6825:77:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6922:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6981:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"6988:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"6928:52:15"},"nodeType":"YulFunctionCall","src":"6928:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6915:6:15"},"nodeType":"YulFunctionCall","src":"6915:81:15"},"nodeType":"YulExpressionStatement","src":"6915:81:15"}]},"nodeType":"YulCase","src":"6776:230:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6129:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6137:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6126:2:15"},"nodeType":"YulFunctionCall","src":"6126:14:15"},"nodeType":"YulSwitch","src":"6119:887:15"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5698:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"5704:3:15","type":""}],"src":"5617:1395:15"},{"body":{"nodeType":"YulBlock","src":"7083:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7100:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7123:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7105:17:15"},"nodeType":"YulFunctionCall","src":"7105:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7093:6:15"},"nodeType":"YulFunctionCall","src":"7093:37:15"},"nodeType":"YulExpressionStatement","src":"7093:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7071:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7078:3:15","type":""}],"src":"7018:118:15"},{"body":{"nodeType":"YulBlock","src":"7240:124:15","statements":[{"nodeType":"YulAssignment","src":"7250:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7262:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7273:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7258:3:15"},"nodeType":"YulFunctionCall","src":"7258:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7250:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7330:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7343:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7354:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7339:3:15"},"nodeType":"YulFunctionCall","src":"7339:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"7286:43:15"},"nodeType":"YulFunctionCall","src":"7286:71:15"},"nodeType":"YulExpressionStatement","src":"7286:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7212:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7224:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7235:4:15","type":""}],"src":"7142:222:15"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620048bf380380620048bf833981810160405281019062000037919062000326565b816040518060400160405280600f81526020017f41726361646547616d65546f6b656e00000000000000000000000000000000008152506040518060400160405280600381526020017f41475400000000000000000000000000000000000000000000000000000000008152508160009081620000b59190620005f2565b508060019081620000c79190620005f2565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013f5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620001369190620006ea565b60405180910390fd5b6200015081620001bb60201b60201c565b5082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555068056bc75e2d63100000600a819055506103e8600b8190555080600c8190555050505062000707565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b38262000286565b9050919050565b620002c581620002a6565b8114620002d157600080fd5b50565b600081519050620002e581620002ba565b92915050565b6000819050919050565b6200030081620002eb565b81146200030c57600080fd5b50565b6000815190506200032081620002f5565b92915050565b60008060006060848603121562000342576200034162000281565b5b60006200035286828701620002d4565b93505060206200036586828701620002d4565b925050604062000378868287016200030f565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200040457607f821691505b6020821081036200041a5762000419620003bc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000445565b62000490868362000445565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004d3620004cd620004c784620002eb565b620004a8565b620002eb565b9050919050565b6000819050919050565b620004ef83620004b2565b62000507620004fe82620004da565b84845462000452565b825550505050565b600090565b6200051e6200050f565b6200052b818484620004e4565b505050565b5b8181101562000553576200054760008262000514565b60018101905062000531565b5050565b601f821115620005a2576200056c8162000420565b620005778462000435565b8101602085101562000587578190505b6200059f620005968562000435565b83018262000530565b50505b505050565b600082821c905092915050565b6000620005c760001984600802620005a7565b1980831691505092915050565b6000620005e28383620005b4565b9150826002028217905092915050565b620005fd8262000382565b67ffffffffffffffff8111156200061957620006186200038d565b5b620006258254620003eb565b6200063282828562000557565b600060209050601f8311600181146200066a576000841562000655578287015190505b620006618582620005d4565b865550620006d1565b601f1984166200067a8662000420565b60005b82811015620006a4578489015182556001820191506020850194506020810190506200067d565b86831015620006c45784890151620006c0601f891682620005b4565b8355505b6001600288020188555050505b505050505050565b620006e481620002a6565b82525050565b6000602082019050620007016000830184620006d9565b92915050565b6141a880620007176000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80637f17b79d1161011a578063c87b56dd116100ad578063e2eb41ff1161007c578063e2eb41ff146105af578063e7804338146105e1578063e985e9c5146105ff578063f2fde38b1461062f578063fc0c546a1461064b57610206565b8063c87b56dd14610515578063c8dd6ce714610545578063cab896dc14610575578063d38ea5bf1461059357610206565b8063affc55c0116100e9578063affc55c014610479578063b88d4fde14610497578063bbd94c2f146104b3578063bfb231d2146104e357610206565b80637f17b79d146104055780638da5cb5b1461042157806395d89b411461043f578063a22cb4651461045d57610206565b8063372500ab1161019d57806362d6bbdf1161016c57806362d6bbdf146103635780636352211e1461037f57806370a08231146103af57806370ca3b16146103df578063715018a6146103fb57610206565b8063372500ab14610303578063410d59cc1461030d57806342842e0e1461032b5780635873533d1461034757610206565b8063095ea7b3116101d9578063095ea7b3146102a5578063139652e4146102c157806314f710fe146102dd57806323b872dd146102e757610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc146102595780630931a4d114610289575b600080fd5b61022560048036038101906102209190612d64565b610669565b6040516102329190612dac565b60405180910390f35b61024361074b565b6040516102509190612e57565b60405180910390f35b610273600480360381019061026e9190612eaf565b6107dd565b6040516102809190612f1d565b60405180910390f35b6102a3600480360381019061029e9190612eaf565b6107f9565b005b6102bf60048036038101906102ba9190612f64565b61080b565b005b6102db60048036038101906102d69190612fa4565b610821565b005b6102e5610ad7565b005b61030160048036038101906102fc9190612fd1565b610b4e565b005b61030b610c50565b005b610315610e1a565b604051610322919061318f565b60405180910390f35b61034560048036038101906103409190612fd1565b610f8b565b005b610361600480360381019061035c9190612eaf565b610fab565b005b61037d600480360381019061037891906132e6565b6112eb565b005b61039960048036038101906103949190612eaf565b6113a5565b6040516103a69190612f1d565b60405180910390f35b6103c960048036038101906103c49190612fa4565b6113b7565b6040516103d69190613351565b60405180910390f35b6103f960048036038101906103f49190612eaf565b611471565b005b610403611483565b005b61041f600480360381019061041a9190612eaf565b611497565b005b6104296114a9565b6040516104369190612f1d565b60405180910390f35b6104476114d3565b6040516104549190612e57565b60405180910390f35b61047760048036038101906104729190613398565b611565565b005b61048161157b565b60405161048e9190613351565b60405180910390f35b6104b160048036038101906104ac9190613479565b611581565b005b6104cd60048036038101906104c89190612eaf565b61159e565b6040516104da9190612f1d565b60405180910390f35b6104fd60048036038101906104f89190612eaf565b6115d1565b60405161050c939291906134fc565b60405180910390f35b61052f600480360381019061052a9190612eaf565b611683565b60405161053c9190612e57565b60405180910390f35b61055f600480360381019061055a9190612fa4565b6116ec565b60405161056c919061364c565b60405180910390f35b61057d6118dd565b60405161058a9190613351565b60405180910390f35b6105ad60048036038101906105a89190612eaf565b6118e3565b005b6105c960048036038101906105c49190612fa4565b611c23565b6040516105d89392919061366e565b60405180910390f35b6105e9611c4d565b6040516105f69190613351565b60405180910390f35b610619600480360381019061061491906136a5565b611c53565b6040516106269190612dac565b60405180910390f35b61064960048036038101906106449190612fa4565b611ce7565b005b610653611d6d565b6040516106609190613744565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061073457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610744575061074382611d93565b5b9050919050565b60606000805461075a9061378e565b80601f01602080910402602001604051908101604052809291908181526020018280546107869061378e565b80156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b5050505050905090565b60006107e882611dfd565b506107f282611e85565b9050919050565b610801611ec2565b80600b8190555050565b61081d8282610818611f49565b611f51565b5050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541480156108b557506000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b801561090357506000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154145b15610ad4576040518060800160405280600081526020016000815260200160018152602001600067ffffffffffffffff811115610943576109426131bb565b5b6040519080825280602002602001820160405280156109715781602001602082028036833780820191505090505b50815250600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190805190602001906109ee929190612c45565b50905050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600c546040518363ffffffff1660e01b8152600401610a519291906137bf565b6020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906137fd565b610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90613876565b60405180910390fd5b5b50565b6000610ae36009611f63565b9050610aef6009611f71565b610af93382611f87565b33600f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bc05760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610bb79190612f1d565b60405180910390fd5b6000610bd48383610bcf611f49565b612080565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c4a578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610c4193929190613896565b60405180910390fd5b50505050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154905060008111610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd690613919565b60405180910390fd5b60008260010181905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d469291906137bf565b6020604051808303816000875af1158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8991906137fd565b610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf90613985565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe82604051610e0e9190613351565b60405180910390a25050565b60606000610e286008611f63565b905060008167ffffffffffffffff811115610e4657610e456131bb565b5b604051908082528060200260200182016040528015610e7f57816020015b610e6c612c92565b815260200190600190039081610e645790505b50905060005b82811015610f8257600e600082815260200190815260200160002060405180606001604052908160008201548152602001600182018054610ec59061378e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef19061378e565b8015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b820191906000526020600020905b815481529060010190602001808311610f2157829003601f168201915b50505050508152602001600282015481525050828281518110610f6457610f636139a5565b5b60200260200101819052508080610f7a90613a03565b915050610e85565b50809250505090565b610fa683838360405180602001604052806000815250611581565b505050565b600a54600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016110099190612f1d565b602060405180830381865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190613a60565b101561108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290613ad9565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a546040518463ffffffff1660e01b81526004016110ec93929190613af9565b6020604051808303816000875af115801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f91906137fd565b61116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590613b7c565b60405180910390fd5b61117733610821565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000160008282546111ce9190613b9c565b92505081905550600a826111e29190613bff565b8160010160008282546111f59190613b9c565b92505081905550600b548160000154106112935780600201600081548092919061121e90613a03565b9190505550600b548160000160008282546112399190613c30565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f91e51c29e7e87a74ad3b8ccba98538970f50a4309242735467f41e27c6b0fbac826002015460405161128a9190613351565b60405180910390a25b3373ffffffffffffffffffffffffffffffffffffffff167f24b31e1dbf1732a12bb700d3d77e5fb96ff3b693374d9fa15ccbc03f427150768383600201546040516112df929190613c64565b60405180910390a25050565b6112f3611ec2565b60006112ff6008611f63565b905061130b6008611f71565b604051806060016040528082815260200184815260200183815250600e60008381526020019081526020016000206000820151816000015560208201518160010190816113589190613e2f565b5060408201518160020155905050807f0444434676a57f70f8479401c50fb4add3e31052f88f4b35e155b7759e5968e58484604051611398929190613f01565b60405180910390a2505050565b60006113b082611dfd565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361142a5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016114219190612f1d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611479611ec2565b80600c8190555050565b61148b611ec2565b611495600061229a565b565b61149f611ec2565b80600a8190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546114e29061378e565b80601f016020809104026020016040519081016040528092919081815260200182805461150e9061378e565b801561155b5780601f106115305761010080835404028352916020019161155b565b820191906000526020600020905b81548152906001019060200180831161153e57829003601f168201915b5050505050905090565b611577611570611f49565b8383612360565b5050565b600b5481565b61158c848484610b4e565b611598848484846124cf565b50505050565b600f6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e6020528060005260406000206000915090508060000154908060010180546115fa9061378e565b80601f01602080910402602001604051908101604052809291908181526020018280546116269061378e565b80156116735780601f1061164857610100808354040283529160200191611673565b820191906000526020600020905b81548152906001019060200180831161165657829003601f168201915b5050505050908060020154905083565b606061168e82611dfd565b506000611699612686565b905060008151116116b957604051806020016040528060008152506116e4565b806116c38461269d565b6040516020016116d4929190613f6d565b6040516020818303038152906040525b915050919050565b6116f4612cb3565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414158061178957506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414155b806117d757506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414155b611816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180d90613fdd565b60405180910390fd5b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156118cd57602002820191906000526020600020905b8154815260200190600101908083116118b9575b5050505050815250509050919050565b600a5481565b6000600e60008381526020019081526020016000206040518060600160405290816000820154815260200160018201805461191d9061378e565b80601f01602080910402602001604051908101604052809291908181526020018280546119499061378e565b80156119965780601f1061196b57610100808354040283529160200191611996565b820191906000526020600020905b81548152906001019060200180831161197957829003601f168201915b5050505050815260200160028201548152505090508060400151600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611a0b9190612f1d565b602060405180830381865afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190613a60565b1015611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a849061406f565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084604001516040518463ffffffff1660e01b8152600401611af093929190613af9565b6020604051808303816000875af1158015611b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3391906137fd565b611b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6990613b7c565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301829080600181540180825580915050600190039060005260206000200160009091909190915055813373ffffffffffffffffffffffffffffffffffffffff167f792fe07c0f3ce4ef42df79c4a2b07925168cddbaabf7a7ef1351f027a376031360405160405180910390a35050565b600d6020528060005260406000206000915090508060000154908060010154908060020154905083565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611cef611ec2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d615760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611d589190612f1d565b60405180910390fd5b611d6a8161229a565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080611e098361276b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e7c57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611e739190613351565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611eca611f49565b73ffffffffffffffffffffffffffffffffffffffff16611ee86114a9565b73ffffffffffffffffffffffffffffffffffffffff1614611f4757611f0b611f49565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611f3e9190612f1d565b60405180910390fd5b565b600033905090565b611f5e83838360016127a8565b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ff95760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611ff09190612f1d565b60405180910390fd5b600061200783836000612080565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461207b5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016120729190612f1d565b60405180910390fd5b505050565b60008061208c8461276b565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146120ce576120cd81848661296d565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461215f576121106000856000806127a8565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146121e2576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036123d157816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016123c89190612f1d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124c29190612dac565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612680578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02612513611f49565b8685856040518563ffffffff1660e01b815260040161253594939291906140e4565b6020604051808303816000875af192505050801561257157506040513d601f19601f8201168201806040525081019061256e9190614145565b60015b6125f5573d80600081146125a1576040519150601f19603f3d011682016040523d82523d6000602084013e6125a6565b606091505b5060008151036125ed57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016125e49190612f1d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461267e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016126759190612f1d565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060600060016126ac84612a31565b01905060008167ffffffffffffffff8111156126cb576126ca6131bb565b5b6040519080825280601f01601f1916602001820160405280156126fd5781602001600182028036833780820191505090505b509050600082602001820190505b600115612760578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161275457612753613bd0565b5b0494506000850361270b575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806127e15750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156129155760006127f184611dfd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561285c57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561286f575061286d8184611c53565b155b156128b157826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016128a89190612f1d565b60405180910390fd5b811561291357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612978838383612b84565b612a2c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129ed57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016129e49190613351565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612a239291906137bf565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a8f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a8557612a84613bd0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612acc576d04ee2d6d415b85acef81000000008381612ac257612ac1613bd0565b5b0492506020810190505b662386f26fc100008310612afb57662386f26fc100008381612af157612af0613bd0565b5b0492506010810190505b6305f5e1008310612b24576305f5e1008381612b1a57612b19613bd0565b5b0492506008810190505b6127108310612b49576127108381612b3f57612b3e613bd0565b5b0492506004810190505b60648310612b6c5760648381612b6257612b61613bd0565b5b0492506002810190505b600a8310612b7b576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612c3c57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612bfd5750612bfc8484611c53565b5b80612c3b57508273ffffffffffffffffffffffffffffffffffffffff16612c2383611e85565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b828054828255906000526020600020908101928215612c81579160200282015b82811115612c80578251825591602001919060010190612c65565b5b509050612c8e9190612cdb565b5090565b60405180606001604052806000815260200160608152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b5b80821115612cf4576000816000905550600101612cdc565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d4181612d0c565b8114612d4c57600080fd5b50565b600081359050612d5e81612d38565b92915050565b600060208284031215612d7a57612d79612d02565b5b6000612d8884828501612d4f565b91505092915050565b60008115159050919050565b612da681612d91565b82525050565b6000602082019050612dc16000830184612d9d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e01578082015181840152602081019050612de6565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e2982612dc7565b612e338185612dd2565b9350612e43818560208601612de3565b612e4c81612e0d565b840191505092915050565b60006020820190508181036000830152612e718184612e1e565b905092915050565b6000819050919050565b612e8c81612e79565b8114612e9757600080fd5b50565b600081359050612ea981612e83565b92915050565b600060208284031215612ec557612ec4612d02565b5b6000612ed384828501612e9a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f0782612edc565b9050919050565b612f1781612efc565b82525050565b6000602082019050612f326000830184612f0e565b92915050565b612f4181612efc565b8114612f4c57600080fd5b50565b600081359050612f5e81612f38565b92915050565b60008060408385031215612f7b57612f7a612d02565b5b6000612f8985828601612f4f565b9250506020612f9a85828601612e9a565b9150509250929050565b600060208284031215612fba57612fb9612d02565b5b6000612fc884828501612f4f565b91505092915050565b600080600060608486031215612fea57612fe9612d02565b5b6000612ff886828701612f4f565b935050602061300986828701612f4f565b925050604061301a86828701612e9a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61305981612e79565b82525050565b600082825260208201905092915050565b600061307b82612dc7565b613085818561305f565b9350613095818560208601612de3565b61309e81612e0d565b840191505092915050565b60006060830160008301516130c16000860182613050565b50602083015184820360208601526130d98282613070565b91505060408301516130ee6040860182613050565b508091505092915050565b600061310583836130a9565b905092915050565b6000602082019050919050565b600061312582613024565b61312f818561302f565b93508360208202850161314185613040565b8060005b8581101561317d578484038952815161315e85826130f9565b94506131698361310d565b925060208a01995050600181019050613145565b50829750879550505050505092915050565b600060208201905081810360008301526131a9818461311a565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131f382612e0d565b810181811067ffffffffffffffff82111715613212576132116131bb565b5b80604052505050565b6000613225612cf8565b905061323182826131ea565b919050565b600067ffffffffffffffff821115613251576132506131bb565b5b61325a82612e0d565b9050602081019050919050565b82818337600083830152505050565b600061328961328484613236565b61321b565b9050828152602081018484840111156132a5576132a46131b6565b5b6132b0848285613267565b509392505050565b600082601f8301126132cd576132cc6131b1565b5b81356132dd848260208601613276565b91505092915050565b600080604083850312156132fd576132fc612d02565b5b600083013567ffffffffffffffff81111561331b5761331a612d07565b5b613327858286016132b8565b925050602061333885828601612e9a565b9150509250929050565b61334b81612e79565b82525050565b60006020820190506133666000830184613342565b92915050565b61337581612d91565b811461338057600080fd5b50565b6000813590506133928161336c565b92915050565b600080604083850312156133af576133ae612d02565b5b60006133bd85828601612f4f565b92505060206133ce85828601613383565b9150509250929050565b600067ffffffffffffffff8211156133f3576133f26131bb565b5b6133fc82612e0d565b9050602081019050919050565b600061341c613417846133d8565b61321b565b905082815260208101848484011115613438576134376131b6565b5b613443848285613267565b509392505050565b600082601f8301126134605761345f6131b1565b5b8135613470848260208601613409565b91505092915050565b6000806000806080858703121561349357613492612d02565b5b60006134a187828801612f4f565b94505060206134b287828801612f4f565b93505060406134c387828801612e9a565b925050606085013567ffffffffffffffff8111156134e4576134e3612d07565b5b6134f08782880161344b565b91505092959194509250565b60006060820190506135116000830186613342565b81810360208301526135238185612e1e565b90506135326040830184613342565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006135728383613050565b60208301905092915050565b6000602082019050919050565b60006135968261353a565b6135a08185613545565b93506135ab83613556565b8060005b838110156135dc5781516135c38882613566565b97506135ce8361357e565b9250506001810190506135af565b5085935050505092915050565b60006080830160008301516136016000860182613050565b5060208301516136146020860182613050565b5060408301516136276040860182613050565b506060830151848203606086015261363f828261358b565b9150508091505092915050565b6000602082019050818103600083015261366681846135e9565b905092915050565b60006060820190506136836000830186613342565b6136906020830185613342565b61369d6040830184613342565b949350505050565b600080604083850312156136bc576136bb612d02565b5b60006136ca85828601612f4f565b92505060206136db85828601612f4f565b9150509250929050565b6000819050919050565b600061370a61370561370084612edc565b6136e5565b612edc565b9050919050565b600061371c826136ef565b9050919050565b600061372e82613711565b9050919050565b61373e81613723565b82525050565b60006020820190506137596000830184613735565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137a657607f821691505b6020821081036137b9576137b861375f565b5b50919050565b60006040820190506137d46000830185612f0e565b6137e16020830184613342565b9392505050565b6000815190506137f78161336c565b92915050565b60006020828403121561381357613812612d02565b5b6000613821848285016137e8565b91505092915050565b7f41697264726f70206661696c6564000000000000000000000000000000000000600082015250565b6000613860600e83612dd2565b915061386b8261382a565b602082019050919050565b6000602082019050818103600083015261388f81613853565b9050919050565b60006060820190506138ab6000830186612f0e565b6138b86020830185613342565b6138c56040830184612f0e565b949350505050565b7f4e6f207265776172647320746f20636c61696d00000000000000000000000000600082015250565b6000613903601383612dd2565b915061390e826138cd565b602082019050919050565b60006020820190508181036000830152613932816138f6565b9050919050565b7f526577617264207472616e73666572206661696c656400000000000000000000600082015250565b600061396f601683612dd2565b915061397a82613939565b602082019050919050565b6000602082019050818103600083015261399e81613962565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a0e82612e79565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a4057613a3f6139d4565b5b600182019050919050565b600081519050613a5a81612e83565b92915050565b600060208284031215613a7657613a75612d02565b5b6000613a8484828501613a4b565b91505092915050565b7f496e73756666696369656e7420746f6b656e7320746f20706c61790000000000600082015250565b6000613ac3601b83612dd2565b9150613ace82613a8d565b602082019050919050565b60006020820190508181036000830152613af281613ab6565b9050919050565b6000606082019050613b0e6000830186612f0e565b613b1b6020830185612f0e565b613b286040830184613342565b949350505050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000613b66601583612dd2565b9150613b7182613b30565b602082019050919050565b60006020820190508181036000830152613b9581613b59565b9050919050565b6000613ba782612e79565b9150613bb283612e79565b9250828201905080821115613bca57613bc96139d4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c0a82612e79565b9150613c1583612e79565b925082613c2557613c24613bd0565b5b828204905092915050565b6000613c3b82612e79565b9150613c4683612e79565b9250828203905081811115613c5e57613c5d6139d4565b5b92915050565b6000604082019050613c796000830185613342565b613c866020830184613342565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613cef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613cb2565b613cf98683613cb2565b95508019841693508086168417925050509392505050565b6000613d2c613d27613d2284612e79565b6136e5565b612e79565b9050919050565b6000819050919050565b613d4683613d11565b613d5a613d5282613d33565b848454613cbf565b825550505050565b600090565b613d6f613d62565b613d7a818484613d3d565b505050565b5b81811015613d9e57613d93600082613d67565b600181019050613d80565b5050565b601f821115613de357613db481613c8d565b613dbd84613ca2565b81016020851015613dcc578190505b613de0613dd885613ca2565b830182613d7f565b50505b505050565b600082821c905092915050565b6000613e0660001984600802613de8565b1980831691505092915050565b6000613e1f8383613df5565b9150826002028217905092915050565b613e3882612dc7565b67ffffffffffffffff811115613e5157613e506131bb565b5b613e5b825461378e565b613e66828285613da2565b600060209050601f831160018114613e995760008415613e87578287015190505b613e918582613e13565b865550613ef9565b601f198416613ea786613c8d565b60005b82811015613ecf57848901518255600182019150602085019450602081019050613eaa565b86831015613eec5784890151613ee8601f891682613df5565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152613f1b8185612e1e565b9050613f2a6020830184613342565b9392505050565b600081905092915050565b6000613f4782612dc7565b613f518185613f31565b9350613f61818560208601612de3565b80840191505092915050565b6000613f798285613f3c565b9150613f858284613f3c565b91508190509392505050565b7f506c61796572206e6f7420696e697469616c697a656400000000000000000000600082015250565b6000613fc7601683612dd2565b9150613fd282613f91565b602082019050919050565b60006020820190508181036000830152613ff681613fba565b9050919050565b7f496e73756666696369656e7420746f6b656e7320746f2070757263686173652060008201527f6974656d00000000000000000000000000000000000000000000000000000000602082015250565b6000614059602483612dd2565b915061406482613ffd565b604082019050919050565b600060208201905081810360008301526140888161404c565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006140b68261408f565b6140c0818561409a565b93506140d0818560208601612de3565b6140d981612e0d565b840191505092915050565b60006080820190506140f96000830187612f0e565b6141066020830186612f0e565b6141136040830185613342565b818103606083015261412581846140ab565b905095945050505050565b60008151905061413f81612d38565b92915050565b60006020828403121561415b5761415a612d02565b5b600061416984828501614130565b9150509291505056fea264697066735822122009cc9a057aaed3ab9f60a7447aa166fb02f0726f249efe39092d8f09b23fce5464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x48BF CODESIZE SUB DUP1 PUSH3 0x48BF DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x326 JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x41726361646547616D65546F6B656E0000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4147540000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0xB5 SWAP2 SWAP1 PUSH3 0x5F2 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xC7 SWAP2 SWAP1 PUSH3 0x5F2 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x13F JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x136 SWAP2 SWAP1 PUSH3 0x6EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x150 DUP2 PUSH3 0x1BB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP3 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH9 0x56BC75E2D63100000 PUSH1 0xA DUP2 SWAP1 SSTORE POP PUSH2 0x3E8 PUSH1 0xB DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xC DUP2 SWAP1 SSTORE POP POP POP POP PUSH3 0x707 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2B3 DUP3 PUSH3 0x286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2C5 DUP2 PUSH3 0x2A6 JUMP JUMPDEST DUP2 EQ PUSH3 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2E5 DUP2 PUSH3 0x2BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x300 DUP2 PUSH3 0x2EB JUMP JUMPDEST DUP2 EQ PUSH3 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x320 DUP2 PUSH3 0x2F5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x342 JUMPI PUSH3 0x341 PUSH3 0x281 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x352 DUP7 DUP3 DUP8 ADD PUSH3 0x2D4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0x365 DUP7 DUP3 DUP8 ADD PUSH3 0x2D4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x378 DUP7 DUP3 DUP8 ADD PUSH3 0x30F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x404 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x41A JUMPI PUSH3 0x419 PUSH3 0x3BC JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x484 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x445 JUMP JUMPDEST PUSH3 0x490 DUP7 DUP4 PUSH3 0x445 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4D3 PUSH3 0x4CD PUSH3 0x4C7 DUP5 PUSH3 0x2EB JUMP JUMPDEST PUSH3 0x4A8 JUMP JUMPDEST PUSH3 0x2EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x4EF DUP4 PUSH3 0x4B2 JUMP JUMPDEST PUSH3 0x507 PUSH3 0x4FE DUP3 PUSH3 0x4DA JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x452 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x51E PUSH3 0x50F JUMP JUMPDEST PUSH3 0x52B DUP2 DUP5 DUP5 PUSH3 0x4E4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x553 JUMPI PUSH3 0x547 PUSH1 0x0 DUP3 PUSH3 0x514 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x531 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x5A2 JUMPI PUSH3 0x56C DUP2 PUSH3 0x420 JUMP JUMPDEST PUSH3 0x577 DUP5 PUSH3 0x435 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x587 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x59F PUSH3 0x596 DUP6 PUSH3 0x435 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x530 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5C7 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x5A7 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5E2 DUP4 DUP4 PUSH3 0x5B4 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x5FD DUP3 PUSH3 0x382 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x619 JUMPI PUSH3 0x618 PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x625 DUP3 SLOAD PUSH3 0x3EB JUMP JUMPDEST PUSH3 0x632 DUP3 DUP3 DUP6 PUSH3 0x557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x66A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x655 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x661 DUP6 DUP3 PUSH3 0x5D4 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x6D1 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x67A DUP7 PUSH3 0x420 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x6A4 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x67D JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x6C4 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x6C0 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x5B4 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x6E4 DUP2 PUSH3 0x2A6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x701 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x6D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x41A8 DUP1 PUSH3 0x717 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x206 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F17B79D GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xE2EB41FF GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE2EB41FF EQ PUSH2 0x5AF JUMPI DUP1 PUSH4 0xE7804338 EQ PUSH2 0x5E1 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x5FF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x62F JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x64B JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0xC8DD6CE7 EQ PUSH2 0x545 JUMPI DUP1 PUSH4 0xCAB896DC EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0xD38EA5BF EQ PUSH2 0x593 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0xAFFC55C0 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xAFFC55C0 EQ PUSH2 0x479 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0xBBD94C2F EQ PUSH2 0x4B3 JUMPI DUP1 PUSH4 0xBFB231D2 EQ PUSH2 0x4E3 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x7F17B79D EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x45D JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x372500AB GT PUSH2 0x19D JUMPI DUP1 PUSH4 0x62D6BBDF GT PUSH2 0x16C JUMPI DUP1 PUSH4 0x62D6BBDF EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x70CA3B16 EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3FB JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x372500AB EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x410D59CC EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x5873533D EQ PUSH2 0x347 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x139652E4 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x14F710FE EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2E7 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x931A4D1 EQ PUSH2 0x289 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x2D64 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x74B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x250 SWAP2 SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x273 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x280 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x7F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x2F64 JUMP JUMPDEST PUSH2 0x80B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D6 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x821 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E5 PUSH2 0xAD7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x301 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FC SWAP2 SWAP1 PUSH2 0x2FD1 JUMP JUMPDEST PUSH2 0xB4E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30B PUSH2 0xC50 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x315 PUSH2 0xE1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x322 SWAP2 SWAP1 PUSH2 0x318F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x345 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x340 SWAP2 SWAP1 PUSH2 0x2FD1 JUMP JUMPDEST PUSH2 0xF8B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x35C SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0xFAB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x378 SWAP2 SWAP1 PUSH2 0x32E6 JUMP JUMPDEST PUSH2 0x12EB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x394 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x13A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C4 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x1471 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x403 PUSH2 0x1483 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x1497 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x429 PUSH2 0x14A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH2 0x14D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x477 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0x3398 JUMP JUMPDEST PUSH2 0x1565 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x481 PUSH2 0x157B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4AC SWAP2 SWAP1 PUSH2 0x3479 JUMP JUMPDEST PUSH2 0x1581 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x159E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F8 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x34FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x52F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x52A SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x1683 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x53C SWAP2 SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x55F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x55A SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x16EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x56C SWAP2 SWAP1 PUSH2 0x364C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x57D PUSH2 0x18DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58A SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5AD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A8 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x18E3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5C4 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x1C23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x366E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5E9 PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5F6 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x619 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x614 SWAP2 SWAP1 PUSH2 0x36A5 JUMP JUMPDEST PUSH2 0x1C53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x626 SWAP2 SWAP1 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x649 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x644 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x1CE7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x653 PUSH2 0x1D6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x660 SWAP2 SWAP1 PUSH2 0x3744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x734 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x744 JUMPI POP PUSH2 0x743 DUP3 PUSH2 0x1D93 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x75A SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x786 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E8 DUP3 PUSH2 0x1DFD JUMP JUMPDEST POP PUSH2 0x7F2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x801 PUSH2 0x1EC2 JUMP JUMPDEST DUP1 PUSH1 0xB DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x81D DUP3 DUP3 PUSH2 0x818 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0x1F51 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD EQ DUP1 ISZERO PUSH2 0x8B5 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x903 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0xAD4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x943 JUMPI PUSH2 0x942 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x971 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP DUP2 MSTORE POP PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x9EE SWAP3 SWAP2 SWAP1 PUSH2 0x2C45 JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP3 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA51 SWAP3 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA94 SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0xAD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACA SWAP1 PUSH2 0x3876 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE3 PUSH1 0x9 PUSH2 0x1F63 JUMP JUMPDEST SWAP1 POP PUSH2 0xAEF PUSH1 0x9 PUSH2 0x1F71 JUMP JUMPDEST PUSH2 0xAF9 CALLER DUP3 PUSH2 0x1F87 JUMP JUMPDEST CALLER PUSH1 0xF PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBC0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB7 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBD4 DUP4 DUP4 PUSH2 0xBCF PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0x2080 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC4A JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC41 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3896 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xCDF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD6 SWAP1 PUSH2 0x3919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD46 SWAP3 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD89 SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0xDC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDBF SWAP1 PUSH2 0x3985 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFC30CDDEA38E2BF4D6EA7D3F9ED3B6AD7F176419F4963BD81318067A4AEE73FE DUP3 PUSH1 0x40 MLOAD PUSH2 0xE0E SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE28 PUSH1 0x8 PUSH2 0x1F63 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE46 JUMPI PUSH2 0xE45 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE7F JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xE6C PUSH2 0x2C92 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xE64 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF82 JUMPI PUSH1 0xE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xEC5 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xEF1 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF3E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF13 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF3E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF21 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF64 JUMPI PUSH2 0xF63 PUSH2 0x39A5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xF7A SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE85 JUMP JUMPDEST POP DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xFA6 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1581 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1009 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1026 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104A SWAP2 SWAP1 PUSH2 0x3A60 JUMP JUMPDEST LT ISZERO PUSH2 0x108B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1082 SWAP1 PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS PUSH1 0xA SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10EC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AF9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x110B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x112F SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0x116E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1165 SWAP1 PUSH2 0x3B7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1177 CALLER PUSH2 0x821 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11CE SWAP2 SWAP1 PUSH2 0x3B9C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xA DUP3 PUSH2 0x11E2 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11F5 SWAP2 SWAP1 PUSH2 0x3B9C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xB SLOAD DUP2 PUSH1 0x0 ADD SLOAD LT PUSH2 0x1293 JUMPI DUP1 PUSH1 0x2 ADD PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x121E SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0xB SLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1239 SWAP2 SWAP1 PUSH2 0x3C30 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x91E51C29E7E87A74AD3B8CCBA98538970F50A4309242735467F41E27C6B0FBAC DUP3 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x128A SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x24B31E1DBF1732A12BB700D3D77E5FB96FF3B693374D9FA15CCBC03F42715076 DUP4 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x12DF SWAP3 SWAP2 SWAP1 PUSH2 0x3C64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x12F3 PUSH2 0x1EC2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FF PUSH1 0x8 PUSH2 0x1F63 JUMP JUMPDEST SWAP1 POP PUSH2 0x130B PUSH1 0x8 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP PUSH1 0xE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x1358 SWAP2 SWAP1 PUSH2 0x3E2F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP DUP1 PUSH32 0x444434676A57F70F8479401C50FB4ADD3E31052F88F4B35E155B7759E5968E5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1398 SWAP3 SWAP2 SWAP1 PUSH2 0x3F01 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B0 DUP3 PUSH2 0x1DFD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x142A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1421 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1479 PUSH2 0x1EC2 JUMP JUMPDEST DUP1 PUSH1 0xC DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x148B PUSH2 0x1EC2 JUMP JUMPDEST PUSH2 0x1495 PUSH1 0x0 PUSH2 0x229A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x149F PUSH2 0x1EC2 JUMP JUMPDEST DUP1 PUSH1 0xA DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x14E2 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x150E SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x155B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1530 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x155B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x153E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1577 PUSH2 0x1570 PUSH2 0x1F49 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x2360 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x158C DUP5 DUP5 DUP5 PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x1598 DUP5 DUP5 DUP5 DUP5 PUSH2 0x24CF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x15FA SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1626 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1673 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1648 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1673 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1656 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x168E DUP3 PUSH2 0x1DFD JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1699 PUSH2 0x2686 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x16B9 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x16E4 JUMP JUMPDEST DUP1 PUSH2 0x16C3 DUP5 PUSH2 0x269D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x16D4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16F4 PUSH2 0x2CB3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD EQ ISZERO DUP1 PUSH2 0x1789 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO JUMPDEST DUP1 PUSH2 0x17D7 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ ISZERO JUMPDEST PUSH2 0x1816 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x180D SWAP1 PUSH2 0x3FDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x18CD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x18B9 JUMPI JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x191D SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1949 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1996 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x196B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1996 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1979 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A0B SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A28 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A4C SWAP2 SWAP1 PUSH2 0x3A60 JUMP JUMPDEST LT ISZERO PUSH2 0x1A8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A84 SWAP1 PUSH2 0x406F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AF0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AF9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B33 SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0x1B72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B69 SWAP1 PUSH2 0x3B7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x792FE07C0F3CE4EF42DF79C4A2B07925168CDDBAABF7A7EF1351F027A3760313 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CEF PUSH2 0x1EC2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D61 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D58 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D6A DUP2 PUSH2 0x229A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E09 DUP4 PUSH2 0x276B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E7C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E73 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ECA PUSH2 0x1F49 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EE8 PUSH2 0x14A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F47 JUMPI PUSH2 0x1F0B PUSH2 0x1F49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3E SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F5E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x27A8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1FF9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FF0 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2007 DUP4 DUP4 PUSH1 0x0 PUSH2 0x2080 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x207B JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2072 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x208C DUP5 PUSH2 0x276B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x20CE JUMPI PUSH2 0x20CD DUP2 DUP5 DUP7 PUSH2 0x296D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x215F JUMPI PUSH2 0x2110 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x27A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21E2 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x23D1 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23C8 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x24C2 SWAP2 SWAP1 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2680 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2513 PUSH2 0x1F49 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2535 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40E4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2571 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x256E SWAP2 SWAP1 PUSH2 0x4145 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25F5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x25A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x25ED JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25E4 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x267E JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2675 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x26AC DUP5 PUSH2 0x2A31 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26CB JUMPI PUSH2 0x26CA PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x26FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2760 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2754 JUMPI PUSH2 0x2753 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x270B JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x27E1 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2915 JUMPI PUSH1 0x0 PUSH2 0x27F1 DUP5 PUSH2 0x1DFD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x285C JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x286F JUMPI POP PUSH2 0x286D DUP2 DUP5 PUSH2 0x1C53 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x28B1 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28A8 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x2913 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2978 DUP4 DUP4 DUP4 PUSH2 0x2B84 JUMP JUMPDEST PUSH2 0x2A2C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x29ED JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29E4 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A23 SWAP3 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2A8F JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2A85 JUMPI PUSH2 0x2A84 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2ACC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2AC2 JUMPI PUSH2 0x2AC1 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2AFB JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2AF1 JUMPI PUSH2 0x2AF0 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2B24 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2B1A JUMPI PUSH2 0x2B19 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2B49 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2B3F JUMPI PUSH2 0x2B3E PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2B6C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2B62 JUMPI PUSH2 0x2B61 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2B7B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2C3C JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2BFD JUMPI POP PUSH2 0x2BFC DUP5 DUP5 PUSH2 0x1C53 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2C3B JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C23 DUP4 PUSH2 0x1E85 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2C81 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2C80 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x2C8E SWAP2 SWAP1 PUSH2 0x2CDB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2CF4 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x2CDC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D41 DUP2 PUSH2 0x2D0C JUMP JUMPDEST DUP2 EQ PUSH2 0x2D4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2D5E DUP2 PUSH2 0x2D38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D7A JUMPI PUSH2 0x2D79 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D88 DUP5 DUP3 DUP6 ADD PUSH2 0x2D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DA6 DUP2 PUSH2 0x2D91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DC1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D9D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E01 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2DE6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E29 DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH2 0x2E33 DUP2 DUP6 PUSH2 0x2DD2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E43 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST PUSH2 0x2E4C DUP2 PUSH2 0x2E0D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E71 DUP2 DUP5 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E8C DUP2 PUSH2 0x2E79 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2EA9 DUP2 PUSH2 0x2E83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EC5 JUMPI PUSH2 0x2EC4 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2ED3 DUP5 DUP3 DUP6 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F07 DUP3 PUSH2 0x2EDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F17 DUP2 PUSH2 0x2EFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F32 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F0E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F41 DUP2 PUSH2 0x2EFC JUMP JUMPDEST DUP2 EQ PUSH2 0x2F4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F5E DUP2 PUSH2 0x2F38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F7B JUMPI PUSH2 0x2F7A PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F89 DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F9A DUP6 DUP3 DUP7 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FBA JUMPI PUSH2 0x2FB9 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FC8 DUP5 DUP3 DUP6 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FEA JUMPI PUSH2 0x2FE9 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FF8 DUP7 DUP3 DUP8 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3009 DUP7 DUP3 DUP8 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x301A DUP7 DUP3 DUP8 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3059 DUP2 PUSH2 0x2E79 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x307B DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH2 0x3085 DUP2 DUP6 PUSH2 0x305F JUMP JUMPDEST SWAP4 POP PUSH2 0x3095 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST PUSH2 0x309E DUP2 PUSH2 0x2E0D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x30C1 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x30D9 DUP3 DUP3 PUSH2 0x3070 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x30EE PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3105 DUP4 DUP4 PUSH2 0x30A9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3125 DUP3 PUSH2 0x3024 JUMP JUMPDEST PUSH2 0x312F DUP2 DUP6 PUSH2 0x302F JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x3141 DUP6 PUSH2 0x3040 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x317D JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x315E DUP6 DUP3 PUSH2 0x30F9 JUMP JUMPDEST SWAP5 POP PUSH2 0x3169 DUP4 PUSH2 0x310D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3145 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31A9 DUP2 DUP5 PUSH2 0x311A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x31F3 DUP3 PUSH2 0x2E0D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3212 JUMPI PUSH2 0x3211 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3225 PUSH2 0x2CF8 JUMP JUMPDEST SWAP1 POP PUSH2 0x3231 DUP3 DUP3 PUSH2 0x31EA JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3251 JUMPI PUSH2 0x3250 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x325A DUP3 PUSH2 0x2E0D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3289 PUSH2 0x3284 DUP5 PUSH2 0x3236 JUMP JUMPDEST PUSH2 0x321B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x32A5 JUMPI PUSH2 0x32A4 PUSH2 0x31B6 JUMP JUMPDEST JUMPDEST PUSH2 0x32B0 DUP5 DUP3 DUP6 PUSH2 0x3267 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x32CD JUMPI PUSH2 0x32CC PUSH2 0x31B1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x32DD DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3276 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32FD JUMPI PUSH2 0x32FC PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x331B JUMPI PUSH2 0x331A PUSH2 0x2D07 JUMP JUMPDEST JUMPDEST PUSH2 0x3327 DUP6 DUP3 DUP7 ADD PUSH2 0x32B8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3338 DUP6 DUP3 DUP7 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x334B DUP2 PUSH2 0x2E79 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3366 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3375 DUP2 PUSH2 0x2D91 JUMP JUMPDEST DUP2 EQ PUSH2 0x3380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3392 DUP2 PUSH2 0x336C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33AF JUMPI PUSH2 0x33AE PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33BD DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x33CE DUP6 DUP3 DUP7 ADD PUSH2 0x3383 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x33F3 JUMPI PUSH2 0x33F2 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x33FC DUP3 PUSH2 0x2E0D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x341C PUSH2 0x3417 DUP5 PUSH2 0x33D8 JUMP JUMPDEST PUSH2 0x321B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3438 JUMPI PUSH2 0x3437 PUSH2 0x31B6 JUMP JUMPDEST JUMPDEST PUSH2 0x3443 DUP5 DUP3 DUP6 PUSH2 0x3267 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3460 JUMPI PUSH2 0x345F PUSH2 0x31B1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3470 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3409 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3493 JUMPI PUSH2 0x3492 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34A1 DUP8 DUP3 DUP9 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x34B2 DUP8 DUP3 DUP9 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x34C3 DUP8 DUP3 DUP9 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34E4 JUMPI PUSH2 0x34E3 PUSH2 0x2D07 JUMP JUMPDEST JUMPDEST PUSH2 0x34F0 DUP8 DUP3 DUP9 ADD PUSH2 0x344B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3511 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3342 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3523 DUP2 DUP6 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP PUSH2 0x3532 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3572 DUP4 DUP4 PUSH2 0x3050 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3596 DUP3 PUSH2 0x353A JUMP JUMPDEST PUSH2 0x35A0 DUP2 DUP6 PUSH2 0x3545 JUMP JUMPDEST SWAP4 POP PUSH2 0x35AB DUP4 PUSH2 0x3556 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35DC JUMPI DUP2 MLOAD PUSH2 0x35C3 DUP9 DUP3 PUSH2 0x3566 JUMP JUMPDEST SWAP8 POP PUSH2 0x35CE DUP4 PUSH2 0x357E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x35AF JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x3601 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3614 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x3627 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x363F DUP3 DUP3 PUSH2 0x358B JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3666 DUP2 DUP5 PUSH2 0x35E9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3683 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x3690 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x369D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36BC JUMPI PUSH2 0x36BB PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36CA DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x36DB DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370A PUSH2 0x3705 PUSH2 0x3700 DUP5 PUSH2 0x2EDC JUMP JUMPDEST PUSH2 0x36E5 JUMP JUMPDEST PUSH2 0x2EDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x371C DUP3 PUSH2 0x36EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x372E DUP3 PUSH2 0x3711 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x373E DUP2 PUSH2 0x3723 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3759 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3735 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x37A6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x37B9 JUMPI PUSH2 0x37B8 PUSH2 0x375F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x37D4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x37E1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x37F7 DUP2 PUSH2 0x336C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3813 JUMPI PUSH2 0x3812 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3821 DUP5 DUP3 DUP6 ADD PUSH2 0x37E8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x41697264726F70206661696C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3860 PUSH1 0xE DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x386B DUP3 PUSH2 0x382A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x388F DUP2 PUSH2 0x3853 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x38AB PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x38B8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x38C5 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F0E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E6F207265776172647320746F20636C61696D00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3903 PUSH1 0x13 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x390E DUP3 PUSH2 0x38CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3932 DUP2 PUSH2 0x38F6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526577617264207472616E73666572206661696C656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x396F PUSH1 0x16 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x397A DUP3 PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x399E DUP2 PUSH2 0x3962 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A0E DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3A40 JUMPI PUSH2 0x3A3F PUSH2 0x39D4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3A5A DUP2 PUSH2 0x2E83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A76 JUMPI PUSH2 0x3A75 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A84 DUP5 DUP3 DUP6 ADD PUSH2 0x3A4B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420746F6B656E7320746F20706C61790000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AC3 PUSH1 0x1B DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3ACE DUP3 PUSH2 0x3A8D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AF2 DUP2 PUSH2 0x3AB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3B0E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x3B1B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x3B28 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x546F6B656E207472616E73666572206661696C65640000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B66 PUSH1 0x15 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B71 DUP3 PUSH2 0x3B30 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B95 DUP2 PUSH2 0x3B59 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BA7 DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BB2 DUP4 PUSH2 0x2E79 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BCA JUMPI PUSH2 0x3BC9 PUSH2 0x39D4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3C0A DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C15 DUP4 PUSH2 0x2E79 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3C25 JUMPI PUSH2 0x3C24 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C3B DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C46 DUP4 PUSH2 0x2E79 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3C5E JUMPI PUSH2 0x3C5D PUSH2 0x39D4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3C79 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x3C86 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3CEF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3CB2 JUMP JUMPDEST PUSH2 0x3CF9 DUP7 DUP4 PUSH2 0x3CB2 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D2C PUSH2 0x3D27 PUSH2 0x3D22 DUP5 PUSH2 0x2E79 JUMP JUMPDEST PUSH2 0x36E5 JUMP JUMPDEST PUSH2 0x2E79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D46 DUP4 PUSH2 0x3D11 JUMP JUMPDEST PUSH2 0x3D5A PUSH2 0x3D52 DUP3 PUSH2 0x3D33 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3CBF JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3D6F PUSH2 0x3D62 JUMP JUMPDEST PUSH2 0x3D7A DUP2 DUP5 DUP5 PUSH2 0x3D3D JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D9E JUMPI PUSH2 0x3D93 PUSH1 0x0 DUP3 PUSH2 0x3D67 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3D80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3DE3 JUMPI PUSH2 0x3DB4 DUP2 PUSH2 0x3C8D JUMP JUMPDEST PUSH2 0x3DBD DUP5 PUSH2 0x3CA2 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3DCC JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3DE0 PUSH2 0x3DD8 DUP6 PUSH2 0x3CA2 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3D7F JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E06 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3DE8 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E1F DUP4 DUP4 PUSH2 0x3DF5 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E38 DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E51 JUMPI PUSH2 0x3E50 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x3E5B DUP3 SLOAD PUSH2 0x378E JUMP JUMPDEST PUSH2 0x3E66 DUP3 DUP3 DUP6 PUSH2 0x3DA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3E99 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3E87 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3E91 DUP6 DUP3 PUSH2 0x3E13 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3EF9 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3EA7 DUP7 PUSH2 0x3C8D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3ECF JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3EAA JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3EEC JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3EE8 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3DF5 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F1B DUP2 DUP6 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP PUSH2 0x3F2A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F47 DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH2 0x3F51 DUP2 DUP6 PUSH2 0x3F31 JUMP JUMPDEST SWAP4 POP PUSH2 0x3F61 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F79 DUP3 DUP6 PUSH2 0x3F3C JUMP JUMPDEST SWAP2 POP PUSH2 0x3F85 DUP3 DUP5 PUSH2 0x3F3C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x506C61796572206E6F7420696E697469616C697A656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC7 PUSH1 0x16 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FD2 DUP3 PUSH2 0x3F91 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FF6 DUP2 PUSH2 0x3FBA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420746F6B656E7320746F20707572636861736520 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6974656D00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4059 PUSH1 0x24 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x4064 DUP3 PUSH2 0x3FFD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4088 DUP2 PUSH2 0x404C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40B6 DUP3 PUSH2 0x408F JUMP JUMPDEST PUSH2 0x40C0 DUP2 DUP6 PUSH2 0x409A JUMP JUMPDEST SWAP4 POP PUSH2 0x40D0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST PUSH2 0x40D9 DUP2 PUSH2 0x2E0D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x40F9 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x4106 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x4113 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4125 DUP2 DUP5 PUSH2 0x40AB JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x413F DUP2 PUSH2 0x2D38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x415B JUMPI PUSH2 0x415A PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4169 DUP5 DUP3 DUP6 ADD PUSH2 0x4130 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD 0xCC SWAP11 SDIV PUSH27 0xAED3AB9F60A7447AA166FB02F0726F249EFE39092D8F09B23FCE54 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"259:4854:13:-:0;;;1301:406;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1436:13;1381:113:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1455:5;1447;:13;;;;;;:::i;:::-;;1480:7;1470;:17;;;;;;:::i;:::-;;1381:113;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1477:6:13::2;1462:5;;:22;;;;;;;;;;;;;;;;;;1506:12;1495:8;:23;;;;1570:4;1555:12;:19;;;;1636:21;1613:20;:44;;;;1301:406:::0;;;259:4854;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;88:117:15:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:663::-;1293:6;1301;1309;1358:2;1346:9;1337:7;1333:23;1329:32;1326:119;;;1364:79;;:::i;:::-;1326:119;1484:1;1509:64;1565:7;1556:6;1545:9;1541:22;1509:64;:::i;:::-;1499:74;;1455:128;1622:2;1648:64;1704:7;1695:6;1684:9;1680:22;1648:64;:::i;:::-;1638:74;;1593:129;1761:2;1787:64;1843:7;1834:6;1823:9;1819:22;1787:64;:::i;:::-;1777:74;;1732:129;1205:663;;;;;:::o;1874:99::-;1926:6;1960:5;1954:12;1944:22;;1874:99;;;:::o;1979:180::-;2027:77;2024:1;2017:88;2124:4;2121:1;2114:15;2148:4;2145:1;2138:15;2165:180;2213:77;2210:1;2203:88;2310:4;2307:1;2300:15;2334:4;2331:1;2324:15;2351:320;2395:6;2432:1;2426:4;2422:12;2412:22;;2479:1;2473:4;2469:12;2500:18;2490:81;;2556:4;2548:6;2544:17;2534:27;;2490:81;2618:2;2610:6;2607:14;2587:18;2584:38;2581:84;;2637:18;;:::i;:::-;2581:84;2402:269;2351:320;;;:::o;2677:141::-;2726:4;2749:3;2741:11;;2772:3;2769:1;2762:14;2806:4;2803:1;2793:18;2785:26;;2677:141;;;:::o;2824:93::-;2861:6;2908:2;2903;2896:5;2892:14;2888:23;2878:33;;2824:93;;;:::o;2923:107::-;2967:8;3017:5;3011:4;3007:16;2986:37;;2923:107;;;;:::o;3036:393::-;3105:6;3155:1;3143:10;3139:18;3178:97;3208:66;3197:9;3178:97;:::i;:::-;3296:39;3326:8;3315:9;3296:39;:::i;:::-;3284:51;;3368:4;3364:9;3357:5;3353:21;3344:30;;3417:4;3407:8;3403:19;3396:5;3393:30;3383:40;;3112:317;;3036:393;;;;;:::o;3435:60::-;3463:3;3484:5;3477:12;;3435:60;;;:::o;3501:142::-;3551:9;3584:53;3602:34;3611:24;3629:5;3611:24;:::i;:::-;3602:34;:::i;:::-;3584:53;:::i;:::-;3571:66;;3501:142;;;:::o;3649:75::-;3692:3;3713:5;3706:12;;3649:75;;;:::o;3730:269::-;3840:39;3871:7;3840:39;:::i;:::-;3901:91;3950:41;3974:16;3950:41;:::i;:::-;3942:6;3935:4;3929:11;3901:91;:::i;:::-;3895:4;3888:105;3806:193;3730:269;;;:::o;4005:73::-;4050:3;4005:73;:::o;4084:189::-;4161:32;;:::i;:::-;4202:65;4260:6;4252;4246:4;4202:65;:::i;:::-;4137:136;4084:189;;:::o;4279:186::-;4339:120;4356:3;4349:5;4346:14;4339:120;;;4410:39;4447:1;4440:5;4410:39;:::i;:::-;4383:1;4376:5;4372:13;4363:22;;4339:120;;;4279:186;;:::o;4471:543::-;4572:2;4567:3;4564:11;4561:446;;;4606:38;4638:5;4606:38;:::i;:::-;4690:29;4708:10;4690:29;:::i;:::-;4680:8;4676:44;4873:2;4861:10;4858:18;4855:49;;;4894:8;4879:23;;4855:49;4917:80;4973:22;4991:3;4973:22;:::i;:::-;4963:8;4959:37;4946:11;4917:80;:::i;:::-;4576:431;;4561:446;4471:543;;;:::o;5020:117::-;5074:8;5124:5;5118:4;5114:16;5093:37;;5020:117;;;;:::o;5143:169::-;5187:6;5220:51;5268:1;5264:6;5256:5;5253:1;5249:13;5220:51;:::i;:::-;5216:56;5301:4;5295;5291:15;5281:25;;5194:118;5143:169;;;;:::o;5317:295::-;5393:4;5539:29;5564:3;5558:4;5539:29;:::i;:::-;5531:37;;5601:3;5598:1;5594:11;5588:4;5585:21;5577:29;;5317:295;;;;:::o;5617:1395::-;5734:37;5767:3;5734:37;:::i;:::-;5836:18;5828:6;5825:30;5822:56;;;5858:18;;:::i;:::-;5822:56;5902:38;5934:4;5928:11;5902:38;:::i;:::-;5987:67;6047:6;6039;6033:4;5987:67;:::i;:::-;6081:1;6105:4;6092:17;;6137:2;6129:6;6126:14;6154:1;6149:618;;;;6811:1;6828:6;6825:77;;;6877:9;6872:3;6868:19;6862:26;6853:35;;6825:77;6928:67;6988:6;6981:5;6928:67;:::i;:::-;6922:4;6915:81;6784:222;6119:887;;6149:618;6201:4;6197:9;6189:6;6185:22;6235:37;6267:4;6235:37;:::i;:::-;6294:1;6308:208;6322:7;6319:1;6316:14;6308:208;;;6401:9;6396:3;6392:19;6386:26;6378:6;6371:42;6452:1;6444:6;6440:14;6430:24;;6499:2;6488:9;6484:18;6471:31;;6345:4;6342:1;6338:12;6333:17;;6308:208;;;6544:6;6535:7;6532:19;6529:179;;;6602:9;6597:3;6593:19;6587:26;6645:48;6687:4;6679:6;6675:17;6664:9;6645:48;:::i;:::-;6637:6;6630:64;6552:156;6529:179;6754:1;6750;6742:6;6738:14;6734:22;6728:4;6721:36;6156:611;;;6119:887;;5709:1303;;;5617:1395;;:::o;7018:118::-;7105:24;7123:5;7105:24;:::i;:::-;7100:3;7093:37;7018:118;;:::o;7142:222::-;7235:4;7273:2;7262:9;7258:18;7250:26;;7286:71;7354:1;7343:9;7339:17;7330:6;7286:71;:::i;:::-;7142:222;;;;:::o;259:4854:13:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_1174":{"entryPoint":8017,"id":1174,"parameterSlots":3,"returnSlots":0},"@_approve_1240":{"entryPoint":10152,"id":1240,"parameterSlots":4,"returnSlots":0},"@_baseURI_567":{"entryPoint":9862,"id":567,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_822":{"entryPoint":10605,"id":822,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_1370":{"entryPoint":9423,"id":1370,"parameterSlots":4,"returnSlots":0},"@_checkOwner_84":{"entryPoint":7874,"id":84,"parameterSlots":0,"returnSlots":0},"@_getApproved_749":{"entryPoint":7813,"id":749,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_785":{"entryPoint":11140,"id":785,"parameterSlots":3,"returnSlots":1},"@_mint_978":{"entryPoint":8071,"id":978,"parameterSlots":2,"returnSlots":0},"@_msgSender_1546":{"entryPoint":8009,"id":1546,"parameterSlots":0,"returnSlots":1},"@_ownerOf_736":{"entryPoint":10091,"id":736,"parameterSlots":1,"returnSlots":1},"@_requireOwned_1306":{"entryPoint":7677,"id":1306,"parameterSlots":1,"returnSlots":1},"@_setApprovalForAll_1277":{"entryPoint":9056,"id":1277,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":8858,"id":146,"parameterSlots":1,"returnSlots":0},"@_update_928":{"entryPoint":8320,"id":928,"parameterSlots":3,"returnSlots":1},"@addItem_3400":{"entryPoint":4843,"id":3400,"parameterSlots":2,"returnSlots":0},"@approve_583":{"entryPoint":2059,"id":583,"parameterSlots":2,"returnSlots":0},"@balanceOf_491":{"entryPoint":5047,"id":491,"parameterSlots":1,"returnSlots":1},"@claimRewards_3335":{"entryPoint":3152,"id":3335,"parameterSlots":0,"returnSlots":0},"@current_3595":{"entryPoint":8035,"id":3595,"parameterSlots":1,"returnSlots":1},"@gameCost_3056":{"entryPoint":6365,"id":3056,"parameterSlots":0,"returnSlots":0},"@getApproved_600":{"entryPoint":2013,"id":600,"parameterSlots":1,"returnSlots":1},"@getItems_3540":{"entryPoint":3610,"id":3540,"parameterSlots":0,"returnSlots":1},"@getPlayerDetails_3492":{"entryPoint":5868,"id":3492,"parameterSlots":1,"returnSlots":1},"@increment_3609":{"entryPoint":8049,"id":3609,"parameterSlots":1,"returnSlots":0},"@initialAirdropAmount_3060":{"entryPoint":7245,"id":3060,"parameterSlots":0,"returnSlots":0},"@initializePlayer_3199":{"entryPoint":2081,"id":3199,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_633":{"entryPoint":7251,"id":633,"parameterSlots":2,"returnSlots":1},"@items_3070":{"entryPoint":5585,"id":3070,"parameterSlots":0,"returnSlots":0},"@levelUpScore_3058":{"entryPoint":5499,"id":3058,"parameterSlots":0,"returnSlots":0},"@log10_2729":{"entryPoint":10801,"id":2729,"parameterSlots":1,"returnSlots":1},"@mintNFT_3363":{"entryPoint":2775,"id":3363,"parameterSlots":0,"returnSlots":0},"@name_513":{"entryPoint":1867,"id":513,"parameterSlots":0,"returnSlots":1},"@nftOwners_3074":{"entryPoint":5534,"id":3074,"parameterSlots":0,"returnSlots":0},"@ownerOf_504":{"entryPoint":5029,"id":504,"parameterSlots":1,"returnSlots":1},"@owner_67":{"entryPoint":5289,"id":67,"parameterSlots":0,"returnSlots":1},"@playGame_3289":{"entryPoint":4011,"id":3289,"parameterSlots":1,"returnSlots":0},"@players_3065":{"entryPoint":7203,"id":3065,"parameterSlots":0,"returnSlots":0},"@purchaseItem_3455":{"entryPoint":6371,"id":3455,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_98":{"entryPoint":5251,"id":98,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_697":{"entryPoint":3979,"id":697,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_723":{"entryPoint":5505,"id":723,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_616":{"entryPoint":5477,"id":616,"parameterSlots":2,"returnSlots":0},"@setGameCost_3552":{"entryPoint":5271,"id":3552,"parameterSlots":1,"returnSlots":0},"@setInitialAirdropAmount_3576":{"entryPoint":5233,"id":3576,"parameterSlots":1,"returnSlots":0},"@setLevelUpScore_3564":{"entryPoint":2041,"id":3564,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1842":{"entryPoint":7571,"id":1842,"parameterSlots":1,"returnSlots":1},"@supportsInterface_463":{"entryPoint":1641,"id":463,"parameterSlots":1,"returnSlots":1},"@symbol_522":{"entryPoint":5331,"id":522,"parameterSlots":0,"returnSlots":1},"@toString_1632":{"entryPoint":9885,"id":1632,"parameterSlots":1,"returnSlots":1},"@tokenURI_558":{"entryPoint":5763,"id":558,"parameterSlots":1,"returnSlots":1},"@token_3048":{"entryPoint":7533,"id":3048,"parameterSlots":0,"returnSlots":0},"@transferFrom_679":{"entryPoint":2894,"id":679,"parameterSlots":3,"returnSlots":0},"@transferOwnership_126":{"entryPoint":7399,"id":126,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":13321,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":12918,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":12111,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":13187,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":14312,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":11599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":16688,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":13387,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":12984,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":11930,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":14923,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":12196,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":13989,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12241,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":13433,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":13208,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":12132,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":14333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":11620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":16709,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_uint256":{"entryPoint":13030,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":11951,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":14944,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr":{"entryPoint":12537,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":13670,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":12046,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":12570,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13707,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11677,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":16555,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IERC20_$362_to_t_address_fromStack":{"entryPoint":14133,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":12400,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11806,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16188,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb_to_t_string_memory_ptr_fromStack":{"entryPoint":16460,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d_to_t_string_memory_ptr_fromStack":{"entryPoint":14582,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536_to_t_string_memory_ptr_fromStack":{"entryPoint":15030,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f_to_t_string_memory_ptr_fromStack":{"entryPoint":14419,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4_to_t_string_memory_ptr_fromStack":{"entryPoint":15193,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce_to_t_string_memory_ptr_fromStack":{"entryPoint":14690,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813_to_t_string_memory_ptr_fromStack":{"entryPoint":16314,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr":{"entryPoint":12457,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_struct$_Player_$3038_memory_ptr_to_t_struct$_Player_$3038_memory_ptr_fromStack":{"entryPoint":13801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":12368,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13122,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16237,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":12061,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":15097,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":16612,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":14271,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":14486,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":12687,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11692,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$362__to_t_address__fromStack_reversed":{"entryPoint":14148,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":16129,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16495,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14617,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15065,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14454,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15228,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14725,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16349,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Player_$3038_memory_ptr__to_t_struct$_Player_$3038_memory_ptr__fromStack_reversed":{"entryPoint":13900,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13137,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":13564,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":15460,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":13934,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":12827,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":11512,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":13272,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":12854,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr":{"entryPoint":12352,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13654,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":15501,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr":{"entryPoint":12324,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13626,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":16527,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":11719,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr":{"entryPoint":12557,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13694,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":12335,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13637,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":16538,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr":{"entryPoint":12383,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":11730,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16177,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15260,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":15359,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15408,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":15778,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":12028,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11665,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":11532,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":11996,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":11897,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":15743,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_contract$_IERC20_$362_to_t_address":{"entryPoint":14115,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":14097,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":14063,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":15633,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":15919,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":12903,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":11747,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":15522,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":14222,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":15891,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":12778,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":14053,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":14851,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":15861,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":14804,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":15312,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":14175,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":14757,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":12731,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":15667,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":12721,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":12726,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":11527,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":11522,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11789,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":15538,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":15848,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":15719,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb":{"entryPoint":16381,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d":{"entryPoint":14541,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536":{"entryPoint":14989,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f":{"entryPoint":14378,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4":{"entryPoint":15152,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce":{"entryPoint":14649,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813":{"entryPoint":16273,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":15551,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":15677,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":12088,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":13164,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":11576,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":11907,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":15714,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:39882:15","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:15","statements":[{"nodeType":"YulAssignment","src":"57:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:15"},"nodeType":"YulFunctionCall","src":"67:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:15","type":""}],"src":"7:75:15"},{"body":{"nodeType":"YulBlock","src":"177:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:15"},"nodeType":"YulFunctionCall","src":"187:12:15"},"nodeType":"YulExpressionStatement","src":"187:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:15"},{"body":{"nodeType":"YulBlock","src":"300:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:15"},"nodeType":"YulFunctionCall","src":"310:12:15"},"nodeType":"YulExpressionStatement","src":"310:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:15"},{"body":{"nodeType":"YulBlock","src":"378:105:15","statements":[{"nodeType":"YulAssignment","src":"388:89:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:15"},"nodeType":"YulFunctionCall","src":"399:78:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:15"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:15","type":""}],"src":"334:149:15"},{"body":{"nodeType":"YulBlock","src":"531:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:15"},"nodeType":"YulFunctionCall","src":"589:12:15"},"nodeType":"YulExpressionStatement","src":"589:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:15"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:15"},"nodeType":"YulFunctionCall","src":"561:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:15"},"nodeType":"YulFunctionCall","src":"551:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:15"},"nodeType":"YulFunctionCall","src":"544:42:15"},"nodeType":"YulIf","src":"541:62:15"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:15","type":""}],"src":"489:120:15"},{"body":{"nodeType":"YulBlock","src":"666:86:15","statements":[{"nodeType":"YulAssignment","src":"676:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:15"},"nodeType":"YulFunctionCall","src":"685:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:15"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:15"},"nodeType":"YulFunctionCall","src":"714:32:15"},"nodeType":"YulExpressionStatement","src":"714:32:15"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:15","type":""}],"src":"615:137:15"},{"body":{"nodeType":"YulBlock","src":"823:262:15","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:15"},"nodeType":"YulFunctionCall","src":"871:79:15"},"nodeType":"YulExpressionStatement","src":"871:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:15"},"nodeType":"YulFunctionCall","src":"840:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:15"},"nodeType":"YulFunctionCall","src":"836:32:15"},"nodeType":"YulIf","src":"833:119:15"},{"nodeType":"YulBlock","src":"962:116:15","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:15"},"nodeType":"YulFunctionCall","src":"1036:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:15"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:15"},"nodeType":"YulFunctionCall","src":"1016:52:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:15","type":""}],"src":"758:327:15"},{"body":{"nodeType":"YulBlock","src":"1133:48:15","statements":[{"nodeType":"YulAssignment","src":"1143:32:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:15"},"nodeType":"YulFunctionCall","src":"1161:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:15"},"nodeType":"YulFunctionCall","src":"1154:21:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:15"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:15","type":""}],"src":"1091:90:15"},{"body":{"nodeType":"YulBlock","src":"1246:50:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:15"},"nodeType":"YulFunctionCall","src":"1268:21:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:15"},"nodeType":"YulFunctionCall","src":"1256:34:15"},"nodeType":"YulExpressionStatement","src":"1256:34:15"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:15","type":""}],"src":"1187:109:15"},{"body":{"nodeType":"YulBlock","src":"1394:118:15","statements":[{"nodeType":"YulAssignment","src":"1404:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:15"},"nodeType":"YulFunctionCall","src":"1412:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:15"},"nodeType":"YulFunctionCall","src":"1487:17:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:15"},"nodeType":"YulFunctionCall","src":"1440:65:15"},"nodeType":"YulExpressionStatement","src":"1440:65:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:15","type":""}],"src":"1302:210:15"},{"body":{"nodeType":"YulBlock","src":"1577:40:15","statements":[{"nodeType":"YulAssignment","src":"1588:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:15"},"nodeType":"YulFunctionCall","src":"1598:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:15"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:15","type":""}],"src":"1518:99:15"},{"body":{"nodeType":"YulBlock","src":"1719:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:15"},"nodeType":"YulFunctionCall","src":"1729:19:15"},"nodeType":"YulExpressionStatement","src":"1729:19:15"},{"nodeType":"YulAssignment","src":"1757:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:15"},"nodeType":"YulFunctionCall","src":"1772:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:15","type":""}],"src":"1623:169:15"},{"body":{"nodeType":"YulBlock","src":"1860:184:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:15"},"nodeType":"YulFunctionCall","src":"1960:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:15"},"nodeType":"YulFunctionCall","src":"1979:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:15"},"nodeType":"YulFunctionCall","src":"1973:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:15"},"nodeType":"YulFunctionCall","src":"1953:39:15"},"nodeType":"YulExpressionStatement","src":"1953:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:15"},"nodeType":"YulFunctionCall","src":"1897:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:15","statements":[{"nodeType":"YulAssignment","src":"1913:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:15"},"nodeType":"YulFunctionCall","src":"1918:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:15","statements":[]},"src":"1889:113:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:15"},"nodeType":"YulFunctionCall","src":"2018:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:15"},"nodeType":"YulFunctionCall","src":"2011:27:15"},"nodeType":"YulExpressionStatement","src":"2011:27:15"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:15","type":""}],"src":"1798:246:15"},{"body":{"nodeType":"YulBlock","src":"2098:54:15","statements":[{"nodeType":"YulAssignment","src":"2108:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:15"},"nodeType":"YulFunctionCall","src":"2122:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:15"},"nodeType":"YulFunctionCall","src":"2138:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:15"},"nodeType":"YulFunctionCall","src":"2118:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:15","type":""}],"src":"2050:102:15"},{"body":{"nodeType":"YulBlock","src":"2250:285:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:15"},"nodeType":"YulFunctionCall","src":"2274:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:15"},"nodeType":"YulFunctionCall","src":"2329:71:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:15"},"nodeType":"YulFunctionCall","src":"2444:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:15"},"nodeType":"YulFunctionCall","src":"2409:65:15"},"nodeType":"YulExpressionStatement","src":"2409:65:15"},{"nodeType":"YulAssignment","src":"2483:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:15"},"nodeType":"YulFunctionCall","src":"2499:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:15"},"nodeType":"YulFunctionCall","src":"2490:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:15","type":""}],"src":"2158:377:15"},{"body":{"nodeType":"YulBlock","src":"2659:195:15","statements":[{"nodeType":"YulAssignment","src":"2669:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:15"},"nodeType":"YulFunctionCall","src":"2677:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:15"},"nodeType":"YulFunctionCall","src":"2712:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:15"},"nodeType":"YulFunctionCall","src":"2731:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:15"},"nodeType":"YulFunctionCall","src":"2705:47:15"},"nodeType":"YulExpressionStatement","src":"2705:47:15"},{"nodeType":"YulAssignment","src":"2761:86:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:15"},"nodeType":"YulFunctionCall","src":"2769:78:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:15","type":""}],"src":"2541:313:15"},{"body":{"nodeType":"YulBlock","src":"2905:32:15","statements":[{"nodeType":"YulAssignment","src":"2915:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:15","type":""}],"src":"2860:77:15"},{"body":{"nodeType":"YulBlock","src":"2986:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:15"},"nodeType":"YulFunctionCall","src":"3045:12:15"},"nodeType":"YulExpressionStatement","src":"3045:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:15"},"nodeType":"YulFunctionCall","src":"3016:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:15"},"nodeType":"YulFunctionCall","src":"3006:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:15"},"nodeType":"YulFunctionCall","src":"2999:43:15"},"nodeType":"YulIf","src":"2996:63:15"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:15","type":""}],"src":"2943:122:15"},{"body":{"nodeType":"YulBlock","src":"3123:87:15","statements":[{"nodeType":"YulAssignment","src":"3133:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:15"},"nodeType":"YulFunctionCall","src":"3142:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:15"},"nodeType":"YulFunctionCall","src":"3171:33:15"},"nodeType":"YulExpressionStatement","src":"3171:33:15"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:15","type":""}],"src":"3071:139:15"},{"body":{"nodeType":"YulBlock","src":"3282:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:15"},"nodeType":"YulFunctionCall","src":"3330:79:15"},"nodeType":"YulExpressionStatement","src":"3330:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:15"},"nodeType":"YulFunctionCall","src":"3299:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:15"},"nodeType":"YulFunctionCall","src":"3295:32:15"},"nodeType":"YulIf","src":"3292:119:15"},{"nodeType":"YulBlock","src":"3421:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:15"},"nodeType":"YulFunctionCall","src":"3496:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:15"},"nodeType":"YulFunctionCall","src":"3475:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:15","type":""}],"src":"3216:329:15"},{"body":{"nodeType":"YulBlock","src":"3596:81:15","statements":[{"nodeType":"YulAssignment","src":"3606:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:15"},"nodeType":"YulFunctionCall","src":"3617:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:15","type":""}],"src":"3551:126:15"},{"body":{"nodeType":"YulBlock","src":"3728:51:15","statements":[{"nodeType":"YulAssignment","src":"3738:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:15"},"nodeType":"YulFunctionCall","src":"3749:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:15","type":""}],"src":"3683:96:15"},{"body":{"nodeType":"YulBlock","src":"3850:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:15"},"nodeType":"YulFunctionCall","src":"3872:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:15"},"nodeType":"YulFunctionCall","src":"3860:37:15"},"nodeType":"YulExpressionStatement","src":"3860:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:15","type":""}],"src":"3785:118:15"},{"body":{"nodeType":"YulBlock","src":"4007:124:15","statements":[{"nodeType":"YulAssignment","src":"4017:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:15"},"nodeType":"YulFunctionCall","src":"4025:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:15"},"nodeType":"YulFunctionCall","src":"4106:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:15"},"nodeType":"YulFunctionCall","src":"4053:71:15"},"nodeType":"YulExpressionStatement","src":"4053:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:15","type":""}],"src":"3909:222:15"},{"body":{"nodeType":"YulBlock","src":"4180:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:15"},"nodeType":"YulFunctionCall","src":"4239:12:15"},"nodeType":"YulExpressionStatement","src":"4239:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:15"},"nodeType":"YulFunctionCall","src":"4210:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:15"},"nodeType":"YulFunctionCall","src":"4200:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:15"},"nodeType":"YulFunctionCall","src":"4193:43:15"},"nodeType":"YulIf","src":"4190:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:15","type":""}],"src":"4137:122:15"},{"body":{"nodeType":"YulBlock","src":"4317:87:15","statements":[{"nodeType":"YulAssignment","src":"4327:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:15"},"nodeType":"YulFunctionCall","src":"4336:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:15"},"nodeType":"YulFunctionCall","src":"4365:33:15"},"nodeType":"YulExpressionStatement","src":"4365:33:15"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:15","type":""}],"src":"4265:139:15"},{"body":{"nodeType":"YulBlock","src":"4493:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:15"},"nodeType":"YulFunctionCall","src":"4541:79:15"},"nodeType":"YulExpressionStatement","src":"4541:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:15"},"nodeType":"YulFunctionCall","src":"4510:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:15"},"nodeType":"YulFunctionCall","src":"4506:32:15"},"nodeType":"YulIf","src":"4503:119:15"},{"nodeType":"YulBlock","src":"4632:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:15"},"nodeType":"YulFunctionCall","src":"4707:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:15"},"nodeType":"YulFunctionCall","src":"4686:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:15"}]}]},{"nodeType":"YulBlock","src":"4759:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:15"},"nodeType":"YulFunctionCall","src":"4835:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:15"},"nodeType":"YulFunctionCall","src":"4814:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:15","type":""}],"src":"4410:474:15"},{"body":{"nodeType":"YulBlock","src":"4956:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"5002:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5004:77:15"},"nodeType":"YulFunctionCall","src":"5004:79:15"},"nodeType":"YulExpressionStatement","src":"5004:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4977:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4986:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4973:3:15"},"nodeType":"YulFunctionCall","src":"4973:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4998:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4969:3:15"},"nodeType":"YulFunctionCall","src":"4969:32:15"},"nodeType":"YulIf","src":"4966:119:15"},{"nodeType":"YulBlock","src":"5095:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5110:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5124:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5114:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5139:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5174:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5185:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5170:3:15"},"nodeType":"YulFunctionCall","src":"5170:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5194:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5149:20:15"},"nodeType":"YulFunctionCall","src":"5149:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5139:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4926:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4937:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4949:6:15","type":""}],"src":"4890:329:15"},{"body":{"nodeType":"YulBlock","src":"5325:519:15","statements":[{"body":{"nodeType":"YulBlock","src":"5371:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5373:77:15"},"nodeType":"YulFunctionCall","src":"5373:79:15"},"nodeType":"YulExpressionStatement","src":"5373:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5346:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5355:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5342:3:15"},"nodeType":"YulFunctionCall","src":"5342:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5367:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5338:3:15"},"nodeType":"YulFunctionCall","src":"5338:32:15"},"nodeType":"YulIf","src":"5335:119:15"},{"nodeType":"YulBlock","src":"5464:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5479:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5493:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5483:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5508:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5543:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5554:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5539:3:15"},"nodeType":"YulFunctionCall","src":"5539:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5563:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5518:20:15"},"nodeType":"YulFunctionCall","src":"5518:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5508:6:15"}]}]},{"nodeType":"YulBlock","src":"5591:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5606:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5620:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5610:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5636:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5671:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5682:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5667:3:15"},"nodeType":"YulFunctionCall","src":"5667:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5691:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5646:20:15"},"nodeType":"YulFunctionCall","src":"5646:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5636:6:15"}]}]},{"nodeType":"YulBlock","src":"5719:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5734:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5748:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5738:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5764:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5799:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5810:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5795:3:15"},"nodeType":"YulFunctionCall","src":"5795:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5819:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5774:20:15"},"nodeType":"YulFunctionCall","src":"5774:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5764:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5279:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5290:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5302:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5310:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5318:6:15","type":""}],"src":"5225:619:15"},{"body":{"nodeType":"YulBlock","src":"5946:40:15","statements":[{"nodeType":"YulAssignment","src":"5957:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5973:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5967:5:15"},"nodeType":"YulFunctionCall","src":"5967:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5957:6:15"}]}]},"name":"array_length_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5929:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5939:6:15","type":""}],"src":"5850:136:15"},{"body":{"nodeType":"YulBlock","src":"6125:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6142:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6147:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6135:6:15"},"nodeType":"YulFunctionCall","src":"6135:19:15"},"nodeType":"YulExpressionStatement","src":"6135:19:15"},{"nodeType":"YulAssignment","src":"6163:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6182:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"6187:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6178:3:15"},"nodeType":"YulFunctionCall","src":"6178:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6163:11:15"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6097:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"6102:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6113:11:15","type":""}],"src":"5992:206:15"},{"body":{"nodeType":"YulBlock","src":"6298:60:15","statements":[{"nodeType":"YulAssignment","src":"6308:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"6316:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"6308:4:15"}]},{"nodeType":"YulAssignment","src":"6329:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"6341:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"6346:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6337:3:15"},"nodeType":"YulFunctionCall","src":"6337:14:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"6329:4:15"}]}]},"name":"array_dataslot_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"6285:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"6293:4:15","type":""}],"src":"6204:154:15"},{"body":{"nodeType":"YulBlock","src":"6419:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6436:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6459:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6441:17:15"},"nodeType":"YulFunctionCall","src":"6441:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6429:6:15"},"nodeType":"YulFunctionCall","src":"6429:37:15"},"nodeType":"YulExpressionStatement","src":"6429:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6407:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6414:3:15","type":""}],"src":"6364:108:15"},{"body":{"nodeType":"YulBlock","src":"6564:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6581:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6586:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6574:6:15"},"nodeType":"YulFunctionCall","src":"6574:19:15"},"nodeType":"YulExpressionStatement","src":"6574:19:15"},{"nodeType":"YulAssignment","src":"6602:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6621:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"6626:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6617:3:15"},"nodeType":"YulFunctionCall","src":"6617:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6602:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6536:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"6541:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6552:11:15","type":""}],"src":"6478:159:15"},{"body":{"nodeType":"YulBlock","src":"6725:275:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6735:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6782:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6749:32:15"},"nodeType":"YulFunctionCall","src":"6749:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6739:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6797:68:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6853:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6858:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6804:48:15"},"nodeType":"YulFunctionCall","src":"6804:61:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6797:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6913:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"6920:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6909:3:15"},"nodeType":"YulFunctionCall","src":"6909:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"6927:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6932:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6874:34:15"},"nodeType":"YulFunctionCall","src":"6874:65:15"},"nodeType":"YulExpressionStatement","src":"6874:65:15"},{"nodeType":"YulAssignment","src":"6948:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6959:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6986:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6964:21:15"},"nodeType":"YulFunctionCall","src":"6964:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6955:3:15"},"nodeType":"YulFunctionCall","src":"6955:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6948:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6706:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6713:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6721:3:15","type":""}],"src":"6643:357:15"},{"body":{"nodeType":"YulBlock","src":"7170:655:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7180:26:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7196:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7201:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7192:3:15"},"nodeType":"YulFunctionCall","src":"7192:14:15"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"7184:4:15","type":""}]},{"nodeType":"YulBlock","src":"7216:162:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7249:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7279:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"7286:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7275:3:15"},"nodeType":"YulFunctionCall","src":"7275:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7269:5:15"},"nodeType":"YulFunctionCall","src":"7269:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7253:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7339:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7357:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7362:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7353:3:15"},"nodeType":"YulFunctionCall","src":"7353:14:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"7305:33:15"},"nodeType":"YulFunctionCall","src":"7305:63:15"},"nodeType":"YulExpressionStatement","src":"7305:63:15"}]},{"nodeType":"YulBlock","src":"7388:235:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7423:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7453:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"7460:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7449:3:15"},"nodeType":"YulFunctionCall","src":"7449:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7443:5:15"},"nodeType":"YulFunctionCall","src":"7443:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7427:12:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7491:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7496:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7487:3:15"},"nodeType":"YulFunctionCall","src":"7487:14:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7507:4:15"},{"name":"pos","nodeType":"YulIdentifier","src":"7513:3:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7503:3:15"},"nodeType":"YulFunctionCall","src":"7503:14:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7480:6:15"},"nodeType":"YulFunctionCall","src":"7480:38:15"},"nodeType":"YulExpressionStatement","src":"7480:38:15"},{"nodeType":"YulAssignment","src":"7531:81:15","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7593:12:15"},{"name":"tail","nodeType":"YulIdentifier","src":"7607:4:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7539:53:15"},"nodeType":"YulFunctionCall","src":"7539:73:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7531:4:15"}]}]},{"nodeType":"YulBlock","src":"7633:165:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7669:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7699:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"7706:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7695:3:15"},"nodeType":"YulFunctionCall","src":"7695:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7689:5:15"},"nodeType":"YulFunctionCall","src":"7689:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7673:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7759:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7777:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7782:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7773:3:15"},"nodeType":"YulFunctionCall","src":"7773:14:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"7725:33:15"},"nodeType":"YulFunctionCall","src":"7725:63:15"},"nodeType":"YulExpressionStatement","src":"7725:63:15"}]},{"nodeType":"YulAssignment","src":"7808:11:15","value":{"name":"tail","nodeType":"YulIdentifier","src":"7815:4:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7808:3:15"}]}]},"name":"abi_encode_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7149:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7156:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7165:3:15","type":""}],"src":"7062:763:15"},{"body":{"nodeType":"YulBlock","src":"7955:120:15","statements":[{"nodeType":"YulAssignment","src":"7965:104:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8057:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"8065:3:15"}],"functionName":{"name":"abi_encode_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr","nodeType":"YulIdentifier","src":"7979:77:15"},"nodeType":"YulFunctionCall","src":"7979:90:15"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"7965:10:15"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"7928:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7936:3:15","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"7944:10:15","type":""}],"src":"7831:244:15"},{"body":{"nodeType":"YulBlock","src":"8178:38:15","statements":[{"nodeType":"YulAssignment","src":"8188:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8200:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8205:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8196:3:15"},"nodeType":"YulFunctionCall","src":"8196:14:15"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"8188:4:15"}]}]},"name":"array_nextElement_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"8165:3:15","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"8173:4:15","type":""}],"src":"8081:135:15"},{"body":{"nodeType":"YulBlock","src":"8450:919:15","statements":[{"nodeType":"YulVariableDeclaration","src":"8460:90:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8544:5:15"}],"functionName":{"name":"array_length_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8474:69:15"},"nodeType":"YulFunctionCall","src":"8474:76:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8464:6:15","type":""}]},{"nodeType":"YulAssignment","src":"8559:115:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8662:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"8667:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8566:95:15"},"nodeType":"YulFunctionCall","src":"8566:108:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8559:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"8683:20:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"8700:3:15"},"variables":[{"name":"headStart","nodeType":"YulTypedName","src":"8687:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8712:39:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8728:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8737:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8733:3:15"},"nodeType":"YulFunctionCall","src":"8733:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8724:3:15"},"nodeType":"YulFunctionCall","src":"8724:27:15"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"8716:4:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8760:93:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8847:5:15"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8775:71:15"},"nodeType":"YulFunctionCall","src":"8775:78:15"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"8764:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8862:21:15","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"8876:7:15"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8866:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"8952:372:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8973:3:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8982:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"8988:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8978:3:15"},"nodeType":"YulFunctionCall","src":"8978:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8966:6:15"},"nodeType":"YulFunctionCall","src":"8966:33:15"},"nodeType":"YulExpressionStatement","src":"8966:33:15"},{"nodeType":"YulVariableDeclaration","src":"9012:34:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9039:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9033:5:15"},"nodeType":"YulFunctionCall","src":"9033:13:15"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"9016:13:15","type":""}]},{"nodeType":"YulAssignment","src":"9059:116:15","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"9155:13:15"},{"name":"tail","nodeType":"YulIdentifier","src":"9170:4:15"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr","nodeType":"YulIdentifier","src":"9067:87:15"},"nodeType":"YulFunctionCall","src":"9067:108:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9059:4:15"}]},{"nodeType":"YulAssignment","src":"9188:92:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9273:6:15"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9198:74:15"},"nodeType":"YulFunctionCall","src":"9198:82:15"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9188:6:15"}]},{"nodeType":"YulAssignment","src":"9293:21:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9304:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9309:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9300:3:15"},"nodeType":"YulFunctionCall","src":"9300:14:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9293:3:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8914:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"8917:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8911:2:15"},"nodeType":"YulFunctionCall","src":"8911:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8925:18:15","statements":[{"nodeType":"YulAssignment","src":"8927:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8936:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"8939:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8932:3:15"},"nodeType":"YulFunctionCall","src":"8932:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8927:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"8896:14:15","statements":[{"nodeType":"YulVariableDeclaration","src":"8898:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"8907:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8902:1:15","type":""}]}]},"src":"8892:432:15"},{"nodeType":"YulAssignment","src":"9333:11:15","value":{"name":"tail","nodeType":"YulIdentifier","src":"9340:4:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9333:3:15"}]},{"nodeType":"YulAssignment","src":"9353:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"9360:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9353:3:15"}]}]},"name":"abi_encode_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8429:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8436:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8445:3:15","type":""}],"src":"8282:1087:15"},{"body":{"nodeType":"YulBlock","src":"9567:269:15","statements":[{"nodeType":"YulAssignment","src":"9577:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9589:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9600:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9585:3:15"},"nodeType":"YulFunctionCall","src":"9585:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9577:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9624:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9635:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9620:3:15"},"nodeType":"YulFunctionCall","src":"9620:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9643:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"9649:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9639:3:15"},"nodeType":"YulFunctionCall","src":"9639:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9613:6:15"},"nodeType":"YulFunctionCall","src":"9613:47:15"},"nodeType":"YulExpressionStatement","src":"9613:47:15"},{"nodeType":"YulAssignment","src":"9669:160:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9815:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"9824:4:15"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9677:137:15"},"nodeType":"YulFunctionCall","src":"9677:152:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9669:4:15"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9539:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9551:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9562:4:15","type":""}],"src":"9375:461:15"},{"body":{"nodeType":"YulBlock","src":"9931:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9948:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9951:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9941:6:15"},"nodeType":"YulFunctionCall","src":"9941:12:15"},"nodeType":"YulExpressionStatement","src":"9941:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"9842:117:15"},{"body":{"nodeType":"YulBlock","src":"10054:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10071:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10074:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10064:6:15"},"nodeType":"YulFunctionCall","src":"10064:12:15"},"nodeType":"YulExpressionStatement","src":"10064:12:15"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"9965:117:15"},{"body":{"nodeType":"YulBlock","src":"10116:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10133:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10136:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10126:6:15"},"nodeType":"YulFunctionCall","src":"10126:88:15"},"nodeType":"YulExpressionStatement","src":"10126:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10230:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10233:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10223:6:15"},"nodeType":"YulFunctionCall","src":"10223:15:15"},"nodeType":"YulExpressionStatement","src":"10223:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10254:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10257:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10247:6:15"},"nodeType":"YulFunctionCall","src":"10247:15:15"},"nodeType":"YulExpressionStatement","src":"10247:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10088:180:15"},{"body":{"nodeType":"YulBlock","src":"10317:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10327:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10349:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"10379:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10357:21:15"},"nodeType":"YulFunctionCall","src":"10357:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10345:3:15"},"nodeType":"YulFunctionCall","src":"10345:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"10331:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"10496:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10498:16:15"},"nodeType":"YulFunctionCall","src":"10498:18:15"},"nodeType":"YulExpressionStatement","src":"10498:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10439:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"10451:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10436:2:15"},"nodeType":"YulFunctionCall","src":"10436:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10475:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"10487:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10472:2:15"},"nodeType":"YulFunctionCall","src":"10472:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10433:2:15"},"nodeType":"YulFunctionCall","src":"10433:62:15"},"nodeType":"YulIf","src":"10430:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10534:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10538:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10527:6:15"},"nodeType":"YulFunctionCall","src":"10527:22:15"},"nodeType":"YulExpressionStatement","src":"10527:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10303:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"10311:4:15","type":""}],"src":"10274:281:15"},{"body":{"nodeType":"YulBlock","src":"10602:88:15","statements":[{"nodeType":"YulAssignment","src":"10612:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"10622:18:15"},"nodeType":"YulFunctionCall","src":"10622:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10612:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10671:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"10679:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"10651:19:15"},"nodeType":"YulFunctionCall","src":"10651:33:15"},"nodeType":"YulExpressionStatement","src":"10651:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"10586:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"10595:6:15","type":""}],"src":"10561:129:15"},{"body":{"nodeType":"YulBlock","src":"10763:241:15","statements":[{"body":{"nodeType":"YulBlock","src":"10868:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10870:16:15"},"nodeType":"YulFunctionCall","src":"10870:18:15"},"nodeType":"YulExpressionStatement","src":"10870:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"10848:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10837:2:15"},"nodeType":"YulFunctionCall","src":"10837:30:15"},"nodeType":"YulIf","src":"10834:56:15"},{"nodeType":"YulAssignment","src":"10900:37:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10930:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10908:21:15"},"nodeType":"YulFunctionCall","src":"10908:29:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"10900:4:15"}]},{"nodeType":"YulAssignment","src":"10974:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"10986:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"10992:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10982:3:15"},"nodeType":"YulFunctionCall","src":"10982:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"10974:4:15"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"10747:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"10758:4:15","type":""}],"src":"10696:308:15"},{"body":{"nodeType":"YulBlock","src":"11074:82:15","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11097:3:15"},{"name":"src","nodeType":"YulIdentifier","src":"11102:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"11107:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"11084:12:15"},"nodeType":"YulFunctionCall","src":"11084:30:15"},"nodeType":"YulExpressionStatement","src":"11084:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11134:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"11139:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11130:3:15"},"nodeType":"YulFunctionCall","src":"11130:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"11148:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11123:6:15"},"nodeType":"YulFunctionCall","src":"11123:27:15"},"nodeType":"YulExpressionStatement","src":"11123:27:15"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11056:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"11061:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"11066:6:15","type":""}],"src":"11010:146:15"},{"body":{"nodeType":"YulBlock","src":"11246:341:15","statements":[{"nodeType":"YulAssignment","src":"11256:75:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11323:6:15"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11281:41:15"},"nodeType":"YulFunctionCall","src":"11281:49:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"11265:15:15"},"nodeType":"YulFunctionCall","src":"11265:66:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"11256:5:15"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"11347:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"11354:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11340:6:15"},"nodeType":"YulFunctionCall","src":"11340:21:15"},"nodeType":"YulExpressionStatement","src":"11340:21:15"},{"nodeType":"YulVariableDeclaration","src":"11370:27:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"11385:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"11392:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11381:3:15"},"nodeType":"YulFunctionCall","src":"11381:16:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"11374:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"11435:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"11437:77:15"},"nodeType":"YulFunctionCall","src":"11437:79:15"},"nodeType":"YulExpressionStatement","src":"11437:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11416:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"11421:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11412:3:15"},"nodeType":"YulFunctionCall","src":"11412:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"11430:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11409:2:15"},"nodeType":"YulFunctionCall","src":"11409:25:15"},"nodeType":"YulIf","src":"11406:112:15"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11564:3:15"},{"name":"dst","nodeType":"YulIdentifier","src":"11569:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"11574:6:15"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11527:36:15"},"nodeType":"YulFunctionCall","src":"11527:54:15"},"nodeType":"YulExpressionStatement","src":"11527:54:15"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11219:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"11224:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"11232:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"11240:5:15","type":""}],"src":"11162:425:15"},{"body":{"nodeType":"YulBlock","src":"11669:278:15","statements":[{"body":{"nodeType":"YulBlock","src":"11718:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"11720:77:15"},"nodeType":"YulFunctionCall","src":"11720:79:15"},"nodeType":"YulExpressionStatement","src":"11720:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11697:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"11705:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11693:3:15"},"nodeType":"YulFunctionCall","src":"11693:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"11712:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11689:3:15"},"nodeType":"YulFunctionCall","src":"11689:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11682:6:15"},"nodeType":"YulFunctionCall","src":"11682:35:15"},"nodeType":"YulIf","src":"11679:122:15"},{"nodeType":"YulVariableDeclaration","src":"11810:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11837:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11824:12:15"},"nodeType":"YulFunctionCall","src":"11824:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11814:6:15","type":""}]},{"nodeType":"YulAssignment","src":"11853:88:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11914:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"11922:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11910:3:15"},"nodeType":"YulFunctionCall","src":"11910:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"11929:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"11937:3:15"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11862:47:15"},"nodeType":"YulFunctionCall","src":"11862:79:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"11853:5:15"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11647:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"11655:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"11663:5:15","type":""}],"src":"11607:340:15"},{"body":{"nodeType":"YulBlock","src":"12046:561:15","statements":[{"body":{"nodeType":"YulBlock","src":"12092:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12094:77:15"},"nodeType":"YulFunctionCall","src":"12094:79:15"},"nodeType":"YulExpressionStatement","src":"12094:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12067:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"12076:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12063:3:15"},"nodeType":"YulFunctionCall","src":"12063:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"12088:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12059:3:15"},"nodeType":"YulFunctionCall","src":"12059:32:15"},"nodeType":"YulIf","src":"12056:119:15"},{"nodeType":"YulBlock","src":"12185:287:15","statements":[{"nodeType":"YulVariableDeclaration","src":"12200:45:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12231:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12242:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12227:3:15"},"nodeType":"YulFunctionCall","src":"12227:17:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12214:12:15"},"nodeType":"YulFunctionCall","src":"12214:31:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12204:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"12292:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"12294:77:15"},"nodeType":"YulFunctionCall","src":"12294:79:15"},"nodeType":"YulExpressionStatement","src":"12294:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12264:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"12272:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12261:2:15"},"nodeType":"YulFunctionCall","src":"12261:30:15"},"nodeType":"YulIf","src":"12258:117:15"},{"nodeType":"YulAssignment","src":"12389:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12434:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"12445:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12430:3:15"},"nodeType":"YulFunctionCall","src":"12430:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12454:7:15"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"12399:30:15"},"nodeType":"YulFunctionCall","src":"12399:63:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12389:6:15"}]}]},{"nodeType":"YulBlock","src":"12482:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"12497:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"12511:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12501:6:15","type":""}]},{"nodeType":"YulAssignment","src":"12527:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12562:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"12573:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12558:3:15"},"nodeType":"YulFunctionCall","src":"12558:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12582:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12537:20:15"},"nodeType":"YulFunctionCall","src":"12537:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12527:6:15"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12008:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12019:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12031:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12039:6:15","type":""}],"src":"11953:654:15"},{"body":{"nodeType":"YulBlock","src":"12678:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12695:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12718:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12700:17:15"},"nodeType":"YulFunctionCall","src":"12700:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12688:6:15"},"nodeType":"YulFunctionCall","src":"12688:37:15"},"nodeType":"YulExpressionStatement","src":"12688:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12666:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12673:3:15","type":""}],"src":"12613:118:15"},{"body":{"nodeType":"YulBlock","src":"12835:124:15","statements":[{"nodeType":"YulAssignment","src":"12845:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12857:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12868:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12853:3:15"},"nodeType":"YulFunctionCall","src":"12853:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12845:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12925:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12938:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12949:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12934:3:15"},"nodeType":"YulFunctionCall","src":"12934:17:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12881:43:15"},"nodeType":"YulFunctionCall","src":"12881:71:15"},"nodeType":"YulExpressionStatement","src":"12881:71:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12807:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12819:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12830:4:15","type":""}],"src":"12737:222:15"},{"body":{"nodeType":"YulBlock","src":"13005:76:15","statements":[{"body":{"nodeType":"YulBlock","src":"13059:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13068:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13071:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13061:6:15"},"nodeType":"YulFunctionCall","src":"13061:12:15"},"nodeType":"YulExpressionStatement","src":"13061:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13028:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13050:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13035:14:15"},"nodeType":"YulFunctionCall","src":"13035:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13025:2:15"},"nodeType":"YulFunctionCall","src":"13025:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13018:6:15"},"nodeType":"YulFunctionCall","src":"13018:40:15"},"nodeType":"YulIf","src":"13015:60:15"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12998:5:15","type":""}],"src":"12965:116:15"},{"body":{"nodeType":"YulBlock","src":"13136:84:15","statements":[{"nodeType":"YulAssignment","src":"13146:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13168:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13155:12:15"},"nodeType":"YulFunctionCall","src":"13155:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13146:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13208:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"13184:23:15"},"nodeType":"YulFunctionCall","src":"13184:30:15"},"nodeType":"YulExpressionStatement","src":"13184:30:15"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13114:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"13122:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13130:5:15","type":""}],"src":"13087:133:15"},{"body":{"nodeType":"YulBlock","src":"13306:388:15","statements":[{"body":{"nodeType":"YulBlock","src":"13352:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13354:77:15"},"nodeType":"YulFunctionCall","src":"13354:79:15"},"nodeType":"YulExpressionStatement","src":"13354:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13327:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"13336:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13323:3:15"},"nodeType":"YulFunctionCall","src":"13323:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"13348:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13319:3:15"},"nodeType":"YulFunctionCall","src":"13319:32:15"},"nodeType":"YulIf","src":"13316:119:15"},{"nodeType":"YulBlock","src":"13445:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"13460:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"13474:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13464:6:15","type":""}]},{"nodeType":"YulAssignment","src":"13489:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13524:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"13535:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13520:3:15"},"nodeType":"YulFunctionCall","src":"13520:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13544:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13499:20:15"},"nodeType":"YulFunctionCall","src":"13499:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13489:6:15"}]}]},{"nodeType":"YulBlock","src":"13572:115:15","statements":[{"nodeType":"YulVariableDeclaration","src":"13587:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"13601:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13591:6:15","type":""}]},{"nodeType":"YulAssignment","src":"13617:60:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13649:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"13660:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13645:3:15"},"nodeType":"YulFunctionCall","src":"13645:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13669:7:15"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"13627:17:15"},"nodeType":"YulFunctionCall","src":"13627:50:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13617:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13268:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13279:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13291:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13299:6:15","type":""}],"src":"13226:468:15"},{"body":{"nodeType":"YulBlock","src":"13766:241:15","statements":[{"body":{"nodeType":"YulBlock","src":"13871:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13873:16:15"},"nodeType":"YulFunctionCall","src":"13873:18:15"},"nodeType":"YulExpressionStatement","src":"13873:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13843:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"13851:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13840:2:15"},"nodeType":"YulFunctionCall","src":"13840:30:15"},"nodeType":"YulIf","src":"13837:56:15"},{"nodeType":"YulAssignment","src":"13903:37:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13933:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13911:21:15"},"nodeType":"YulFunctionCall","src":"13911:29:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13903:4:15"}]},{"nodeType":"YulAssignment","src":"13977:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"13989:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"13995:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13985:3:15"},"nodeType":"YulFunctionCall","src":"13985:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13977:4:15"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"13750:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"13761:4:15","type":""}],"src":"13700:307:15"},{"body":{"nodeType":"YulBlock","src":"14096:340:15","statements":[{"nodeType":"YulAssignment","src":"14106:74:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14172:6:15"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14131:40:15"},"nodeType":"YulFunctionCall","src":"14131:48:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"14115:15:15"},"nodeType":"YulFunctionCall","src":"14115:65:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14106:5:15"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14196:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"14203:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14189:6:15"},"nodeType":"YulFunctionCall","src":"14189:21:15"},"nodeType":"YulExpressionStatement","src":"14189:21:15"},{"nodeType":"YulVariableDeclaration","src":"14219:27:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14234:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"14241:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14230:3:15"},"nodeType":"YulFunctionCall","src":"14230:16:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"14223:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"14284:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"14286:77:15"},"nodeType":"YulFunctionCall","src":"14286:79:15"},"nodeType":"YulExpressionStatement","src":"14286:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14265:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"14270:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14261:3:15"},"nodeType":"YulFunctionCall","src":"14261:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"14279:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14258:2:15"},"nodeType":"YulFunctionCall","src":"14258:25:15"},"nodeType":"YulIf","src":"14255:112:15"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14413:3:15"},{"name":"dst","nodeType":"YulIdentifier","src":"14418:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"14423:6:15"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14376:36:15"},"nodeType":"YulFunctionCall","src":"14376:54:15"},"nodeType":"YulExpressionStatement","src":"14376:54:15"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"14069:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"14074:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"14082:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"14090:5:15","type":""}],"src":"14013:423:15"},{"body":{"nodeType":"YulBlock","src":"14516:277:15","statements":[{"body":{"nodeType":"YulBlock","src":"14565:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"14567:77:15"},"nodeType":"YulFunctionCall","src":"14567:79:15"},"nodeType":"YulExpressionStatement","src":"14567:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14544:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"14552:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14540:3:15"},"nodeType":"YulFunctionCall","src":"14540:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"14559:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14536:3:15"},"nodeType":"YulFunctionCall","src":"14536:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14529:6:15"},"nodeType":"YulFunctionCall","src":"14529:35:15"},"nodeType":"YulIf","src":"14526:122:15"},{"nodeType":"YulVariableDeclaration","src":"14657:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14684:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14671:12:15"},"nodeType":"YulFunctionCall","src":"14671:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14661:6:15","type":""}]},{"nodeType":"YulAssignment","src":"14700:87:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14760:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"14768:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14756:3:15"},"nodeType":"YulFunctionCall","src":"14756:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"14775:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"14783:3:15"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14709:46:15"},"nodeType":"YulFunctionCall","src":"14709:78:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14700:5:15"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14494:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"14502:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"14510:5:15","type":""}],"src":"14455:338:15"},{"body":{"nodeType":"YulBlock","src":"14925:817:15","statements":[{"body":{"nodeType":"YulBlock","src":"14972:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14974:77:15"},"nodeType":"YulFunctionCall","src":"14974:79:15"},"nodeType":"YulExpressionStatement","src":"14974:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14946:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"14955:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14942:3:15"},"nodeType":"YulFunctionCall","src":"14942:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"14967:3:15","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14938:3:15"},"nodeType":"YulFunctionCall","src":"14938:33:15"},"nodeType":"YulIf","src":"14935:120:15"},{"nodeType":"YulBlock","src":"15065:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15080:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"15094:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15084:6:15","type":""}]},{"nodeType":"YulAssignment","src":"15109:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15144:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"15155:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15140:3:15"},"nodeType":"YulFunctionCall","src":"15140:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15164:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15119:20:15"},"nodeType":"YulFunctionCall","src":"15119:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15109:6:15"}]}]},{"nodeType":"YulBlock","src":"15192:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15207:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"15221:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15211:6:15","type":""}]},{"nodeType":"YulAssignment","src":"15237:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15272:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"15283:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15268:3:15"},"nodeType":"YulFunctionCall","src":"15268:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15292:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15247:20:15"},"nodeType":"YulFunctionCall","src":"15247:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15237:6:15"}]}]},{"nodeType":"YulBlock","src":"15320:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15335:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"15349:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15339:6:15","type":""}]},{"nodeType":"YulAssignment","src":"15365:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15400:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"15411:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15396:3:15"},"nodeType":"YulFunctionCall","src":"15396:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15420:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"15375:20:15"},"nodeType":"YulFunctionCall","src":"15375:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15365:6:15"}]}]},{"nodeType":"YulBlock","src":"15448:287:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15463:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15494:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15505:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15490:3:15"},"nodeType":"YulFunctionCall","src":"15490:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15477:12:15"},"nodeType":"YulFunctionCall","src":"15477:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15467:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"15556:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"15558:77:15"},"nodeType":"YulFunctionCall","src":"15558:79:15"},"nodeType":"YulExpressionStatement","src":"15558:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15528:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"15536:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15525:2:15"},"nodeType":"YulFunctionCall","src":"15525:30:15"},"nodeType":"YulIf","src":"15522:117:15"},{"nodeType":"YulAssignment","src":"15653:72:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15697:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"15708:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15693:3:15"},"nodeType":"YulFunctionCall","src":"15693:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15717:7:15"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15663:29:15"},"nodeType":"YulFunctionCall","src":"15663:62:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15653:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14871:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14882:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14894:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14902:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14910:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14918:6:15","type":""}],"src":"14799:943:15"},{"body":{"nodeType":"YulBlock","src":"15922:359:15","statements":[{"nodeType":"YulAssignment","src":"15932:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15944:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15955:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15940:3:15"},"nodeType":"YulFunctionCall","src":"15940:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15932:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16012:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16025:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16036:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16021:3:15"},"nodeType":"YulFunctionCall","src":"16021:17:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"15968:43:15"},"nodeType":"YulFunctionCall","src":"15968:71:15"},"nodeType":"YulExpressionStatement","src":"15968:71:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16060:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16071:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16056:3:15"},"nodeType":"YulFunctionCall","src":"16056:18:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16080:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"16086:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16076:3:15"},"nodeType":"YulFunctionCall","src":"16076:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16049:6:15"},"nodeType":"YulFunctionCall","src":"16049:48:15"},"nodeType":"YulExpressionStatement","src":"16049:48:15"},{"nodeType":"YulAssignment","src":"16106:86:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16178:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"16187:4:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16114:63:15"},"nodeType":"YulFunctionCall","src":"16114:78:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16106:4:15"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16246:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16259:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16270:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16255:3:15"},"nodeType":"YulFunctionCall","src":"16255:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16202:43:15"},"nodeType":"YulFunctionCall","src":"16202:72:15"},"nodeType":"YulExpressionStatement","src":"16202:72:15"}]},"name":"abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15878:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15890:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15898:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15906:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15917:4:15","type":""}],"src":"15748:533:15"},{"body":{"nodeType":"YulBlock","src":"16361:40:15","statements":[{"nodeType":"YulAssignment","src":"16372:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16388:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16382:5:15"},"nodeType":"YulFunctionCall","src":"16382:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16372:6:15"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16344:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16354:6:15","type":""}],"src":"16287:114:15"},{"body":{"nodeType":"YulBlock","src":"16508:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16525:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"16530:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16518:6:15"},"nodeType":"YulFunctionCall","src":"16518:19:15"},"nodeType":"YulExpressionStatement","src":"16518:19:15"},{"nodeType":"YulAssignment","src":"16546:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16565:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"16570:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16561:3:15"},"nodeType":"YulFunctionCall","src":"16561:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16546:11:15"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16480:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"16485:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16496:11:15","type":""}],"src":"16407:174:15"},{"body":{"nodeType":"YulBlock","src":"16659:60:15","statements":[{"nodeType":"YulAssignment","src":"16669:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"16677:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"16669:4:15"}]},{"nodeType":"YulAssignment","src":"16690:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"16702:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"16707:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16698:3:15"},"nodeType":"YulFunctionCall","src":"16698:14:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"16690:4:15"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"16646:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"16654:4:15","type":""}],"src":"16587:132:15"},{"body":{"nodeType":"YulBlock","src":"16805:99:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16849:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"16857:3:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"16815:33:15"},"nodeType":"YulFunctionCall","src":"16815:46:15"},"nodeType":"YulExpressionStatement","src":"16815:46:15"},{"nodeType":"YulAssignment","src":"16870:28:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16888:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"16893:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16884:3:15"},"nodeType":"YulFunctionCall","src":"16884:14:15"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"16870:10:15"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"16778:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16786:3:15","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"16794:10:15","type":""}],"src":"16725:179:15"},{"body":{"nodeType":"YulBlock","src":"16985:38:15","statements":[{"nodeType":"YulAssignment","src":"16995:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"17007:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17012:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17003:3:15"},"nodeType":"YulFunctionCall","src":"17003:14:15"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"16995:4:15"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"16972:3:15","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"16980:4:15","type":""}],"src":"16910:113:15"},{"body":{"nodeType":"YulBlock","src":"17173:598:15","statements":[{"nodeType":"YulVariableDeclaration","src":"17183:68:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17245:5:15"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"17197:47:15"},"nodeType":"YulFunctionCall","src":"17197:54:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17187:6:15","type":""}]},{"nodeType":"YulAssignment","src":"17260:83:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17331:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17336:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"17267:63:15"},"nodeType":"YulFunctionCall","src":"17267:76:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17260:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"17352:71:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17417:5:15"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"17367:49:15"},"nodeType":"YulFunctionCall","src":"17367:56:15"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"17356:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17432:21:15","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"17446:7:15"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"17436:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"17522:224:15","statements":[{"nodeType":"YulVariableDeclaration","src":"17536:34:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"17563:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17557:5:15"},"nodeType":"YulFunctionCall","src":"17557:13:15"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"17540:13:15","type":""}]},{"nodeType":"YulAssignment","src":"17583:70:15","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"17634:13:15"},{"name":"pos","nodeType":"YulIdentifier","src":"17649:3:15"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"17590:43:15"},"nodeType":"YulFunctionCall","src":"17590:63:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17583:3:15"}]},{"nodeType":"YulAssignment","src":"17666:70:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"17729:6:15"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"17676:52:15"},"nodeType":"YulFunctionCall","src":"17676:60:15"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"17666:6:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17484:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"17487:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17481:2:15"},"nodeType":"YulFunctionCall","src":"17481:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17495:18:15","statements":[{"nodeType":"YulAssignment","src":"17497:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17506:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"17509:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17502:3:15"},"nodeType":"YulFunctionCall","src":"17502:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"17497:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"17466:14:15","statements":[{"nodeType":"YulVariableDeclaration","src":"17468:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"17477:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"17472:1:15","type":""}]}]},"src":"17462:284:15"},{"nodeType":"YulAssignment","src":"17755:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"17762:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17755:3:15"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17152:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17159:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17168:3:15","type":""}],"src":"17059:712:15"},{"body":{"nodeType":"YulBlock","src":"17959:866:15","statements":[{"nodeType":"YulVariableDeclaration","src":"17969:26:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17985:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17990:4:15","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17981:3:15"},"nodeType":"YulFunctionCall","src":"17981:14:15"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"17973:4:15","type":""}]},{"nodeType":"YulBlock","src":"18005:165:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18041:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18071:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18078:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18067:3:15"},"nodeType":"YulFunctionCall","src":"18067:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18061:5:15"},"nodeType":"YulFunctionCall","src":"18061:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18045:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18131:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18149:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18154:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18145:3:15"},"nodeType":"YulFunctionCall","src":"18145:14:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"18097:33:15"},"nodeType":"YulFunctionCall","src":"18097:63:15"},"nodeType":"YulExpressionStatement","src":"18097:63:15"}]},{"nodeType":"YulBlock","src":"18180:167:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18218:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18248:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18255:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18244:3:15"},"nodeType":"YulFunctionCall","src":"18244:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18238:5:15"},"nodeType":"YulFunctionCall","src":"18238:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18222:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18308:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18326:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18331:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18322:3:15"},"nodeType":"YulFunctionCall","src":"18322:14:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"18274:33:15"},"nodeType":"YulFunctionCall","src":"18274:63:15"},"nodeType":"YulExpressionStatement","src":"18274:63:15"}]},{"nodeType":"YulBlock","src":"18357:165:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18393:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18423:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18430:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18419:3:15"},"nodeType":"YulFunctionCall","src":"18419:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18413:5:15"},"nodeType":"YulFunctionCall","src":"18413:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18397:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18483:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18501:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18506:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18497:3:15"},"nodeType":"YulFunctionCall","src":"18497:14:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"18449:33:15"},"nodeType":"YulFunctionCall","src":"18449:63:15"},"nodeType":"YulExpressionStatement","src":"18449:63:15"}]},{"nodeType":"YulBlock","src":"18532:266:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18568:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18598:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18605:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18594:3:15"},"nodeType":"YulFunctionCall","src":"18594:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18588:5:15"},"nodeType":"YulFunctionCall","src":"18588:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18572:12:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18636:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18641:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18632:3:15"},"nodeType":"YulFunctionCall","src":"18632:14:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18652:4:15"},{"name":"pos","nodeType":"YulIdentifier","src":"18658:3:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18648:3:15"},"nodeType":"YulFunctionCall","src":"18648:14:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18625:6:15"},"nodeType":"YulFunctionCall","src":"18625:38:15"},"nodeType":"YulExpressionStatement","src":"18625:38:15"},{"nodeType":"YulAssignment","src":"18676:111:15","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18768:12:15"},{"name":"tail","nodeType":"YulIdentifier","src":"18782:4:15"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"18684:83:15"},"nodeType":"YulFunctionCall","src":"18684:103:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18676:4:15"}]}]},{"nodeType":"YulAssignment","src":"18808:11:15","value":{"name":"tail","nodeType":"YulIdentifier","src":"18815:4:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18808:3:15"}]}]},"name":"abi_encode_t_struct$_Player_$3038_memory_ptr_to_t_struct$_Player_$3038_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17938:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17945:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17954:3:15","type":""}],"src":"17837:988:15"},{"body":{"nodeType":"YulBlock","src":"18977:223:15","statements":[{"nodeType":"YulAssignment","src":"18987:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18999:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19010:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18995:3:15"},"nodeType":"YulFunctionCall","src":"18995:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18987:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19034:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19045:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19030:3:15"},"nodeType":"YulFunctionCall","src":"19030:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19053:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"19059:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19049:3:15"},"nodeType":"YulFunctionCall","src":"19049:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19023:6:15"},"nodeType":"YulFunctionCall","src":"19023:47:15"},"nodeType":"YulExpressionStatement","src":"19023:47:15"},{"nodeType":"YulAssignment","src":"19079:114:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19179:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"19188:4:15"}],"functionName":{"name":"abi_encode_t_struct$_Player_$3038_memory_ptr_to_t_struct$_Player_$3038_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19087:91:15"},"nodeType":"YulFunctionCall","src":"19087:106:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19079:4:15"}]}]},"name":"abi_encode_tuple_t_struct$_Player_$3038_memory_ptr__to_t_struct$_Player_$3038_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18949:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18961:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18972:4:15","type":""}],"src":"18831:369:15"},{"body":{"nodeType":"YulBlock","src":"19360:288:15","statements":[{"nodeType":"YulAssignment","src":"19370:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19382:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19393:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19378:3:15"},"nodeType":"YulFunctionCall","src":"19378:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19370:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19450:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19463:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19474:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19459:3:15"},"nodeType":"YulFunctionCall","src":"19459:17:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19406:43:15"},"nodeType":"YulFunctionCall","src":"19406:71:15"},"nodeType":"YulExpressionStatement","src":"19406:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19531:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19544:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19555:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19540:3:15"},"nodeType":"YulFunctionCall","src":"19540:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19487:43:15"},"nodeType":"YulFunctionCall","src":"19487:72:15"},"nodeType":"YulExpressionStatement","src":"19487:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19613:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19626:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19637:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19622:3:15"},"nodeType":"YulFunctionCall","src":"19622:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19569:43:15"},"nodeType":"YulFunctionCall","src":"19569:72:15"},"nodeType":"YulExpressionStatement","src":"19569:72:15"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19316:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19328:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19336:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19344:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19355:4:15","type":""}],"src":"19206:442:15"},{"body":{"nodeType":"YulBlock","src":"19737:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"19783:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19785:77:15"},"nodeType":"YulFunctionCall","src":"19785:79:15"},"nodeType":"YulExpressionStatement","src":"19785:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19758:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"19767:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19754:3:15"},"nodeType":"YulFunctionCall","src":"19754:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"19779:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19750:3:15"},"nodeType":"YulFunctionCall","src":"19750:32:15"},"nodeType":"YulIf","src":"19747:119:15"},{"nodeType":"YulBlock","src":"19876:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19891:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"19905:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19895:6:15","type":""}]},{"nodeType":"YulAssignment","src":"19920:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19955:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"19966:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19951:3:15"},"nodeType":"YulFunctionCall","src":"19951:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19975:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19930:20:15"},"nodeType":"YulFunctionCall","src":"19930:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19920:6:15"}]}]},{"nodeType":"YulBlock","src":"20003:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"20018:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"20032:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20022:6:15","type":""}]},{"nodeType":"YulAssignment","src":"20048:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20083:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"20094:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20079:3:15"},"nodeType":"YulFunctionCall","src":"20079:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20103:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20058:20:15"},"nodeType":"YulFunctionCall","src":"20058:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20048:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19699:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19710:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19722:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19730:6:15","type":""}],"src":"19654:474:15"},{"body":{"nodeType":"YulBlock","src":"20166:28:15","statements":[{"nodeType":"YulAssignment","src":"20176:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"20183:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20176:3:15"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20152:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"20162:3:15","type":""}],"src":"20134:60:15"},{"body":{"nodeType":"YulBlock","src":"20260:82:15","statements":[{"nodeType":"YulAssignment","src":"20270:66:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20328:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"20310:17:15"},"nodeType":"YulFunctionCall","src":"20310:24:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"20301:8:15"},"nodeType":"YulFunctionCall","src":"20301:34:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"20283:17:15"},"nodeType":"YulFunctionCall","src":"20283:53:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"20270:9:15"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20240:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"20250:9:15","type":""}],"src":"20200:142:15"},{"body":{"nodeType":"YulBlock","src":"20408:66:15","statements":[{"nodeType":"YulAssignment","src":"20418:50:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20462:5:15"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"20431:30:15"},"nodeType":"YulFunctionCall","src":"20431:37:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"20418:9:15"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20388:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"20398:9:15","type":""}],"src":"20348:126:15"},{"body":{"nodeType":"YulBlock","src":"20554:66:15","statements":[{"nodeType":"YulAssignment","src":"20564:50:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20608:5:15"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"20577:30:15"},"nodeType":"YulFunctionCall","src":"20577:37:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"20564:9:15"}]}]},"name":"convert_t_contract$_IERC20_$362_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20534:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"20544:9:15","type":""}],"src":"20480:140:15"},{"body":{"nodeType":"YulBlock","src":"20705:80:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20722:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20772:5:15"}],"functionName":{"name":"convert_t_contract$_IERC20_$362_to_t_address","nodeType":"YulIdentifier","src":"20727:44:15"},"nodeType":"YulFunctionCall","src":"20727:51:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20715:6:15"},"nodeType":"YulFunctionCall","src":"20715:64:15"},"nodeType":"YulExpressionStatement","src":"20715:64:15"}]},"name":"abi_encode_t_contract$_IERC20_$362_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20693:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20700:3:15","type":""}],"src":"20626:159:15"},{"body":{"nodeType":"YulBlock","src":"20903:138:15","statements":[{"nodeType":"YulAssignment","src":"20913:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20925:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20936:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20921:3:15"},"nodeType":"YulFunctionCall","src":"20921:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20913:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21007:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21020:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21031:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21016:3:15"},"nodeType":"YulFunctionCall","src":"21016:17:15"}],"functionName":{"name":"abi_encode_t_contract$_IERC20_$362_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20949:57:15"},"nodeType":"YulFunctionCall","src":"20949:85:15"},"nodeType":"YulExpressionStatement","src":"20949:85:15"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$362__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20875:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20887:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20898:4:15","type":""}],"src":"20791:250:15"},{"body":{"nodeType":"YulBlock","src":"21075:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21092:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21095:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21085:6:15"},"nodeType":"YulFunctionCall","src":"21085:88:15"},"nodeType":"YulExpressionStatement","src":"21085:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21189:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21192:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21182:6:15"},"nodeType":"YulFunctionCall","src":"21182:15:15"},"nodeType":"YulExpressionStatement","src":"21182:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21213:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21216:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21206:6:15"},"nodeType":"YulFunctionCall","src":"21206:15:15"},"nodeType":"YulExpressionStatement","src":"21206:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"21047:180:15"},{"body":{"nodeType":"YulBlock","src":"21284:269:15","statements":[{"nodeType":"YulAssignment","src":"21294:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"21308:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"21314:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"21304:3:15"},"nodeType":"YulFunctionCall","src":"21304:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21294:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"21325:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"21355:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"21361:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21351:3:15"},"nodeType":"YulFunctionCall","src":"21351:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"21329:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"21402:51:15","statements":[{"nodeType":"YulAssignment","src":"21416:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21430:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21438:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21426:3:15"},"nodeType":"YulFunctionCall","src":"21426:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21416:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"21382:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21375:6:15"},"nodeType":"YulFunctionCall","src":"21375:26:15"},"nodeType":"YulIf","src":"21372:81:15"},{"body":{"nodeType":"YulBlock","src":"21505:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"21519:16:15"},"nodeType":"YulFunctionCall","src":"21519:18:15"},"nodeType":"YulExpressionStatement","src":"21519:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"21469:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21492:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21500:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21489:2:15"},"nodeType":"YulFunctionCall","src":"21489:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21466:2:15"},"nodeType":"YulFunctionCall","src":"21466:38:15"},"nodeType":"YulIf","src":"21463:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"21268:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21277:6:15","type":""}],"src":"21233:320:15"},{"body":{"nodeType":"YulBlock","src":"21685:206:15","statements":[{"nodeType":"YulAssignment","src":"21695:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21707:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21718:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21703:3:15"},"nodeType":"YulFunctionCall","src":"21703:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21695:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21775:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21788:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21799:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21784:3:15"},"nodeType":"YulFunctionCall","src":"21784:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"21731:43:15"},"nodeType":"YulFunctionCall","src":"21731:71:15"},"nodeType":"YulExpressionStatement","src":"21731:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21856:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21869:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21880:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21865:3:15"},"nodeType":"YulFunctionCall","src":"21865:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21812:43:15"},"nodeType":"YulFunctionCall","src":"21812:72:15"},"nodeType":"YulExpressionStatement","src":"21812:72:15"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21649:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21661:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21669:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21680:4:15","type":""}],"src":"21559:332:15"},{"body":{"nodeType":"YulBlock","src":"21957:77:15","statements":[{"nodeType":"YulAssignment","src":"21967:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21982:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21976:5:15"},"nodeType":"YulFunctionCall","src":"21976:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"21967:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22022:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"21998:23:15"},"nodeType":"YulFunctionCall","src":"21998:30:15"},"nodeType":"YulExpressionStatement","src":"21998:30:15"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"21935:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"21943:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"21951:5:15","type":""}],"src":"21897:137:15"},{"body":{"nodeType":"YulBlock","src":"22114:271:15","statements":[{"body":{"nodeType":"YulBlock","src":"22160:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22162:77:15"},"nodeType":"YulFunctionCall","src":"22162:79:15"},"nodeType":"YulExpressionStatement","src":"22162:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22135:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"22144:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22131:3:15"},"nodeType":"YulFunctionCall","src":"22131:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"22156:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22127:3:15"},"nodeType":"YulFunctionCall","src":"22127:32:15"},"nodeType":"YulIf","src":"22124:119:15"},{"nodeType":"YulBlock","src":"22253:125:15","statements":[{"nodeType":"YulVariableDeclaration","src":"22268:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"22282:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22272:6:15","type":""}]},{"nodeType":"YulAssignment","src":"22297:71:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22340:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"22351:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22336:3:15"},"nodeType":"YulFunctionCall","src":"22336:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22360:7:15"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"22307:28:15"},"nodeType":"YulFunctionCall","src":"22307:61:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22297:6:15"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22084:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22095:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22107:6:15","type":""}],"src":"22040:345:15"},{"body":{"nodeType":"YulBlock","src":"22497:58:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22519:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22527:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22515:3:15"},"nodeType":"YulFunctionCall","src":"22515:14:15"},{"hexValue":"41697264726f70206661696c6564","kind":"string","nodeType":"YulLiteral","src":"22531:16:15","type":"","value":"Airdrop failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22508:6:15"},"nodeType":"YulFunctionCall","src":"22508:40:15"},"nodeType":"YulExpressionStatement","src":"22508:40:15"}]},"name":"store_literal_in_memory_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22489:6:15","type":""}],"src":"22391:164:15"},{"body":{"nodeType":"YulBlock","src":"22707:220:15","statements":[{"nodeType":"YulAssignment","src":"22717:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22783:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"22788:2:15","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22724:58:15"},"nodeType":"YulFunctionCall","src":"22724:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22717:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22889:3:15"}],"functionName":{"name":"store_literal_in_memory_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f","nodeType":"YulIdentifier","src":"22800:88:15"},"nodeType":"YulFunctionCall","src":"22800:93:15"},"nodeType":"YulExpressionStatement","src":"22800:93:15"},{"nodeType":"YulAssignment","src":"22902:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22913:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"22918:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22909:3:15"},"nodeType":"YulFunctionCall","src":"22909:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22902:3:15"}]}]},"name":"abi_encode_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22695:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22703:3:15","type":""}],"src":"22561:366:15"},{"body":{"nodeType":"YulBlock","src":"23104:248:15","statements":[{"nodeType":"YulAssignment","src":"23114:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23126:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23137:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23122:3:15"},"nodeType":"YulFunctionCall","src":"23122:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23114:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23161:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23172:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23157:3:15"},"nodeType":"YulFunctionCall","src":"23157:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23180:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"23186:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23176:3:15"},"nodeType":"YulFunctionCall","src":"23176:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23150:6:15"},"nodeType":"YulFunctionCall","src":"23150:47:15"},"nodeType":"YulExpressionStatement","src":"23150:47:15"},{"nodeType":"YulAssignment","src":"23206:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23340:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23214:124:15"},"nodeType":"YulFunctionCall","src":"23214:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23206:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23084:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23099:4:15","type":""}],"src":"22933:419:15"},{"body":{"nodeType":"YulBlock","src":"23512:288:15","statements":[{"nodeType":"YulAssignment","src":"23522:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23534:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23545:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23530:3:15"},"nodeType":"YulFunctionCall","src":"23530:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23522:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23602:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23615:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23626:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23611:3:15"},"nodeType":"YulFunctionCall","src":"23611:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23558:43:15"},"nodeType":"YulFunctionCall","src":"23558:71:15"},"nodeType":"YulExpressionStatement","src":"23558:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23683:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23696:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23707:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23692:3:15"},"nodeType":"YulFunctionCall","src":"23692:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23639:43:15"},"nodeType":"YulFunctionCall","src":"23639:72:15"},"nodeType":"YulExpressionStatement","src":"23639:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23765:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23778:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23789:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23774:3:15"},"nodeType":"YulFunctionCall","src":"23774:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23721:43:15"},"nodeType":"YulFunctionCall","src":"23721:72:15"},"nodeType":"YulExpressionStatement","src":"23721:72:15"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23468:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23480:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23488:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23496:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23507:4:15","type":""}],"src":"23358:442:15"},{"body":{"nodeType":"YulBlock","src":"23912:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23934:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23942:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23930:3:15"},"nodeType":"YulFunctionCall","src":"23930:14:15"},{"hexValue":"4e6f207265776172647320746f20636c61696d","kind":"string","nodeType":"YulLiteral","src":"23946:21:15","type":"","value":"No rewards to claim"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23923:6:15"},"nodeType":"YulFunctionCall","src":"23923:45:15"},"nodeType":"YulExpressionStatement","src":"23923:45:15"}]},"name":"store_literal_in_memory_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23904:6:15","type":""}],"src":"23806:169:15"},{"body":{"nodeType":"YulBlock","src":"24127:220:15","statements":[{"nodeType":"YulAssignment","src":"24137:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24203:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"24208:2:15","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24144:58:15"},"nodeType":"YulFunctionCall","src":"24144:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24137:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24309:3:15"}],"functionName":{"name":"store_literal_in_memory_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d","nodeType":"YulIdentifier","src":"24220:88:15"},"nodeType":"YulFunctionCall","src":"24220:93:15"},"nodeType":"YulExpressionStatement","src":"24220:93:15"},{"nodeType":"YulAssignment","src":"24322:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24333:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"24338:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24329:3:15"},"nodeType":"YulFunctionCall","src":"24329:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24322:3:15"}]}]},"name":"abi_encode_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24115:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24123:3:15","type":""}],"src":"23981:366:15"},{"body":{"nodeType":"YulBlock","src":"24524:248:15","statements":[{"nodeType":"YulAssignment","src":"24534:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24546:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24557:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24542:3:15"},"nodeType":"YulFunctionCall","src":"24542:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24534:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24581:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24592:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24577:3:15"},"nodeType":"YulFunctionCall","src":"24577:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24600:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"24606:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24596:3:15"},"nodeType":"YulFunctionCall","src":"24596:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24570:6:15"},"nodeType":"YulFunctionCall","src":"24570:47:15"},"nodeType":"YulExpressionStatement","src":"24570:47:15"},{"nodeType":"YulAssignment","src":"24626:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24760:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24634:124:15"},"nodeType":"YulFunctionCall","src":"24634:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24626:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24504:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24519:4:15","type":""}],"src":"24353:419:15"},{"body":{"nodeType":"YulBlock","src":"24884:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24906:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"24914:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24902:3:15"},"nodeType":"YulFunctionCall","src":"24902:14:15"},{"hexValue":"526577617264207472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"24918:24:15","type":"","value":"Reward transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24895:6:15"},"nodeType":"YulFunctionCall","src":"24895:48:15"},"nodeType":"YulExpressionStatement","src":"24895:48:15"}]},"name":"store_literal_in_memory_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24876:6:15","type":""}],"src":"24778:172:15"},{"body":{"nodeType":"YulBlock","src":"25102:220:15","statements":[{"nodeType":"YulAssignment","src":"25112:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25178:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"25183:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25119:58:15"},"nodeType":"YulFunctionCall","src":"25119:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25112:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25284:3:15"}],"functionName":{"name":"store_literal_in_memory_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce","nodeType":"YulIdentifier","src":"25195:88:15"},"nodeType":"YulFunctionCall","src":"25195:93:15"},"nodeType":"YulExpressionStatement","src":"25195:93:15"},{"nodeType":"YulAssignment","src":"25297:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25308:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"25313:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25304:3:15"},"nodeType":"YulFunctionCall","src":"25304:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25297:3:15"}]}]},"name":"abi_encode_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25090:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25098:3:15","type":""}],"src":"24956:366:15"},{"body":{"nodeType":"YulBlock","src":"25499:248:15","statements":[{"nodeType":"YulAssignment","src":"25509:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25521:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25532:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25517:3:15"},"nodeType":"YulFunctionCall","src":"25517:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25509:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25556:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25567:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25552:3:15"},"nodeType":"YulFunctionCall","src":"25552:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25575:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"25581:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25571:3:15"},"nodeType":"YulFunctionCall","src":"25571:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25545:6:15"},"nodeType":"YulFunctionCall","src":"25545:47:15"},"nodeType":"YulExpressionStatement","src":"25545:47:15"},{"nodeType":"YulAssignment","src":"25601:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25735:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25609:124:15"},"nodeType":"YulFunctionCall","src":"25609:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25601:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25479:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25494:4:15","type":""}],"src":"25328:419:15"},{"body":{"nodeType":"YulBlock","src":"25781:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25798:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25801:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25791:6:15"},"nodeType":"YulFunctionCall","src":"25791:88:15"},"nodeType":"YulExpressionStatement","src":"25791:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25895:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25898:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25888:6:15"},"nodeType":"YulFunctionCall","src":"25888:15:15"},"nodeType":"YulExpressionStatement","src":"25888:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25919:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25922:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25912:6:15"},"nodeType":"YulFunctionCall","src":"25912:15:15"},"nodeType":"YulExpressionStatement","src":"25912:15:15"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"25753:180:15"},{"body":{"nodeType":"YulBlock","src":"25967:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25984:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25987:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25977:6:15"},"nodeType":"YulFunctionCall","src":"25977:88:15"},"nodeType":"YulExpressionStatement","src":"25977:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26081:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"26084:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26074:6:15"},"nodeType":"YulFunctionCall","src":"26074:15:15"},"nodeType":"YulExpressionStatement","src":"26074:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26105:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26108:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26098:6:15"},"nodeType":"YulFunctionCall","src":"26098:15:15"},"nodeType":"YulExpressionStatement","src":"26098:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"25939:180:15"},{"body":{"nodeType":"YulBlock","src":"26168:190:15","statements":[{"nodeType":"YulAssignment","src":"26178:33:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26205:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26187:17:15"},"nodeType":"YulFunctionCall","src":"26187:24:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26178:5:15"}]},{"body":{"nodeType":"YulBlock","src":"26301:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26303:16:15"},"nodeType":"YulFunctionCall","src":"26303:18:15"},"nodeType":"YulExpressionStatement","src":"26303:18:15"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26226:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"26233:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26223:2:15"},"nodeType":"YulFunctionCall","src":"26223:77:15"},"nodeType":"YulIf","src":"26220:103:15"},{"nodeType":"YulAssignment","src":"26332:20:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26343:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"26350:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26339:3:15"},"nodeType":"YulFunctionCall","src":"26339:13:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26332:3:15"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26154:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"26164:3:15","type":""}],"src":"26125:233:15"},{"body":{"nodeType":"YulBlock","src":"26427:80:15","statements":[{"nodeType":"YulAssignment","src":"26437:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26452:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26446:5:15"},"nodeType":"YulFunctionCall","src":"26446:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26437:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26495:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"26468:26:15"},"nodeType":"YulFunctionCall","src":"26468:33:15"},"nodeType":"YulExpressionStatement","src":"26468:33:15"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"26405:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"26413:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"26421:5:15","type":""}],"src":"26364:143:15"},{"body":{"nodeType":"YulBlock","src":"26590:274:15","statements":[{"body":{"nodeType":"YulBlock","src":"26636:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"26638:77:15"},"nodeType":"YulFunctionCall","src":"26638:79:15"},"nodeType":"YulExpressionStatement","src":"26638:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26611:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"26620:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26607:3:15"},"nodeType":"YulFunctionCall","src":"26607:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"26632:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26603:3:15"},"nodeType":"YulFunctionCall","src":"26603:32:15"},"nodeType":"YulIf","src":"26600:119:15"},{"nodeType":"YulBlock","src":"26729:128:15","statements":[{"nodeType":"YulVariableDeclaration","src":"26744:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"26758:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"26748:6:15","type":""}]},{"nodeType":"YulAssignment","src":"26773:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26819:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"26830:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26815:3:15"},"nodeType":"YulFunctionCall","src":"26815:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"26839:7:15"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"26783:31:15"},"nodeType":"YulFunctionCall","src":"26783:64:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"26773:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26560:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26571:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26583:6:15","type":""}],"src":"26513:351:15"},{"body":{"nodeType":"YulBlock","src":"26976:71:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26998:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"27006:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26994:3:15"},"nodeType":"YulFunctionCall","src":"26994:14:15"},{"hexValue":"496e73756666696369656e7420746f6b656e7320746f20706c6179","kind":"string","nodeType":"YulLiteral","src":"27010:29:15","type":"","value":"Insufficient tokens to play"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26987:6:15"},"nodeType":"YulFunctionCall","src":"26987:53:15"},"nodeType":"YulExpressionStatement","src":"26987:53:15"}]},"name":"store_literal_in_memory_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26968:6:15","type":""}],"src":"26870:177:15"},{"body":{"nodeType":"YulBlock","src":"27199:220:15","statements":[{"nodeType":"YulAssignment","src":"27209:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27275:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"27280:2:15","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27216:58:15"},"nodeType":"YulFunctionCall","src":"27216:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27209:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27381:3:15"}],"functionName":{"name":"store_literal_in_memory_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536","nodeType":"YulIdentifier","src":"27292:88:15"},"nodeType":"YulFunctionCall","src":"27292:93:15"},"nodeType":"YulExpressionStatement","src":"27292:93:15"},{"nodeType":"YulAssignment","src":"27394:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27405:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"27410:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27401:3:15"},"nodeType":"YulFunctionCall","src":"27401:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27394:3:15"}]}]},"name":"abi_encode_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27187:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27195:3:15","type":""}],"src":"27053:366:15"},{"body":{"nodeType":"YulBlock","src":"27596:248:15","statements":[{"nodeType":"YulAssignment","src":"27606:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27618:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27629:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27614:3:15"},"nodeType":"YulFunctionCall","src":"27614:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27606:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27653:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27664:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27649:3:15"},"nodeType":"YulFunctionCall","src":"27649:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27672:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"27678:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27668:3:15"},"nodeType":"YulFunctionCall","src":"27668:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27642:6:15"},"nodeType":"YulFunctionCall","src":"27642:47:15"},"nodeType":"YulExpressionStatement","src":"27642:47:15"},{"nodeType":"YulAssignment","src":"27698:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27832:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27706:124:15"},"nodeType":"YulFunctionCall","src":"27706:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27698:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27576:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27591:4:15","type":""}],"src":"27425:419:15"},{"body":{"nodeType":"YulBlock","src":"28004:288:15","statements":[{"nodeType":"YulAssignment","src":"28014:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28026:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28037:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28022:3:15"},"nodeType":"YulFunctionCall","src":"28022:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28014:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28094:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28107:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28118:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28103:3:15"},"nodeType":"YulFunctionCall","src":"28103:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28050:43:15"},"nodeType":"YulFunctionCall","src":"28050:71:15"},"nodeType":"YulExpressionStatement","src":"28050:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28175:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28188:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28199:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28184:3:15"},"nodeType":"YulFunctionCall","src":"28184:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28131:43:15"},"nodeType":"YulFunctionCall","src":"28131:72:15"},"nodeType":"YulExpressionStatement","src":"28131:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"28257:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28270:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28281:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28266:3:15"},"nodeType":"YulFunctionCall","src":"28266:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28213:43:15"},"nodeType":"YulFunctionCall","src":"28213:72:15"},"nodeType":"YulExpressionStatement","src":"28213:72:15"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27960:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27972:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27980:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27988:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27999:4:15","type":""}],"src":"27850:442:15"},{"body":{"nodeType":"YulBlock","src":"28404:65:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28426:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"28434:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28422:3:15"},"nodeType":"YulFunctionCall","src":"28422:14:15"},{"hexValue":"546f6b656e207472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"28438:23:15","type":"","value":"Token transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28415:6:15"},"nodeType":"YulFunctionCall","src":"28415:47:15"},"nodeType":"YulExpressionStatement","src":"28415:47:15"}]},"name":"store_literal_in_memory_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28396:6:15","type":""}],"src":"28298:171:15"},{"body":{"nodeType":"YulBlock","src":"28621:220:15","statements":[{"nodeType":"YulAssignment","src":"28631:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28697:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"28702:2:15","type":"","value":"21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28638:58:15"},"nodeType":"YulFunctionCall","src":"28638:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28631:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28803:3:15"}],"functionName":{"name":"store_literal_in_memory_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","nodeType":"YulIdentifier","src":"28714:88:15"},"nodeType":"YulFunctionCall","src":"28714:93:15"},"nodeType":"YulExpressionStatement","src":"28714:93:15"},{"nodeType":"YulAssignment","src":"28816:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28827:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"28832:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28823:3:15"},"nodeType":"YulFunctionCall","src":"28823:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28816:3:15"}]}]},"name":"abi_encode_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28609:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28617:3:15","type":""}],"src":"28475:366:15"},{"body":{"nodeType":"YulBlock","src":"29018:248:15","statements":[{"nodeType":"YulAssignment","src":"29028:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29040:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29051:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29036:3:15"},"nodeType":"YulFunctionCall","src":"29036:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29028:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29075:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29086:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29071:3:15"},"nodeType":"YulFunctionCall","src":"29071:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29094:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"29100:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29090:3:15"},"nodeType":"YulFunctionCall","src":"29090:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29064:6:15"},"nodeType":"YulFunctionCall","src":"29064:47:15"},"nodeType":"YulExpressionStatement","src":"29064:47:15"},{"nodeType":"YulAssignment","src":"29120:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29254:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29128:124:15"},"nodeType":"YulFunctionCall","src":"29128:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29120:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28998:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29013:4:15","type":""}],"src":"28847:419:15"},{"body":{"nodeType":"YulBlock","src":"29316:147:15","statements":[{"nodeType":"YulAssignment","src":"29326:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29349:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29331:17:15"},"nodeType":"YulFunctionCall","src":"29331:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"29326:1:15"}]},{"nodeType":"YulAssignment","src":"29360:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"29383:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29365:17:15"},"nodeType":"YulFunctionCall","src":"29365:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"29360:1:15"}]},{"nodeType":"YulAssignment","src":"29394:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29405:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"29408:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29401:3:15"},"nodeType":"YulFunctionCall","src":"29401:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"29394:3:15"}]},{"body":{"nodeType":"YulBlock","src":"29434:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"29436:16:15"},"nodeType":"YulFunctionCall","src":"29436:18:15"},"nodeType":"YulExpressionStatement","src":"29436:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29426:1:15"},{"name":"sum","nodeType":"YulIdentifier","src":"29429:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"29423:2:15"},"nodeType":"YulFunctionCall","src":"29423:10:15"},"nodeType":"YulIf","src":"29420:36:15"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"29303:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"29306:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"29312:3:15","type":""}],"src":"29272:191:15"},{"body":{"nodeType":"YulBlock","src":"29497:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29514:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29517:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29507:6:15"},"nodeType":"YulFunctionCall","src":"29507:88:15"},"nodeType":"YulExpressionStatement","src":"29507:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29611:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"29614:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29604:6:15"},"nodeType":"YulFunctionCall","src":"29604:15:15"},"nodeType":"YulExpressionStatement","src":"29604:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29635:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29638:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29628:6:15"},"nodeType":"YulFunctionCall","src":"29628:15:15"},"nodeType":"YulExpressionStatement","src":"29628:15:15"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"29469:180:15"},{"body":{"nodeType":"YulBlock","src":"29697:143:15","statements":[{"nodeType":"YulAssignment","src":"29707:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29730:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29712:17:15"},"nodeType":"YulFunctionCall","src":"29712:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"29707:1:15"}]},{"nodeType":"YulAssignment","src":"29741:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"29764:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29746:17:15"},"nodeType":"YulFunctionCall","src":"29746:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"29741:1:15"}]},{"body":{"nodeType":"YulBlock","src":"29788:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"29790:16:15"},"nodeType":"YulFunctionCall","src":"29790:18:15"},"nodeType":"YulExpressionStatement","src":"29790:18:15"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"29785:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29778:6:15"},"nodeType":"YulFunctionCall","src":"29778:9:15"},"nodeType":"YulIf","src":"29775:35:15"},{"nodeType":"YulAssignment","src":"29820:14:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29829:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"29832:1:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"29825:3:15"},"nodeType":"YulFunctionCall","src":"29825:9:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"29820:1:15"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"29686:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"29689:1:15","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"29695:1:15","type":""}],"src":"29655:185:15"},{"body":{"nodeType":"YulBlock","src":"29891:149:15","statements":[{"nodeType":"YulAssignment","src":"29901:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29924:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29906:17:15"},"nodeType":"YulFunctionCall","src":"29906:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"29901:1:15"}]},{"nodeType":"YulAssignment","src":"29935:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"29958:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29940:17:15"},"nodeType":"YulFunctionCall","src":"29940:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"29935:1:15"}]},{"nodeType":"YulAssignment","src":"29969:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29981:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"29984:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29977:3:15"},"nodeType":"YulFunctionCall","src":"29977:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"29969:4:15"}]},{"body":{"nodeType":"YulBlock","src":"30011:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30013:16:15"},"nodeType":"YulFunctionCall","src":"30013:18:15"},"nodeType":"YulExpressionStatement","src":"30013:18:15"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"30002:4:15"},{"name":"x","nodeType":"YulIdentifier","src":"30008:1:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"29999:2:15"},"nodeType":"YulFunctionCall","src":"29999:11:15"},"nodeType":"YulIf","src":"29996:37:15"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"29877:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"29880:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"29886:4:15","type":""}],"src":"29846:194:15"},{"body":{"nodeType":"YulBlock","src":"30172:206:15","statements":[{"nodeType":"YulAssignment","src":"30182:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30194:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30205:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30190:3:15"},"nodeType":"YulFunctionCall","src":"30190:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30182:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30262:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30275:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30286:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30271:3:15"},"nodeType":"YulFunctionCall","src":"30271:17:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30218:43:15"},"nodeType":"YulFunctionCall","src":"30218:71:15"},"nodeType":"YulExpressionStatement","src":"30218:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30343:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30356:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30367:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30352:3:15"},"nodeType":"YulFunctionCall","src":"30352:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30299:43:15"},"nodeType":"YulFunctionCall","src":"30299:72:15"},"nodeType":"YulExpressionStatement","src":"30299:72:15"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30136:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30148:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30156:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30167:4:15","type":""}],"src":"30046:332:15"},{"body":{"nodeType":"YulBlock","src":"30438:87:15","statements":[{"nodeType":"YulAssignment","src":"30448:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"30456:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"30448:4:15"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30476:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"30479:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30469:6:15"},"nodeType":"YulFunctionCall","src":"30469:14:15"},"nodeType":"YulExpressionStatement","src":"30469:14:15"},{"nodeType":"YulAssignment","src":"30492:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30510:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30513:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"30500:9:15"},"nodeType":"YulFunctionCall","src":"30500:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"30492:4:15"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"30425:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"30433:4:15","type":""}],"src":"30384:141:15"},{"body":{"nodeType":"YulBlock","src":"30575:49:15","statements":[{"nodeType":"YulAssignment","src":"30585:33:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30603:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"30610:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30599:3:15"},"nodeType":"YulFunctionCall","src":"30599:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"30615:2:15","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30595:3:15"},"nodeType":"YulFunctionCall","src":"30595:23:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"30585:6:15"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30558:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"30568:6:15","type":""}],"src":"30531:93:15"},{"body":{"nodeType":"YulBlock","src":"30683:54:15","statements":[{"nodeType":"YulAssignment","src":"30693:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"30718:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"30724:5:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"30714:3:15"},"nodeType":"YulFunctionCall","src":"30714:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"30693:8:15"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"30658:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"30664:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"30674:8:15","type":""}],"src":"30630:107:15"},{"body":{"nodeType":"YulBlock","src":"30819:317:15","statements":[{"nodeType":"YulVariableDeclaration","src":"30829:35:15","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"30850:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"30862:1:15","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"30846:3:15"},"nodeType":"YulFunctionCall","src":"30846:18:15"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"30833:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"30873:109:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"30904:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30915:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"30885:18:15"},"nodeType":"YulFunctionCall","src":"30885:97:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"30877:4:15","type":""}]},{"nodeType":"YulAssignment","src":"30991:51:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"31022:9:15"},{"name":"toInsert","nodeType":"YulIdentifier","src":"31033:8:15"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"31003:18:15"},"nodeType":"YulFunctionCall","src":"31003:39:15"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"30991:8:15"}]},{"nodeType":"YulAssignment","src":"31051:30:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31064:5:15"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"31075:4:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31071:3:15"},"nodeType":"YulFunctionCall","src":"31071:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31060:3:15"},"nodeType":"YulFunctionCall","src":"31060:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31051:5:15"}]},{"nodeType":"YulAssignment","src":"31090:40:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31103:5:15"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"31114:8:15"},{"name":"mask","nodeType":"YulIdentifier","src":"31124:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31110:3:15"},"nodeType":"YulFunctionCall","src":"31110:19:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31100:2:15"},"nodeType":"YulFunctionCall","src":"31100:30:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"31090:6:15"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30780:5:15","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"30787:10:15","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"30799:8:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"30812:6:15","type":""}],"src":"30743:393:15"},{"body":{"nodeType":"YulBlock","src":"31202:82:15","statements":[{"nodeType":"YulAssignment","src":"31212:66:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31270:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31252:17:15"},"nodeType":"YulFunctionCall","src":"31252:24:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"31243:8:15"},"nodeType":"YulFunctionCall","src":"31243:34:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31225:17:15"},"nodeType":"YulFunctionCall","src":"31225:53:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"31212:9:15"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31182:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"31192:9:15","type":""}],"src":"31142:142:15"},{"body":{"nodeType":"YulBlock","src":"31337:28:15","statements":[{"nodeType":"YulAssignment","src":"31347:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"31354:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31347:3:15"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31323:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31333:3:15","type":""}],"src":"31290:75:15"},{"body":{"nodeType":"YulBlock","src":"31447:193:15","statements":[{"nodeType":"YulVariableDeclaration","src":"31457:63:15","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"31512:7:15"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"31481:30:15"},"nodeType":"YulFunctionCall","src":"31481:39:15"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"31461:16:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31536:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31576:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"31570:5:15"},"nodeType":"YulFunctionCall","src":"31570:11:15"},{"name":"offset","nodeType":"YulIdentifier","src":"31583:6:15"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"31615:16:15"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"31591:23:15"},"nodeType":"YulFunctionCall","src":"31591:41:15"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"31542:27:15"},"nodeType":"YulFunctionCall","src":"31542:91:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"31529:6:15"},"nodeType":"YulFunctionCall","src":"31529:105:15"},"nodeType":"YulExpressionStatement","src":"31529:105:15"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"31424:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"31430:6:15","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"31438:7:15","type":""}],"src":"31371:269:15"},{"body":{"nodeType":"YulBlock","src":"31695:24:15","statements":[{"nodeType":"YulAssignment","src":"31705:8:15","value":{"kind":"number","nodeType":"YulLiteral","src":"31712:1:15","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31705:3:15"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31691:3:15","type":""}],"src":"31646:73:15"},{"body":{"nodeType":"YulBlock","src":"31778:136:15","statements":[{"nodeType":"YulVariableDeclaration","src":"31788:46:15","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"31802:30:15"},"nodeType":"YulFunctionCall","src":"31802:32:15"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"31792:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31887:4:15"},{"name":"offset","nodeType":"YulIdentifier","src":"31893:6:15"},{"name":"zero_0","nodeType":"YulIdentifier","src":"31901:6:15"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"31843:43:15"},"nodeType":"YulFunctionCall","src":"31843:65:15"},"nodeType":"YulExpressionStatement","src":"31843:65:15"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"31764:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"31770:6:15","type":""}],"src":"31725:189:15"},{"body":{"nodeType":"YulBlock","src":"31970:136:15","statements":[{"body":{"nodeType":"YulBlock","src":"32037:63:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32081:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"32088:1:15","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"32051:29:15"},"nodeType":"YulFunctionCall","src":"32051:39:15"},"nodeType":"YulExpressionStatement","src":"32051:39:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"31990:5:15"},{"name":"end","nodeType":"YulIdentifier","src":"31997:3:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31987:2:15"},"nodeType":"YulFunctionCall","src":"31987:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"32002:26:15","statements":[{"nodeType":"YulAssignment","src":"32004:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32017:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"32024:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32013:3:15"},"nodeType":"YulFunctionCall","src":"32013:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"32004:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"31984:2:15","statements":[]},"src":"31980:120:15"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"31958:5:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"31965:3:15","type":""}],"src":"31920:186:15"},{"body":{"nodeType":"YulBlock","src":"32191:464:15","statements":[{"body":{"nodeType":"YulBlock","src":"32217:431:15","statements":[{"nodeType":"YulVariableDeclaration","src":"32231:54:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"32279:5:15"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"32247:31:15"},"nodeType":"YulFunctionCall","src":"32247:38:15"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"32235:8:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32298:63:15","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"32321:8:15"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"32349:10:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"32331:17:15"},"nodeType":"YulFunctionCall","src":"32331:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32317:3:15"},"nodeType":"YulFunctionCall","src":"32317:44:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"32302:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"32518:27:15","statements":[{"nodeType":"YulAssignment","src":"32520:23:15","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"32535:8:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"32520:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"32502:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"32514:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32499:2:15"},"nodeType":"YulFunctionCall","src":"32499:18:15"},"nodeType":"YulIf","src":"32496:49:15"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"32587:11:15"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"32604:8:15"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"32632:3:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"32614:17:15"},"nodeType":"YulFunctionCall","src":"32614:22:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32600:3:15"},"nodeType":"YulFunctionCall","src":"32600:37:15"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"32558:28:15"},"nodeType":"YulFunctionCall","src":"32558:80:15"},"nodeType":"YulExpressionStatement","src":"32558:80:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"32208:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"32213:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32205:2:15"},"nodeType":"YulFunctionCall","src":"32205:11:15"},"nodeType":"YulIf","src":"32202:446:15"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"32167:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"32174:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"32179:10:15","type":""}],"src":"32112:543:15"},{"body":{"nodeType":"YulBlock","src":"32724:54:15","statements":[{"nodeType":"YulAssignment","src":"32734:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"32759:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"32765:5:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"32755:3:15"},"nodeType":"YulFunctionCall","src":"32755:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"32734:8:15"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"32699:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"32705:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"32715:8:15","type":""}],"src":"32661:117:15"},{"body":{"nodeType":"YulBlock","src":"32835:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"32845:68:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32894:1:15","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"32897:5:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"32890:3:15"},"nodeType":"YulFunctionCall","src":"32890:13:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32909:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32905:3:15"},"nodeType":"YulFunctionCall","src":"32905:6:15"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"32861:28:15"},"nodeType":"YulFunctionCall","src":"32861:51:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32857:3:15"},"nodeType":"YulFunctionCall","src":"32857:56:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"32849:4:15","type":""}]},{"nodeType":"YulAssignment","src":"32922:25:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32936:4:15"},{"name":"mask","nodeType":"YulIdentifier","src":"32942:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32932:3:15"},"nodeType":"YulFunctionCall","src":"32932:15:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"32922:6:15"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"32812:4:15","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"32818:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"32828:6:15","type":""}],"src":"32784:169:15"},{"body":{"nodeType":"YulBlock","src":"33039:214:15","statements":[{"nodeType":"YulAssignment","src":"33172:37:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33199:4:15"},{"name":"len","nodeType":"YulIdentifier","src":"33205:3:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"33180:18:15"},"nodeType":"YulFunctionCall","src":"33180:29:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"33172:4:15"}]},{"nodeType":"YulAssignment","src":"33218:29:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33229:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33239:1:15","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"33242:3:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33235:3:15"},"nodeType":"YulFunctionCall","src":"33235:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"33226:2:15"},"nodeType":"YulFunctionCall","src":"33226:21:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"33218:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"33020:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"33026:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"33034:4:15","type":""}],"src":"32958:295:15"},{"body":{"nodeType":"YulBlock","src":"33350:1303:15","statements":[{"nodeType":"YulVariableDeclaration","src":"33361:51:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"33408:3:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"33375:32:15"},"nodeType":"YulFunctionCall","src":"33375:37:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"33365:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"33497:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"33499:16:15"},"nodeType":"YulFunctionCall","src":"33499:18:15"},"nodeType":"YulExpressionStatement","src":"33499:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"33469:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"33477:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"33466:2:15"},"nodeType":"YulFunctionCall","src":"33466:30:15"},"nodeType":"YulIf","src":"33463:56:15"},{"nodeType":"YulVariableDeclaration","src":"33529:52:15","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33575:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"33569:5:15"},"nodeType":"YulFunctionCall","src":"33569:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"33543:25:15"},"nodeType":"YulFunctionCall","src":"33543:38:15"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"33533:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33674:4:15"},{"name":"oldLen","nodeType":"YulIdentifier","src":"33680:6:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"33688:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"33628:45:15"},"nodeType":"YulFunctionCall","src":"33628:67:15"},"nodeType":"YulExpressionStatement","src":"33628:67:15"},{"nodeType":"YulVariableDeclaration","src":"33705:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"33722:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"33709:9:15","type":""}]},{"nodeType":"YulAssignment","src":"33733:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"33746:4:15","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"33733:9:15"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"33797:611:15","statements":[{"nodeType":"YulVariableDeclaration","src":"33811:37:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"33830:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33842:4:15","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33838:3:15"},"nodeType":"YulFunctionCall","src":"33838:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33826:3:15"},"nodeType":"YulFunctionCall","src":"33826:22:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"33815:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33862:51:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33908:4:15"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"33876:31:15"},"nodeType":"YulFunctionCall","src":"33876:37:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"33866:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33926:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"33935:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"33930:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"33994:163:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34019:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34037:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"34042:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34033:3:15"},"nodeType":"YulFunctionCall","src":"34033:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34027:5:15"},"nodeType":"YulFunctionCall","src":"34027:26:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34012:6:15"},"nodeType":"YulFunctionCall","src":"34012:42:15"},"nodeType":"YulExpressionStatement","src":"34012:42:15"},{"nodeType":"YulAssignment","src":"34071:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34085:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"34093:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34081:3:15"},"nodeType":"YulFunctionCall","src":"34081:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34071:6:15"}]},{"nodeType":"YulAssignment","src":"34112:31:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34129:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"34140:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34125:3:15"},"nodeType":"YulFunctionCall","src":"34125:18:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34112:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"33960:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"33963:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"33957:2:15"},"nodeType":"YulFunctionCall","src":"33957:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"33972:21:15","statements":[{"nodeType":"YulAssignment","src":"33974:17:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"33983:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"33986:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33979:3:15"},"nodeType":"YulFunctionCall","src":"33979:12:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"33974:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"33953:3:15","statements":[]},"src":"33949:208:15"},{"body":{"nodeType":"YulBlock","src":"34193:156:15","statements":[{"nodeType":"YulVariableDeclaration","src":"34211:43:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34238:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"34243:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34234:3:15"},"nodeType":"YulFunctionCall","src":"34234:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34228:5:15"},"nodeType":"YulFunctionCall","src":"34228:26:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"34215:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34278:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"34305:9:15"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34320:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"34328:4:15","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34316:3:15"},"nodeType":"YulFunctionCall","src":"34316:17:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"34286:18:15"},"nodeType":"YulFunctionCall","src":"34286:48:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34271:6:15"},"nodeType":"YulFunctionCall","src":"34271:64:15"},"nodeType":"YulExpressionStatement","src":"34271:64:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"34176:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"34185:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34173:2:15"},"nodeType":"YulFunctionCall","src":"34173:19:15"},"nodeType":"YulIf","src":"34170:179:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34369:4:15"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34383:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"34391:1:15","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"34379:3:15"},"nodeType":"YulFunctionCall","src":"34379:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"34395:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34375:3:15"},"nodeType":"YulFunctionCall","src":"34375:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34362:6:15"},"nodeType":"YulFunctionCall","src":"34362:36:15"},"nodeType":"YulExpressionStatement","src":"34362:36:15"}]},"nodeType":"YulCase","src":"33790:618:15","value":{"kind":"number","nodeType":"YulLiteral","src":"33795:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"34425:222:15","statements":[{"nodeType":"YulVariableDeclaration","src":"34439:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"34452:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"34443:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"34476:67:15","statements":[{"nodeType":"YulAssignment","src":"34494:35:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34513:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"34518:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34509:3:15"},"nodeType":"YulFunctionCall","src":"34509:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34503:5:15"},"nodeType":"YulFunctionCall","src":"34503:26:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"34494:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"34469:6:15"},"nodeType":"YulIf","src":"34466:77:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34563:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34622:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"34629:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"34569:52:15"},"nodeType":"YulFunctionCall","src":"34569:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34556:6:15"},"nodeType":"YulFunctionCall","src":"34556:81:15"},"nodeType":"YulExpressionStatement","src":"34556:81:15"}]},"nodeType":"YulCase","src":"34417:230:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"33770:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"33778:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"33767:2:15"},"nodeType":"YulFunctionCall","src":"33767:14:15"},"nodeType":"YulSwitch","src":"33760:887:15"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"33339:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"33345:3:15","type":""}],"src":"33258:1395:15"},{"body":{"nodeType":"YulBlock","src":"34805:277:15","statements":[{"nodeType":"YulAssignment","src":"34815:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34827:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"34838:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34823:3:15"},"nodeType":"YulFunctionCall","src":"34823:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34815:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34862:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"34873:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34858:3:15"},"nodeType":"YulFunctionCall","src":"34858:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34881:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"34887:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34877:3:15"},"nodeType":"YulFunctionCall","src":"34877:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34851:6:15"},"nodeType":"YulFunctionCall","src":"34851:47:15"},"nodeType":"YulExpressionStatement","src":"34851:47:15"},{"nodeType":"YulAssignment","src":"34907:86:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34979:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"34988:4:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34915:63:15"},"nodeType":"YulFunctionCall","src":"34915:78:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34907:4:15"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35047:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35060:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35071:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35056:3:15"},"nodeType":"YulFunctionCall","src":"35056:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"35003:43:15"},"nodeType":"YulFunctionCall","src":"35003:72:15"},"nodeType":"YulExpressionStatement","src":"35003:72:15"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34769:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34781:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34789:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34800:4:15","type":""}],"src":"34659:423:15"},{"body":{"nodeType":"YulBlock","src":"35202:34:15","statements":[{"nodeType":"YulAssignment","src":"35212:18:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"35227:3:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"35212:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35174:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"35179:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"35190:11:15","type":""}],"src":"35088:148:15"},{"body":{"nodeType":"YulBlock","src":"35352:280:15","statements":[{"nodeType":"YulVariableDeclaration","src":"35362:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35409:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"35376:32:15"},"nodeType":"YulFunctionCall","src":"35376:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"35366:6:15","type":""}]},{"nodeType":"YulAssignment","src":"35424:96:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35508:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"35513:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"35431:76:15"},"nodeType":"YulFunctionCall","src":"35431:89:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35424:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35568:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"35575:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35564:3:15"},"nodeType":"YulFunctionCall","src":"35564:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"35582:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"35587:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"35529:34:15"},"nodeType":"YulFunctionCall","src":"35529:65:15"},"nodeType":"YulExpressionStatement","src":"35529:65:15"},{"nodeType":"YulAssignment","src":"35603:23:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35614:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"35619:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35610:3:15"},"nodeType":"YulFunctionCall","src":"35610:16:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35603:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35333:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"35340:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35348:3:15","type":""}],"src":"35242:390:15"},{"body":{"nodeType":"YulBlock","src":"35822:251:15","statements":[{"nodeType":"YulAssignment","src":"35833:102:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35922:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"35931:3:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"35840:81:15"},"nodeType":"YulFunctionCall","src":"35840:95:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35833:3:15"}]},{"nodeType":"YulAssignment","src":"35945:102:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"36034:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"36043:3:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"35952:81:15"},"nodeType":"YulFunctionCall","src":"35952:95:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35945:3:15"}]},{"nodeType":"YulAssignment","src":"36057:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"36064:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36057:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35793:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35799:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35807:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35818:3:15","type":""}],"src":"35638:435:15"},{"body":{"nodeType":"YulBlock","src":"36185:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36207:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36215:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36203:3:15"},"nodeType":"YulFunctionCall","src":"36203:14:15"},{"hexValue":"506c61796572206e6f7420696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"36219:24:15","type":"","value":"Player not initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36196:6:15"},"nodeType":"YulFunctionCall","src":"36196:48:15"},"nodeType":"YulExpressionStatement","src":"36196:48:15"}]},"name":"store_literal_in_memory_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36177:6:15","type":""}],"src":"36079:172:15"},{"body":{"nodeType":"YulBlock","src":"36403:220:15","statements":[{"nodeType":"YulAssignment","src":"36413:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36479:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"36484:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36420:58:15"},"nodeType":"YulFunctionCall","src":"36420:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36413:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36585:3:15"}],"functionName":{"name":"store_literal_in_memory_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813","nodeType":"YulIdentifier","src":"36496:88:15"},"nodeType":"YulFunctionCall","src":"36496:93:15"},"nodeType":"YulExpressionStatement","src":"36496:93:15"},{"nodeType":"YulAssignment","src":"36598:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36609:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"36614:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36605:3:15"},"nodeType":"YulFunctionCall","src":"36605:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36598:3:15"}]}]},"name":"abi_encode_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36391:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36399:3:15","type":""}],"src":"36257:366:15"},{"body":{"nodeType":"YulBlock","src":"36800:248:15","statements":[{"nodeType":"YulAssignment","src":"36810:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36822:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"36833:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36818:3:15"},"nodeType":"YulFunctionCall","src":"36818:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36810:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36857:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"36868:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36853:3:15"},"nodeType":"YulFunctionCall","src":"36853:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36876:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"36882:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36872:3:15"},"nodeType":"YulFunctionCall","src":"36872:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36846:6:15"},"nodeType":"YulFunctionCall","src":"36846:47:15"},"nodeType":"YulExpressionStatement","src":"36846:47:15"},{"nodeType":"YulAssignment","src":"36902:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37036:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36910:124:15"},"nodeType":"YulFunctionCall","src":"36910:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36902:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36780:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36795:4:15","type":""}],"src":"36629:419:15"},{"body":{"nodeType":"YulBlock","src":"37160:117:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37182:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37190:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37178:3:15"},"nodeType":"YulFunctionCall","src":"37178:14:15"},{"hexValue":"496e73756666696369656e7420746f6b656e7320746f20707572636861736520","kind":"string","nodeType":"YulLiteral","src":"37194:34:15","type":"","value":"Insufficient tokens to purchase "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37171:6:15"},"nodeType":"YulFunctionCall","src":"37171:58:15"},"nodeType":"YulExpressionStatement","src":"37171:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37250:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37258:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37246:3:15"},"nodeType":"YulFunctionCall","src":"37246:15:15"},{"hexValue":"6974656d","kind":"string","nodeType":"YulLiteral","src":"37263:6:15","type":"","value":"item"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37239:6:15"},"nodeType":"YulFunctionCall","src":"37239:31:15"},"nodeType":"YulExpressionStatement","src":"37239:31:15"}]},"name":"store_literal_in_memory_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37152:6:15","type":""}],"src":"37054:223:15"},{"body":{"nodeType":"YulBlock","src":"37429:220:15","statements":[{"nodeType":"YulAssignment","src":"37439:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37505:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"37510:2:15","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37446:58:15"},"nodeType":"YulFunctionCall","src":"37446:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37439:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37611:3:15"}],"functionName":{"name":"store_literal_in_memory_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb","nodeType":"YulIdentifier","src":"37522:88:15"},"nodeType":"YulFunctionCall","src":"37522:93:15"},"nodeType":"YulExpressionStatement","src":"37522:93:15"},{"nodeType":"YulAssignment","src":"37624:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37635:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"37640:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37631:3:15"},"nodeType":"YulFunctionCall","src":"37631:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37624:3:15"}]}]},"name":"abi_encode_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37417:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37425:3:15","type":""}],"src":"37283:366:15"},{"body":{"nodeType":"YulBlock","src":"37826:248:15","statements":[{"nodeType":"YulAssignment","src":"37836:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37848:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"37859:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37844:3:15"},"nodeType":"YulFunctionCall","src":"37844:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37836:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37883:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"37894:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37879:3:15"},"nodeType":"YulFunctionCall","src":"37879:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37902:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"37908:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37898:3:15"},"nodeType":"YulFunctionCall","src":"37898:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37872:6:15"},"nodeType":"YulFunctionCall","src":"37872:47:15"},"nodeType":"YulExpressionStatement","src":"37872:47:15"},{"nodeType":"YulAssignment","src":"37928:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38062:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37936:124:15"},"nodeType":"YulFunctionCall","src":"37936:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37928:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37806:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37821:4:15","type":""}],"src":"37655:419:15"},{"body":{"nodeType":"YulBlock","src":"38138:40:15","statements":[{"nodeType":"YulAssignment","src":"38149:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38165:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38159:5:15"},"nodeType":"YulFunctionCall","src":"38159:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"38149:6:15"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38121:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"38131:6:15","type":""}],"src":"38080:98:15"},{"body":{"nodeType":"YulBlock","src":"38279:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38296:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"38301:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38289:6:15"},"nodeType":"YulFunctionCall","src":"38289:19:15"},"nodeType":"YulExpressionStatement","src":"38289:19:15"},{"nodeType":"YulAssignment","src":"38317:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38336:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"38341:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38332:3:15"},"nodeType":"YulFunctionCall","src":"38332:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"38317:11:15"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38251:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"38256:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"38267:11:15","type":""}],"src":"38184:168:15"},{"body":{"nodeType":"YulBlock","src":"38448:283:15","statements":[{"nodeType":"YulVariableDeclaration","src":"38458:52:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38504:5:15"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"38472:31:15"},"nodeType":"YulFunctionCall","src":"38472:38:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"38462:6:15","type":""}]},{"nodeType":"YulAssignment","src":"38519:77:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38584:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"38589:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38526:57:15"},"nodeType":"YulFunctionCall","src":"38526:70:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38519:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38644:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"38651:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38640:3:15"},"nodeType":"YulFunctionCall","src":"38640:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"38658:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"38663:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"38605:34:15"},"nodeType":"YulFunctionCall","src":"38605:65:15"},"nodeType":"YulExpressionStatement","src":"38605:65:15"},{"nodeType":"YulAssignment","src":"38679:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38690:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"38717:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"38695:21:15"},"nodeType":"YulFunctionCall","src":"38695:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38686:3:15"},"nodeType":"YulFunctionCall","src":"38686:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38679:3:15"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38429:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"38436:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38444:3:15","type":""}],"src":"38358:373:15"},{"body":{"nodeType":"YulBlock","src":"38937:440:15","statements":[{"nodeType":"YulAssignment","src":"38947:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38959:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"38970:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38955:3:15"},"nodeType":"YulFunctionCall","src":"38955:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38947:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39028:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39041:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"39052:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39037:3:15"},"nodeType":"YulFunctionCall","src":"39037:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"38984:43:15"},"nodeType":"YulFunctionCall","src":"38984:71:15"},"nodeType":"YulExpressionStatement","src":"38984:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"39109:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39122:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"39133:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39118:3:15"},"nodeType":"YulFunctionCall","src":"39118:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"39065:43:15"},"nodeType":"YulFunctionCall","src":"39065:72:15"},"nodeType":"YulExpressionStatement","src":"39065:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"39191:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39204:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"39215:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39200:3:15"},"nodeType":"YulFunctionCall","src":"39200:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"39147:43:15"},"nodeType":"YulFunctionCall","src":"39147:72:15"},"nodeType":"YulExpressionStatement","src":"39147:72:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39240:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"39251:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39236:3:15"},"nodeType":"YulFunctionCall","src":"39236:18:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39260:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"39266:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39256:3:15"},"nodeType":"YulFunctionCall","src":"39256:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39229:6:15"},"nodeType":"YulFunctionCall","src":"39229:48:15"},"nodeType":"YulExpressionStatement","src":"39229:48:15"},{"nodeType":"YulAssignment","src":"39286:84:15","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"39356:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"39365:4:15"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39294:61:15"},"nodeType":"YulFunctionCall","src":"39294:76:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39286:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38885:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"38897:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"38905:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"38913:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"38921:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38932:4:15","type":""}],"src":"38737:640:15"},{"body":{"nodeType":"YulBlock","src":"39445:79:15","statements":[{"nodeType":"YulAssignment","src":"39455:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"39470:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"39464:5:15"},"nodeType":"YulFunctionCall","src":"39464:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"39455:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39512:5:15"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"39486:25:15"},"nodeType":"YulFunctionCall","src":"39486:32:15"},"nodeType":"YulExpressionStatement","src":"39486:32:15"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"39423:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"39431:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"39439:5:15","type":""}],"src":"39383:141:15"},{"body":{"nodeType":"YulBlock","src":"39606:273:15","statements":[{"body":{"nodeType":"YulBlock","src":"39652:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"39654:77:15"},"nodeType":"YulFunctionCall","src":"39654:79:15"},"nodeType":"YulExpressionStatement","src":"39654:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"39627:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"39636:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39623:3:15"},"nodeType":"YulFunctionCall","src":"39623:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"39648:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"39619:3:15"},"nodeType":"YulFunctionCall","src":"39619:32:15"},"nodeType":"YulIf","src":"39616:119:15"},{"nodeType":"YulBlock","src":"39745:127:15","statements":[{"nodeType":"YulVariableDeclaration","src":"39760:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"39774:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"39764:6:15","type":""}]},{"nodeType":"YulAssignment","src":"39789:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39834:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"39845:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39830:3:15"},"nodeType":"YulFunctionCall","src":"39830:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"39854:7:15"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"39799:30:15"},"nodeType":"YulFunctionCall","src":"39799:63:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"39789:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39576:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"39587:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"39599:6:15","type":""}],"src":"39530:349:15"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // struct ArcadeGame.Item -> struct ArcadeGame.Item\n    function abi_encode_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr(value, pos)  -> end  {\n        let tail := add(pos, 0x60)\n\n        {\n            // id\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // power\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n        end := tail\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr(value0, pos)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct ArcadeGame.Item[] -> struct ArcadeGame.Item[]\n    function abi_encode_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_struct$_Item_$3045_memory_ptr_to_t_struct$_Item_$3045_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Item_$3045_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    // struct ArcadeGame.Player -> struct ArcadeGame.Player\n    function abi_encode_t_struct$_Player_$3038_memory_ptr_to_t_struct$_Player_$3038_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0x80)\n\n        {\n            // score\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // rewards\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // level\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // items\n\n            let memberValue0 := mload(add(value, 0x60))\n\n            mstore(add(pos, 0x60), sub(tail, pos))\n            tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        end := tail\n    }\n\n    function abi_encode_tuple_t_struct$_Player_$3038_memory_ptr__to_t_struct$_Player_$3038_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_Player_$3038_memory_ptr_to_t_struct$_Player_$3038_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$362_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$362_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$362_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$362__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$362_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f(memPtr) {\n\n        mstore(add(memPtr, 0), \"Airdrop failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5d88cc4db9e35160adc110fc75da1b9d626e19bd7bbceb0734775a4031acf69f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d(memPtr) {\n\n        mstore(add(memPtr, 0), \"No rewards to claim\")\n\n    }\n\n    function abi_encode_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce(memPtr) {\n\n        mstore(add(memPtr, 0), \"Reward transfer failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c745758d72f89e19328d67ece8ee7d1c3fa24ceabda854d2a9216c00473e37ce_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient tokens to play\")\n\n    }\n\n    function abi_encode_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5a84bc1018cde5119ce44aee67ff7a2fbe3b78481715d187d2000fb5e8eb1536_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Token transfer failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813(memPtr) {\n\n        mstore(add(memPtr, 0), \"Player not initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c98d61113a5c03f2c2ab51bce8352c01af398c5f915547cf117d538a869c0813_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient tokens to purchase \")\n\n        mstore(add(memPtr, 32), \"item\")\n\n    }\n\n    function abi_encode_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_48509d7014bd8cac492700a1b88e66606d7f77757d5ff05cd26892531eaca5cb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106102065760003560e01c80637f17b79d1161011a578063c87b56dd116100ad578063e2eb41ff1161007c578063e2eb41ff146105af578063e7804338146105e1578063e985e9c5146105ff578063f2fde38b1461062f578063fc0c546a1461064b57610206565b8063c87b56dd14610515578063c8dd6ce714610545578063cab896dc14610575578063d38ea5bf1461059357610206565b8063affc55c0116100e9578063affc55c014610479578063b88d4fde14610497578063bbd94c2f146104b3578063bfb231d2146104e357610206565b80637f17b79d146104055780638da5cb5b1461042157806395d89b411461043f578063a22cb4651461045d57610206565b8063372500ab1161019d57806362d6bbdf1161016c57806362d6bbdf146103635780636352211e1461037f57806370a08231146103af57806370ca3b16146103df578063715018a6146103fb57610206565b8063372500ab14610303578063410d59cc1461030d57806342842e0e1461032b5780635873533d1461034757610206565b8063095ea7b3116101d9578063095ea7b3146102a5578063139652e4146102c157806314f710fe146102dd57806323b872dd146102e757610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc146102595780630931a4d114610289575b600080fd5b61022560048036038101906102209190612d64565b610669565b6040516102329190612dac565b60405180910390f35b61024361074b565b6040516102509190612e57565b60405180910390f35b610273600480360381019061026e9190612eaf565b6107dd565b6040516102809190612f1d565b60405180910390f35b6102a3600480360381019061029e9190612eaf565b6107f9565b005b6102bf60048036038101906102ba9190612f64565b61080b565b005b6102db60048036038101906102d69190612fa4565b610821565b005b6102e5610ad7565b005b61030160048036038101906102fc9190612fd1565b610b4e565b005b61030b610c50565b005b610315610e1a565b604051610322919061318f565b60405180910390f35b61034560048036038101906103409190612fd1565b610f8b565b005b610361600480360381019061035c9190612eaf565b610fab565b005b61037d600480360381019061037891906132e6565b6112eb565b005b61039960048036038101906103949190612eaf565b6113a5565b6040516103a69190612f1d565b60405180910390f35b6103c960048036038101906103c49190612fa4565b6113b7565b6040516103d69190613351565b60405180910390f35b6103f960048036038101906103f49190612eaf565b611471565b005b610403611483565b005b61041f600480360381019061041a9190612eaf565b611497565b005b6104296114a9565b6040516104369190612f1d565b60405180910390f35b6104476114d3565b6040516104549190612e57565b60405180910390f35b61047760048036038101906104729190613398565b611565565b005b61048161157b565b60405161048e9190613351565b60405180910390f35b6104b160048036038101906104ac9190613479565b611581565b005b6104cd60048036038101906104c89190612eaf565b61159e565b6040516104da9190612f1d565b60405180910390f35b6104fd60048036038101906104f89190612eaf565b6115d1565b60405161050c939291906134fc565b60405180910390f35b61052f600480360381019061052a9190612eaf565b611683565b60405161053c9190612e57565b60405180910390f35b61055f600480360381019061055a9190612fa4565b6116ec565b60405161056c919061364c565b60405180910390f35b61057d6118dd565b60405161058a9190613351565b60405180910390f35b6105ad60048036038101906105a89190612eaf565b6118e3565b005b6105c960048036038101906105c49190612fa4565b611c23565b6040516105d89392919061366e565b60405180910390f35b6105e9611c4d565b6040516105f69190613351565b60405180910390f35b610619600480360381019061061491906136a5565b611c53565b6040516106269190612dac565b60405180910390f35b61064960048036038101906106449190612fa4565b611ce7565b005b610653611d6d565b6040516106609190613744565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061073457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610744575061074382611d93565b5b9050919050565b60606000805461075a9061378e565b80601f01602080910402602001604051908101604052809291908181526020018280546107869061378e565b80156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b5050505050905090565b60006107e882611dfd565b506107f282611e85565b9050919050565b610801611ec2565b80600b8190555050565b61081d8282610818611f49565b611f51565b5050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541480156108b557506000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b801561090357506000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154145b15610ad4576040518060800160405280600081526020016000815260200160018152602001600067ffffffffffffffff811115610943576109426131bb565b5b6040519080825280602002602001820160405280156109715781602001602082028036833780820191505090505b50815250600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190805190602001906109ee929190612c45565b50905050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600c546040518363ffffffff1660e01b8152600401610a519291906137bf565b6020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906137fd565b610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90613876565b60405180910390fd5b5b50565b6000610ae36009611f63565b9050610aef6009611f71565b610af93382611f87565b33600f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bc05760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610bb79190612f1d565b60405180910390fd5b6000610bd48383610bcf611f49565b612080565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c4a578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610c4193929190613896565b60405180910390fd5b50505050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154905060008111610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd690613919565b60405180910390fd5b60008260010181905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d469291906137bf565b6020604051808303816000875af1158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8991906137fd565b610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf90613985565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe82604051610e0e9190613351565b60405180910390a25050565b60606000610e286008611f63565b905060008167ffffffffffffffff811115610e4657610e456131bb565b5b604051908082528060200260200182016040528015610e7f57816020015b610e6c612c92565b815260200190600190039081610e645790505b50905060005b82811015610f8257600e600082815260200190815260200160002060405180606001604052908160008201548152602001600182018054610ec59061378e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef19061378e565b8015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b820191906000526020600020905b815481529060010190602001808311610f2157829003601f168201915b50505050508152602001600282015481525050828281518110610f6457610f636139a5565b5b60200260200101819052508080610f7a90613a03565b915050610e85565b50809250505090565b610fa683838360405180602001604052806000815250611581565b505050565b600a54600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016110099190612f1d565b602060405180830381865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190613a60565b101561108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290613ad9565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a546040518463ffffffff1660e01b81526004016110ec93929190613af9565b6020604051808303816000875af115801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f91906137fd565b61116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590613b7c565b60405180910390fd5b61117733610821565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000160008282546111ce9190613b9c565b92505081905550600a826111e29190613bff565b8160010160008282546111f59190613b9c565b92505081905550600b548160000154106112935780600201600081548092919061121e90613a03565b9190505550600b548160000160008282546112399190613c30565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f91e51c29e7e87a74ad3b8ccba98538970f50a4309242735467f41e27c6b0fbac826002015460405161128a9190613351565b60405180910390a25b3373ffffffffffffffffffffffffffffffffffffffff167f24b31e1dbf1732a12bb700d3d77e5fb96ff3b693374d9fa15ccbc03f427150768383600201546040516112df929190613c64565b60405180910390a25050565b6112f3611ec2565b60006112ff6008611f63565b905061130b6008611f71565b604051806060016040528082815260200184815260200183815250600e60008381526020019081526020016000206000820151816000015560208201518160010190816113589190613e2f565b5060408201518160020155905050807f0444434676a57f70f8479401c50fb4add3e31052f88f4b35e155b7759e5968e58484604051611398929190613f01565b60405180910390a2505050565b60006113b082611dfd565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361142a5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016114219190612f1d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611479611ec2565b80600c8190555050565b61148b611ec2565b611495600061229a565b565b61149f611ec2565b80600a8190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546114e29061378e565b80601f016020809104026020016040519081016040528092919081815260200182805461150e9061378e565b801561155b5780601f106115305761010080835404028352916020019161155b565b820191906000526020600020905b81548152906001019060200180831161153e57829003601f168201915b5050505050905090565b611577611570611f49565b8383612360565b5050565b600b5481565b61158c848484610b4e565b611598848484846124cf565b50505050565b600f6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e6020528060005260406000206000915090508060000154908060010180546115fa9061378e565b80601f01602080910402602001604051908101604052809291908181526020018280546116269061378e565b80156116735780601f1061164857610100808354040283529160200191611673565b820191906000526020600020905b81548152906001019060200180831161165657829003601f168201915b5050505050908060020154905083565b606061168e82611dfd565b506000611699612686565b905060008151116116b957604051806020016040528060008152506116e4565b806116c38461269d565b6040516020016116d4929190613f6d565b6040516020818303038152906040525b915050919050565b6116f4612cb3565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414158061178957506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414155b806117d757506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414155b611816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180d90613fdd565b60405180910390fd5b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156118cd57602002820191906000526020600020905b8154815260200190600101908083116118b9575b5050505050815250509050919050565b600a5481565b6000600e60008381526020019081526020016000206040518060600160405290816000820154815260200160018201805461191d9061378e565b80601f01602080910402602001604051908101604052809291908181526020018280546119499061378e565b80156119965780601f1061196b57610100808354040283529160200191611996565b820191906000526020600020905b81548152906001019060200180831161197957829003601f168201915b5050505050815260200160028201548152505090508060400151600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611a0b9190612f1d565b602060405180830381865afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190613a60565b1015611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a849061406f565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084604001516040518463ffffffff1660e01b8152600401611af093929190613af9565b6020604051808303816000875af1158015611b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3391906137fd565b611b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6990613b7c565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301829080600181540180825580915050600190039060005260206000200160009091909190915055813373ffffffffffffffffffffffffffffffffffffffff167f792fe07c0f3ce4ef42df79c4a2b07925168cddbaabf7a7ef1351f027a376031360405160405180910390a35050565b600d6020528060005260406000206000915090508060000154908060010154908060020154905083565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611cef611ec2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d615760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611d589190612f1d565b60405180910390fd5b611d6a8161229a565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080611e098361276b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e7c57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611e739190613351565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611eca611f49565b73ffffffffffffffffffffffffffffffffffffffff16611ee86114a9565b73ffffffffffffffffffffffffffffffffffffffff1614611f4757611f0b611f49565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611f3e9190612f1d565b60405180910390fd5b565b600033905090565b611f5e83838360016127a8565b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ff95760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611ff09190612f1d565b60405180910390fd5b600061200783836000612080565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461207b5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016120729190612f1d565b60405180910390fd5b505050565b60008061208c8461276b565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146120ce576120cd81848661296d565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461215f576121106000856000806127a8565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146121e2576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036123d157816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016123c89190612f1d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124c29190612dac565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612680578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02612513611f49565b8685856040518563ffffffff1660e01b815260040161253594939291906140e4565b6020604051808303816000875af192505050801561257157506040513d601f19601f8201168201806040525081019061256e9190614145565b60015b6125f5573d80600081146125a1576040519150601f19603f3d011682016040523d82523d6000602084013e6125a6565b606091505b5060008151036125ed57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016125e49190612f1d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461267e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016126759190612f1d565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060600060016126ac84612a31565b01905060008167ffffffffffffffff8111156126cb576126ca6131bb565b5b6040519080825280601f01601f1916602001820160405280156126fd5781602001600182028036833780820191505090505b509050600082602001820190505b600115612760578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161275457612753613bd0565b5b0494506000850361270b575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806127e15750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156129155760006127f184611dfd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561285c57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561286f575061286d8184611c53565b155b156128b157826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016128a89190612f1d565b60405180910390fd5b811561291357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612978838383612b84565b612a2c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129ed57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016129e49190613351565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612a239291906137bf565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a8f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a8557612a84613bd0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612acc576d04ee2d6d415b85acef81000000008381612ac257612ac1613bd0565b5b0492506020810190505b662386f26fc100008310612afb57662386f26fc100008381612af157612af0613bd0565b5b0492506010810190505b6305f5e1008310612b24576305f5e1008381612b1a57612b19613bd0565b5b0492506008810190505b6127108310612b49576127108381612b3f57612b3e613bd0565b5b0492506004810190505b60648310612b6c5760648381612b6257612b61613bd0565b5b0492506002810190505b600a8310612b7b576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612c3c57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612bfd5750612bfc8484611c53565b5b80612c3b57508273ffffffffffffffffffffffffffffffffffffffff16612c2383611e85565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b828054828255906000526020600020908101928215612c81579160200282015b82811115612c80578251825591602001919060010190612c65565b5b509050612c8e9190612cdb565b5090565b60405180606001604052806000815260200160608152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b5b80821115612cf4576000816000905550600101612cdc565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d4181612d0c565b8114612d4c57600080fd5b50565b600081359050612d5e81612d38565b92915050565b600060208284031215612d7a57612d79612d02565b5b6000612d8884828501612d4f565b91505092915050565b60008115159050919050565b612da681612d91565b82525050565b6000602082019050612dc16000830184612d9d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e01578082015181840152602081019050612de6565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e2982612dc7565b612e338185612dd2565b9350612e43818560208601612de3565b612e4c81612e0d565b840191505092915050565b60006020820190508181036000830152612e718184612e1e565b905092915050565b6000819050919050565b612e8c81612e79565b8114612e9757600080fd5b50565b600081359050612ea981612e83565b92915050565b600060208284031215612ec557612ec4612d02565b5b6000612ed384828501612e9a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f0782612edc565b9050919050565b612f1781612efc565b82525050565b6000602082019050612f326000830184612f0e565b92915050565b612f4181612efc565b8114612f4c57600080fd5b50565b600081359050612f5e81612f38565b92915050565b60008060408385031215612f7b57612f7a612d02565b5b6000612f8985828601612f4f565b9250506020612f9a85828601612e9a565b9150509250929050565b600060208284031215612fba57612fb9612d02565b5b6000612fc884828501612f4f565b91505092915050565b600080600060608486031215612fea57612fe9612d02565b5b6000612ff886828701612f4f565b935050602061300986828701612f4f565b925050604061301a86828701612e9a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61305981612e79565b82525050565b600082825260208201905092915050565b600061307b82612dc7565b613085818561305f565b9350613095818560208601612de3565b61309e81612e0d565b840191505092915050565b60006060830160008301516130c16000860182613050565b50602083015184820360208601526130d98282613070565b91505060408301516130ee6040860182613050565b508091505092915050565b600061310583836130a9565b905092915050565b6000602082019050919050565b600061312582613024565b61312f818561302f565b93508360208202850161314185613040565b8060005b8581101561317d578484038952815161315e85826130f9565b94506131698361310d565b925060208a01995050600181019050613145565b50829750879550505050505092915050565b600060208201905081810360008301526131a9818461311a565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131f382612e0d565b810181811067ffffffffffffffff82111715613212576132116131bb565b5b80604052505050565b6000613225612cf8565b905061323182826131ea565b919050565b600067ffffffffffffffff821115613251576132506131bb565b5b61325a82612e0d565b9050602081019050919050565b82818337600083830152505050565b600061328961328484613236565b61321b565b9050828152602081018484840111156132a5576132a46131b6565b5b6132b0848285613267565b509392505050565b600082601f8301126132cd576132cc6131b1565b5b81356132dd848260208601613276565b91505092915050565b600080604083850312156132fd576132fc612d02565b5b600083013567ffffffffffffffff81111561331b5761331a612d07565b5b613327858286016132b8565b925050602061333885828601612e9a565b9150509250929050565b61334b81612e79565b82525050565b60006020820190506133666000830184613342565b92915050565b61337581612d91565b811461338057600080fd5b50565b6000813590506133928161336c565b92915050565b600080604083850312156133af576133ae612d02565b5b60006133bd85828601612f4f565b92505060206133ce85828601613383565b9150509250929050565b600067ffffffffffffffff8211156133f3576133f26131bb565b5b6133fc82612e0d565b9050602081019050919050565b600061341c613417846133d8565b61321b565b905082815260208101848484011115613438576134376131b6565b5b613443848285613267565b509392505050565b600082601f8301126134605761345f6131b1565b5b8135613470848260208601613409565b91505092915050565b6000806000806080858703121561349357613492612d02565b5b60006134a187828801612f4f565b94505060206134b287828801612f4f565b93505060406134c387828801612e9a565b925050606085013567ffffffffffffffff8111156134e4576134e3612d07565b5b6134f08782880161344b565b91505092959194509250565b60006060820190506135116000830186613342565b81810360208301526135238185612e1e565b90506135326040830184613342565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006135728383613050565b60208301905092915050565b6000602082019050919050565b60006135968261353a565b6135a08185613545565b93506135ab83613556565b8060005b838110156135dc5781516135c38882613566565b97506135ce8361357e565b9250506001810190506135af565b5085935050505092915050565b60006080830160008301516136016000860182613050565b5060208301516136146020860182613050565b5060408301516136276040860182613050565b506060830151848203606086015261363f828261358b565b9150508091505092915050565b6000602082019050818103600083015261366681846135e9565b905092915050565b60006060820190506136836000830186613342565b6136906020830185613342565b61369d6040830184613342565b949350505050565b600080604083850312156136bc576136bb612d02565b5b60006136ca85828601612f4f565b92505060206136db85828601612f4f565b9150509250929050565b6000819050919050565b600061370a61370561370084612edc565b6136e5565b612edc565b9050919050565b600061371c826136ef565b9050919050565b600061372e82613711565b9050919050565b61373e81613723565b82525050565b60006020820190506137596000830184613735565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137a657607f821691505b6020821081036137b9576137b861375f565b5b50919050565b60006040820190506137d46000830185612f0e565b6137e16020830184613342565b9392505050565b6000815190506137f78161336c565b92915050565b60006020828403121561381357613812612d02565b5b6000613821848285016137e8565b91505092915050565b7f41697264726f70206661696c6564000000000000000000000000000000000000600082015250565b6000613860600e83612dd2565b915061386b8261382a565b602082019050919050565b6000602082019050818103600083015261388f81613853565b9050919050565b60006060820190506138ab6000830186612f0e565b6138b86020830185613342565b6138c56040830184612f0e565b949350505050565b7f4e6f207265776172647320746f20636c61696d00000000000000000000000000600082015250565b6000613903601383612dd2565b915061390e826138cd565b602082019050919050565b60006020820190508181036000830152613932816138f6565b9050919050565b7f526577617264207472616e73666572206661696c656400000000000000000000600082015250565b600061396f601683612dd2565b915061397a82613939565b602082019050919050565b6000602082019050818103600083015261399e81613962565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a0e82612e79565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a4057613a3f6139d4565b5b600182019050919050565b600081519050613a5a81612e83565b92915050565b600060208284031215613a7657613a75612d02565b5b6000613a8484828501613a4b565b91505092915050565b7f496e73756666696369656e7420746f6b656e7320746f20706c61790000000000600082015250565b6000613ac3601b83612dd2565b9150613ace82613a8d565b602082019050919050565b60006020820190508181036000830152613af281613ab6565b9050919050565b6000606082019050613b0e6000830186612f0e565b613b1b6020830185612f0e565b613b286040830184613342565b949350505050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000613b66601583612dd2565b9150613b7182613b30565b602082019050919050565b60006020820190508181036000830152613b9581613b59565b9050919050565b6000613ba782612e79565b9150613bb283612e79565b9250828201905080821115613bca57613bc96139d4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c0a82612e79565b9150613c1583612e79565b925082613c2557613c24613bd0565b5b828204905092915050565b6000613c3b82612e79565b9150613c4683612e79565b9250828203905081811115613c5e57613c5d6139d4565b5b92915050565b6000604082019050613c796000830185613342565b613c866020830184613342565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613cef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613cb2565b613cf98683613cb2565b95508019841693508086168417925050509392505050565b6000613d2c613d27613d2284612e79565b6136e5565b612e79565b9050919050565b6000819050919050565b613d4683613d11565b613d5a613d5282613d33565b848454613cbf565b825550505050565b600090565b613d6f613d62565b613d7a818484613d3d565b505050565b5b81811015613d9e57613d93600082613d67565b600181019050613d80565b5050565b601f821115613de357613db481613c8d565b613dbd84613ca2565b81016020851015613dcc578190505b613de0613dd885613ca2565b830182613d7f565b50505b505050565b600082821c905092915050565b6000613e0660001984600802613de8565b1980831691505092915050565b6000613e1f8383613df5565b9150826002028217905092915050565b613e3882612dc7565b67ffffffffffffffff811115613e5157613e506131bb565b5b613e5b825461378e565b613e66828285613da2565b600060209050601f831160018114613e995760008415613e87578287015190505b613e918582613e13565b865550613ef9565b601f198416613ea786613c8d565b60005b82811015613ecf57848901518255600182019150602085019450602081019050613eaa565b86831015613eec5784890151613ee8601f891682613df5565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152613f1b8185612e1e565b9050613f2a6020830184613342565b9392505050565b600081905092915050565b6000613f4782612dc7565b613f518185613f31565b9350613f61818560208601612de3565b80840191505092915050565b6000613f798285613f3c565b9150613f858284613f3c565b91508190509392505050565b7f506c61796572206e6f7420696e697469616c697a656400000000000000000000600082015250565b6000613fc7601683612dd2565b9150613fd282613f91565b602082019050919050565b60006020820190508181036000830152613ff681613fba565b9050919050565b7f496e73756666696369656e7420746f6b656e7320746f2070757263686173652060008201527f6974656d00000000000000000000000000000000000000000000000000000000602082015250565b6000614059602483612dd2565b915061406482613ffd565b604082019050919050565b600060208201905081810360008301526140888161404c565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006140b68261408f565b6140c0818561409a565b93506140d0818560208601612de3565b6140d981612e0d565b840191505092915050565b60006080820190506140f96000830187612f0e565b6141066020830186612f0e565b6141136040830185613342565b818103606083015261412581846140ab565b905095945050505050565b60008151905061413f81612d38565b92915050565b60006020828403121561415b5761415a612d02565b5b600061416984828501614130565b9150509291505056fea264697066735822122009cc9a057aaed3ab9f60a7447aa166fb02f0726f249efe39092d8f09b23fce5464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x206 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F17B79D GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xE2EB41FF GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE2EB41FF EQ PUSH2 0x5AF JUMPI DUP1 PUSH4 0xE7804338 EQ PUSH2 0x5E1 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x5FF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x62F JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x64B JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0xC8DD6CE7 EQ PUSH2 0x545 JUMPI DUP1 PUSH4 0xCAB896DC EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0xD38EA5BF EQ PUSH2 0x593 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0xAFFC55C0 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xAFFC55C0 EQ PUSH2 0x479 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0xBBD94C2F EQ PUSH2 0x4B3 JUMPI DUP1 PUSH4 0xBFB231D2 EQ PUSH2 0x4E3 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x7F17B79D EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x45D JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x372500AB GT PUSH2 0x19D JUMPI DUP1 PUSH4 0x62D6BBDF GT PUSH2 0x16C JUMPI DUP1 PUSH4 0x62D6BBDF EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x70CA3B16 EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3FB JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x372500AB EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x410D59CC EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x5873533D EQ PUSH2 0x347 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x139652E4 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x14F710FE EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2E7 JUMPI PUSH2 0x206 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x931A4D1 EQ PUSH2 0x289 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x2D64 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x74B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x250 SWAP2 SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x273 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x280 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x7F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x2F64 JUMP JUMPDEST PUSH2 0x80B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D6 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x821 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E5 PUSH2 0xAD7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x301 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FC SWAP2 SWAP1 PUSH2 0x2FD1 JUMP JUMPDEST PUSH2 0xB4E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30B PUSH2 0xC50 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x315 PUSH2 0xE1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x322 SWAP2 SWAP1 PUSH2 0x318F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x345 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x340 SWAP2 SWAP1 PUSH2 0x2FD1 JUMP JUMPDEST PUSH2 0xF8B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x35C SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0xFAB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x378 SWAP2 SWAP1 PUSH2 0x32E6 JUMP JUMPDEST PUSH2 0x12EB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x394 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x13A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C4 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x1471 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x403 PUSH2 0x1483 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x1497 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x429 PUSH2 0x14A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH2 0x14D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x477 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0x3398 JUMP JUMPDEST PUSH2 0x1565 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x481 PUSH2 0x157B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4AC SWAP2 SWAP1 PUSH2 0x3479 JUMP JUMPDEST PUSH2 0x1581 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x159E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F8 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x34FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x52F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x52A SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x1683 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x53C SWAP2 SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x55F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x55A SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x16EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x56C SWAP2 SWAP1 PUSH2 0x364C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x57D PUSH2 0x18DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58A SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5AD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A8 SWAP2 SWAP1 PUSH2 0x2EAF JUMP JUMPDEST PUSH2 0x18E3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5C4 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x1C23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x366E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5E9 PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5F6 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x619 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x614 SWAP2 SWAP1 PUSH2 0x36A5 JUMP JUMPDEST PUSH2 0x1C53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x626 SWAP2 SWAP1 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x649 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x644 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x1CE7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x653 PUSH2 0x1D6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x660 SWAP2 SWAP1 PUSH2 0x3744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x734 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x744 JUMPI POP PUSH2 0x743 DUP3 PUSH2 0x1D93 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x75A SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x786 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E8 DUP3 PUSH2 0x1DFD JUMP JUMPDEST POP PUSH2 0x7F2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x801 PUSH2 0x1EC2 JUMP JUMPDEST DUP1 PUSH1 0xB DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x81D DUP3 DUP3 PUSH2 0x818 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0x1F51 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD EQ DUP1 ISZERO PUSH2 0x8B5 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x903 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0xAD4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x943 JUMPI PUSH2 0x942 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x971 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP DUP2 MSTORE POP PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x9EE SWAP3 SWAP2 SWAP1 PUSH2 0x2C45 JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP3 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA51 SWAP3 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA94 SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0xAD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACA SWAP1 PUSH2 0x3876 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE3 PUSH1 0x9 PUSH2 0x1F63 JUMP JUMPDEST SWAP1 POP PUSH2 0xAEF PUSH1 0x9 PUSH2 0x1F71 JUMP JUMPDEST PUSH2 0xAF9 CALLER DUP3 PUSH2 0x1F87 JUMP JUMPDEST CALLER PUSH1 0xF PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBC0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB7 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBD4 DUP4 DUP4 PUSH2 0xBCF PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0x2080 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC4A JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC41 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3896 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xCDF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD6 SWAP1 PUSH2 0x3919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD46 SWAP3 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD89 SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0xDC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDBF SWAP1 PUSH2 0x3985 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFC30CDDEA38E2BF4D6EA7D3F9ED3B6AD7F176419F4963BD81318067A4AEE73FE DUP3 PUSH1 0x40 MLOAD PUSH2 0xE0E SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE28 PUSH1 0x8 PUSH2 0x1F63 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE46 JUMPI PUSH2 0xE45 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE7F JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xE6C PUSH2 0x2C92 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xE64 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF82 JUMPI PUSH1 0xE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xEC5 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xEF1 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF3E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF13 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF3E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF21 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF64 JUMPI PUSH2 0xF63 PUSH2 0x39A5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xF7A SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE85 JUMP JUMPDEST POP DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xFA6 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1581 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1009 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1026 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104A SWAP2 SWAP1 PUSH2 0x3A60 JUMP JUMPDEST LT ISZERO PUSH2 0x108B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1082 SWAP1 PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS PUSH1 0xA SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10EC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AF9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x110B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x112F SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0x116E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1165 SWAP1 PUSH2 0x3B7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1177 CALLER PUSH2 0x821 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11CE SWAP2 SWAP1 PUSH2 0x3B9C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xA DUP3 PUSH2 0x11E2 SWAP2 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11F5 SWAP2 SWAP1 PUSH2 0x3B9C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xB SLOAD DUP2 PUSH1 0x0 ADD SLOAD LT PUSH2 0x1293 JUMPI DUP1 PUSH1 0x2 ADD PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x121E SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0xB SLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1239 SWAP2 SWAP1 PUSH2 0x3C30 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x91E51C29E7E87A74AD3B8CCBA98538970F50A4309242735467F41E27C6B0FBAC DUP3 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x128A SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x24B31E1DBF1732A12BB700D3D77E5FB96FF3B693374D9FA15CCBC03F42715076 DUP4 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x12DF SWAP3 SWAP2 SWAP1 PUSH2 0x3C64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x12F3 PUSH2 0x1EC2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FF PUSH1 0x8 PUSH2 0x1F63 JUMP JUMPDEST SWAP1 POP PUSH2 0x130B PUSH1 0x8 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP PUSH1 0xE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x1358 SWAP2 SWAP1 PUSH2 0x3E2F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP DUP1 PUSH32 0x444434676A57F70F8479401C50FB4ADD3E31052F88F4B35E155B7759E5968E5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1398 SWAP3 SWAP2 SWAP1 PUSH2 0x3F01 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B0 DUP3 PUSH2 0x1DFD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x142A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1421 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1479 PUSH2 0x1EC2 JUMP JUMPDEST DUP1 PUSH1 0xC DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x148B PUSH2 0x1EC2 JUMP JUMPDEST PUSH2 0x1495 PUSH1 0x0 PUSH2 0x229A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x149F PUSH2 0x1EC2 JUMP JUMPDEST DUP1 PUSH1 0xA DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x14E2 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x150E SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x155B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1530 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x155B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x153E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1577 PUSH2 0x1570 PUSH2 0x1F49 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x2360 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x158C DUP5 DUP5 DUP5 PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x1598 DUP5 DUP5 DUP5 DUP5 PUSH2 0x24CF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x15FA SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1626 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1673 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1648 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1673 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1656 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x168E DUP3 PUSH2 0x1DFD JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1699 PUSH2 0x2686 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x16B9 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x16E4 JUMP JUMPDEST DUP1 PUSH2 0x16C3 DUP5 PUSH2 0x269D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x16D4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16F4 PUSH2 0x2CB3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD EQ ISZERO DUP1 PUSH2 0x1789 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO JUMPDEST DUP1 PUSH2 0x17D7 JUMPI POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ ISZERO JUMPDEST PUSH2 0x1816 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x180D SWAP1 PUSH2 0x3FDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x18CD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x18B9 JUMPI JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x191D SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1949 SWAP1 PUSH2 0x378E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1996 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x196B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1996 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1979 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A0B SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A28 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A4C SWAP2 SWAP1 PUSH2 0x3A60 JUMP JUMPDEST LT ISZERO PUSH2 0x1A8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A84 SWAP1 PUSH2 0x406F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AF0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AF9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B33 SWAP2 SWAP1 PUSH2 0x37FD JUMP JUMPDEST PUSH2 0x1B72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B69 SWAP1 PUSH2 0x3B7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x792FE07C0F3CE4EF42DF79C4A2B07925168CDDBAABF7A7EF1351F027A3760313 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CEF PUSH2 0x1EC2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D61 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D58 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D6A DUP2 PUSH2 0x229A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E09 DUP4 PUSH2 0x276B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E7C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E73 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ECA PUSH2 0x1F49 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EE8 PUSH2 0x14A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F47 JUMPI PUSH2 0x1F0B PUSH2 0x1F49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3E SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F5E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x27A8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1FF9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FF0 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2007 DUP4 DUP4 PUSH1 0x0 PUSH2 0x2080 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x207B JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2072 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x208C DUP5 PUSH2 0x276B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x20CE JUMPI PUSH2 0x20CD DUP2 DUP5 DUP7 PUSH2 0x296D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x215F JUMPI PUSH2 0x2110 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x27A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21E2 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x23D1 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23C8 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x24C2 SWAP2 SWAP1 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2680 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2513 PUSH2 0x1F49 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2535 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40E4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2571 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x256E SWAP2 SWAP1 PUSH2 0x4145 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25F5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x25A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x25ED JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25E4 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x267E JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2675 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x26AC DUP5 PUSH2 0x2A31 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26CB JUMPI PUSH2 0x26CA PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x26FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2760 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2754 JUMPI PUSH2 0x2753 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x270B JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x27E1 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2915 JUMPI PUSH1 0x0 PUSH2 0x27F1 DUP5 PUSH2 0x1DFD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x285C JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x286F JUMPI POP PUSH2 0x286D DUP2 DUP5 PUSH2 0x1C53 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x28B1 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28A8 SWAP2 SWAP1 PUSH2 0x2F1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x2913 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2978 DUP4 DUP4 DUP4 PUSH2 0x2B84 JUMP JUMPDEST PUSH2 0x2A2C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x29ED JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29E4 SWAP2 SWAP1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A23 SWAP3 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2A8F JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2A85 JUMPI PUSH2 0x2A84 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2ACC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2AC2 JUMPI PUSH2 0x2AC1 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2AFB JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2AF1 JUMPI PUSH2 0x2AF0 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2B24 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2B1A JUMPI PUSH2 0x2B19 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2B49 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2B3F JUMPI PUSH2 0x2B3E PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2B6C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2B62 JUMPI PUSH2 0x2B61 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2B7B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2C3C JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2BFD JUMPI POP PUSH2 0x2BFC DUP5 DUP5 PUSH2 0x1C53 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2C3B JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C23 DUP4 PUSH2 0x1E85 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2C81 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2C80 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x2C8E SWAP2 SWAP1 PUSH2 0x2CDB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2CF4 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x2CDC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D41 DUP2 PUSH2 0x2D0C JUMP JUMPDEST DUP2 EQ PUSH2 0x2D4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2D5E DUP2 PUSH2 0x2D38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D7A JUMPI PUSH2 0x2D79 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D88 DUP5 DUP3 DUP6 ADD PUSH2 0x2D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DA6 DUP2 PUSH2 0x2D91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DC1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D9D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E01 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2DE6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E29 DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH2 0x2E33 DUP2 DUP6 PUSH2 0x2DD2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E43 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST PUSH2 0x2E4C DUP2 PUSH2 0x2E0D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E71 DUP2 DUP5 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E8C DUP2 PUSH2 0x2E79 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2EA9 DUP2 PUSH2 0x2E83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EC5 JUMPI PUSH2 0x2EC4 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2ED3 DUP5 DUP3 DUP6 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F07 DUP3 PUSH2 0x2EDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F17 DUP2 PUSH2 0x2EFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F32 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F0E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F41 DUP2 PUSH2 0x2EFC JUMP JUMPDEST DUP2 EQ PUSH2 0x2F4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F5E DUP2 PUSH2 0x2F38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F7B JUMPI PUSH2 0x2F7A PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F89 DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F9A DUP6 DUP3 DUP7 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FBA JUMPI PUSH2 0x2FB9 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FC8 DUP5 DUP3 DUP6 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FEA JUMPI PUSH2 0x2FE9 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FF8 DUP7 DUP3 DUP8 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3009 DUP7 DUP3 DUP8 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x301A DUP7 DUP3 DUP8 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3059 DUP2 PUSH2 0x2E79 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x307B DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH2 0x3085 DUP2 DUP6 PUSH2 0x305F JUMP JUMPDEST SWAP4 POP PUSH2 0x3095 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST PUSH2 0x309E DUP2 PUSH2 0x2E0D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x30C1 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x30D9 DUP3 DUP3 PUSH2 0x3070 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x30EE PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3105 DUP4 DUP4 PUSH2 0x30A9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3125 DUP3 PUSH2 0x3024 JUMP JUMPDEST PUSH2 0x312F DUP2 DUP6 PUSH2 0x302F JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x3141 DUP6 PUSH2 0x3040 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x317D JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x315E DUP6 DUP3 PUSH2 0x30F9 JUMP JUMPDEST SWAP5 POP PUSH2 0x3169 DUP4 PUSH2 0x310D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3145 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31A9 DUP2 DUP5 PUSH2 0x311A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x31F3 DUP3 PUSH2 0x2E0D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3212 JUMPI PUSH2 0x3211 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3225 PUSH2 0x2CF8 JUMP JUMPDEST SWAP1 POP PUSH2 0x3231 DUP3 DUP3 PUSH2 0x31EA JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3251 JUMPI PUSH2 0x3250 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x325A DUP3 PUSH2 0x2E0D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3289 PUSH2 0x3284 DUP5 PUSH2 0x3236 JUMP JUMPDEST PUSH2 0x321B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x32A5 JUMPI PUSH2 0x32A4 PUSH2 0x31B6 JUMP JUMPDEST JUMPDEST PUSH2 0x32B0 DUP5 DUP3 DUP6 PUSH2 0x3267 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x32CD JUMPI PUSH2 0x32CC PUSH2 0x31B1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x32DD DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3276 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32FD JUMPI PUSH2 0x32FC PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x331B JUMPI PUSH2 0x331A PUSH2 0x2D07 JUMP JUMPDEST JUMPDEST PUSH2 0x3327 DUP6 DUP3 DUP7 ADD PUSH2 0x32B8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3338 DUP6 DUP3 DUP7 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x334B DUP2 PUSH2 0x2E79 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3366 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3375 DUP2 PUSH2 0x2D91 JUMP JUMPDEST DUP2 EQ PUSH2 0x3380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3392 DUP2 PUSH2 0x336C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33AF JUMPI PUSH2 0x33AE PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33BD DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x33CE DUP6 DUP3 DUP7 ADD PUSH2 0x3383 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x33F3 JUMPI PUSH2 0x33F2 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x33FC DUP3 PUSH2 0x2E0D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x341C PUSH2 0x3417 DUP5 PUSH2 0x33D8 JUMP JUMPDEST PUSH2 0x321B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3438 JUMPI PUSH2 0x3437 PUSH2 0x31B6 JUMP JUMPDEST JUMPDEST PUSH2 0x3443 DUP5 DUP3 DUP6 PUSH2 0x3267 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3460 JUMPI PUSH2 0x345F PUSH2 0x31B1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3470 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3409 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3493 JUMPI PUSH2 0x3492 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34A1 DUP8 DUP3 DUP9 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x34B2 DUP8 DUP3 DUP9 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x34C3 DUP8 DUP3 DUP9 ADD PUSH2 0x2E9A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34E4 JUMPI PUSH2 0x34E3 PUSH2 0x2D07 JUMP JUMPDEST JUMPDEST PUSH2 0x34F0 DUP8 DUP3 DUP9 ADD PUSH2 0x344B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3511 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3342 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3523 DUP2 DUP6 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP PUSH2 0x3532 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3572 DUP4 DUP4 PUSH2 0x3050 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3596 DUP3 PUSH2 0x353A JUMP JUMPDEST PUSH2 0x35A0 DUP2 DUP6 PUSH2 0x3545 JUMP JUMPDEST SWAP4 POP PUSH2 0x35AB DUP4 PUSH2 0x3556 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35DC JUMPI DUP2 MLOAD PUSH2 0x35C3 DUP9 DUP3 PUSH2 0x3566 JUMP JUMPDEST SWAP8 POP PUSH2 0x35CE DUP4 PUSH2 0x357E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x35AF JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x3601 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3614 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x3627 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x3050 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x363F DUP3 DUP3 PUSH2 0x358B JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3666 DUP2 DUP5 PUSH2 0x35E9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3683 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x3690 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x369D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36BC JUMPI PUSH2 0x36BB PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36CA DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x36DB DUP6 DUP3 DUP7 ADD PUSH2 0x2F4F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370A PUSH2 0x3705 PUSH2 0x3700 DUP5 PUSH2 0x2EDC JUMP JUMPDEST PUSH2 0x36E5 JUMP JUMPDEST PUSH2 0x2EDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x371C DUP3 PUSH2 0x36EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x372E DUP3 PUSH2 0x3711 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x373E DUP2 PUSH2 0x3723 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3759 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3735 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x37A6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x37B9 JUMPI PUSH2 0x37B8 PUSH2 0x375F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x37D4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x37E1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x37F7 DUP2 PUSH2 0x336C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3813 JUMPI PUSH2 0x3812 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3821 DUP5 DUP3 DUP6 ADD PUSH2 0x37E8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x41697264726F70206661696C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3860 PUSH1 0xE DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x386B DUP3 PUSH2 0x382A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x388F DUP2 PUSH2 0x3853 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x38AB PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x38B8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x38C5 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F0E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E6F207265776172647320746F20636C61696D00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3903 PUSH1 0x13 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x390E DUP3 PUSH2 0x38CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3932 DUP2 PUSH2 0x38F6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526577617264207472616E73666572206661696C656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x396F PUSH1 0x16 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x397A DUP3 PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x399E DUP2 PUSH2 0x3962 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A0E DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3A40 JUMPI PUSH2 0x3A3F PUSH2 0x39D4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3A5A DUP2 PUSH2 0x2E83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A76 JUMPI PUSH2 0x3A75 PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A84 DUP5 DUP3 DUP6 ADD PUSH2 0x3A4B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420746F6B656E7320746F20706C61790000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AC3 PUSH1 0x1B DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3ACE DUP3 PUSH2 0x3A8D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AF2 DUP2 PUSH2 0x3AB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3B0E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x3B1B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x3B28 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x546F6B656E207472616E73666572206661696C65640000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B66 PUSH1 0x15 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B71 DUP3 PUSH2 0x3B30 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B95 DUP2 PUSH2 0x3B59 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BA7 DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BB2 DUP4 PUSH2 0x2E79 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BCA JUMPI PUSH2 0x3BC9 PUSH2 0x39D4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3C0A DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C15 DUP4 PUSH2 0x2E79 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3C25 JUMPI PUSH2 0x3C24 PUSH2 0x3BD0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C3B DUP3 PUSH2 0x2E79 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C46 DUP4 PUSH2 0x2E79 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3C5E JUMPI PUSH2 0x3C5D PUSH2 0x39D4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3C79 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST PUSH2 0x3C86 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3CEF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3CB2 JUMP JUMPDEST PUSH2 0x3CF9 DUP7 DUP4 PUSH2 0x3CB2 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D2C PUSH2 0x3D27 PUSH2 0x3D22 DUP5 PUSH2 0x2E79 JUMP JUMPDEST PUSH2 0x36E5 JUMP JUMPDEST PUSH2 0x2E79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D46 DUP4 PUSH2 0x3D11 JUMP JUMPDEST PUSH2 0x3D5A PUSH2 0x3D52 DUP3 PUSH2 0x3D33 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3CBF JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3D6F PUSH2 0x3D62 JUMP JUMPDEST PUSH2 0x3D7A DUP2 DUP5 DUP5 PUSH2 0x3D3D JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D9E JUMPI PUSH2 0x3D93 PUSH1 0x0 DUP3 PUSH2 0x3D67 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3D80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3DE3 JUMPI PUSH2 0x3DB4 DUP2 PUSH2 0x3C8D JUMP JUMPDEST PUSH2 0x3DBD DUP5 PUSH2 0x3CA2 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3DCC JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3DE0 PUSH2 0x3DD8 DUP6 PUSH2 0x3CA2 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3D7F JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E06 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3DE8 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E1F DUP4 DUP4 PUSH2 0x3DF5 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E38 DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E51 JUMPI PUSH2 0x3E50 PUSH2 0x31BB JUMP JUMPDEST JUMPDEST PUSH2 0x3E5B DUP3 SLOAD PUSH2 0x378E JUMP JUMPDEST PUSH2 0x3E66 DUP3 DUP3 DUP6 PUSH2 0x3DA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3E99 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3E87 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3E91 DUP6 DUP3 PUSH2 0x3E13 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3EF9 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3EA7 DUP7 PUSH2 0x3C8D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3ECF JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3EAA JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3EEC JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3EE8 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3DF5 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F1B DUP2 DUP6 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP PUSH2 0x3F2A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3342 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F47 DUP3 PUSH2 0x2DC7 JUMP JUMPDEST PUSH2 0x3F51 DUP2 DUP6 PUSH2 0x3F31 JUMP JUMPDEST SWAP4 POP PUSH2 0x3F61 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F79 DUP3 DUP6 PUSH2 0x3F3C JUMP JUMPDEST SWAP2 POP PUSH2 0x3F85 DUP3 DUP5 PUSH2 0x3F3C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x506C61796572206E6F7420696E697469616C697A656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC7 PUSH1 0x16 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FD2 DUP3 PUSH2 0x3F91 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FF6 DUP2 PUSH2 0x3FBA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420746F6B656E7320746F20707572636861736520 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6974656D00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4059 PUSH1 0x24 DUP4 PUSH2 0x2DD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x4064 DUP3 PUSH2 0x3FFD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4088 DUP2 PUSH2 0x404C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40B6 DUP3 PUSH2 0x408F JUMP JUMPDEST PUSH2 0x40C0 DUP2 DUP6 PUSH2 0x409A JUMP JUMPDEST SWAP4 POP PUSH2 0x40D0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST PUSH2 0x40D9 DUP2 PUSH2 0x2E0D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x40F9 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x4106 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2F0E JUMP JUMPDEST PUSH2 0x4113 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3342 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4125 DUP2 DUP5 PUSH2 0x40AB JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x413F DUP2 PUSH2 0x2D38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x415B JUMPI PUSH2 0x415A PUSH2 0x2D02 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4169 DUP5 DUP3 DUP6 ADD PUSH2 0x4130 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD 0xCC SWAP11 SDIV PUSH27 0xAED3AB9F60A7447AA166FB02F0726F249EFE39092D8F09B23FCE54 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"259:4854:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:300:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3497:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4842:114:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3323:113:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1715:440:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3252:197;;;:::i;:::-;;4143:578:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2887:357:13;;;:::i;:::-;;4420:308;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4787:132:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2163:716:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3457:274;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2185:118:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1920:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4964:146:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2293:101:0;;;:::i;:::-;;4736:98:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1638:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2518:93:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3718:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;721:27:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4985:208:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;891:44:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;847:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;2677:255:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4152:260:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;691:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3739:405;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;799:41;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;755:35;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3928:153:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;574:19:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1561:300:3;1663:4;1713:25;1698:40;;;:11;:40;;;;:104;;;;1769:33;1754:48;;;:11;:48;;;;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;:::-;1698:156;1679:175;;1561:300;;;:::o;2365:89::-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;;3623:21;3636:7;3623:12;:21::i;:::-;3616:28;;3497:154;;;:::o;4842:114:13:-;1531:13:0;:11;:13::i;:::-;4935::13::1;4920:12;:28;;;;4842:114:::0;:::o;3323:113:3:-;3394:35;3403:2;3407:7;3416:12;:10;:12::i;:::-;3394:8;:35::i;:::-;3323:113;;:::o;1715:440:13:-;1818:1;1786:7;:22;1794:13;1786:22;;;;;;;;;;;;;;;:28;;;:33;:70;;;;;1855:1;1823:7;:22;1831:13;1823:22;;;;;;;;;;;;;;;:28;;;:33;1786:70;:109;;;;;1894:1;1860:7;:22;1868:13;1860:22;;;;;;;;;;;;;;;:30;;;:35;1786:109;1782:366;;;1937:33;;;;;;;;1944:1;1937:33;;;;1947:1;1937:33;;;;1950:1;1937:33;;;;1967:1;1953:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1937:33;;;1912:7;:22;1920:13;1912:22;;;;;;;;;;;;;;;:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2034:5;;;;;;;;;;;:14;;;2049:13;2064:20;;2034:51;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2026:78;;;;;;;;;;;;:::i;:::-;;;;;;;;;1782:366;1715:440;:::o;3252:197::-;3289:13;3305:23;:13;:21;:23::i;:::-;3289:39;;3339:25;:13;:23;:25::i;:::-;3377:24;3383:10;3395:5;3377;:24::i;:::-;3431:10;3412:9;:16;3422:5;3412:16;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3278:171;3252:197::o;4143:578:3:-;4251:1;4237:16;;:2;:16;;;4233:87;;4306:1;4276:33;;;;;;;;;;;:::i;:::-;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;4583:12;:10;:12::i;:::-;4562:7;:34::i;:::-;4538:58;;4627:4;4610:21;;:13;:21;;;4606:109;;4675:4;4681:7;4690:13;4654:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4606:109;4223:498;4143:578;;;:::o;2887:357:13:-;2931:21;2955:7;:19;2963:10;2955:19;;;;;;;;;;;;;;;2931:43;;2985:15;3003:6;:14;;;2985:32;;3046:1;3036:7;:11;3028:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;3101:1;3084:6;:14;;:18;;;;3121:5;;;;;;;;;;;:14;;;3136:10;3148:7;3121:35;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3113:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;3216:10;3201:35;;;3228:7;3201:35;;;;;;:::i;:::-;;;;;;;;2920:324;;2887:357::o;4420:308::-;4464:13;4490:17;4510:24;:14;:22;:24::i;:::-;4490:44;;4545:22;4581:9;4570:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;4545:46;;4609:9;4604:89;4628:9;4624:1;:13;4604:89;;;4673:5;:8;4679:1;4673:8;;;;;;;;;;;4659:22;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:8;4668:1;4659:11;;;;;;;;:::i;:::-;;;;;;;:22;;;;4639:3;;;;;:::i;:::-;;;;4604:89;;;;4712:8;4705:15;;;;4420:308;:::o;4787:132:3:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;2163:716:13:-;2254:8;;2223:5;;;;;;;;;;;:15;;;2239:10;2223:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:39;;2215:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;2313:5;;;;;;;;;;;:18;;;2332:10;2352:4;2359:8;;2313:55;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2305:89;;;;;;;;;;;;:::i;:::-;;;;;;;;;2407:28;2424:10;2407:16;:28::i;:::-;2480:21;2504:7;:19;2512:10;2504:19;;;;;;;;;;;;;;;2480:43;;2550:6;2534;:12;;;:22;;;;;;;:::i;:::-;;;;;;;;2594:2;2585:6;:11;;;;:::i;:::-;2567:6;:14;;;:29;;;;;;;:::i;:::-;;;;;;;;2659:12;;2643:6;:12;;;:28;2639:171;;2688:6;:12;;;:14;;;;;;;;;:::i;:::-;;;;;;2733:12;;2717:6;:12;;;:28;;;;;;;:::i;:::-;;;;;;;;2773:10;2765:33;;;2785:6;:12;;;2765:33;;;;;;:::i;:::-;;;;;;;;2639:171;2838:10;2827:44;;;2850:6;2858;:12;;;2827:44;;;;;;;:::i;:::-;;;;;;;;2204:675;2163:716;:::o;3457:274::-;1531:13:0;:11;:13::i;:::-;3541:14:13::1;3558:24;:14;:22;:24::i;:::-;3541:41;;3593:26;:14;:24;:26::i;:::-;3648:27;;;;;;;;3653:6;3648:27;;;;3661:5;3648:27;;;;3668:6;3648:27;;::::0;3632:5:::1;:13;3638:6;3632:13;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3701:6;3691:32;3709:5;3716:6;3691:32;;;;;;;:::i;:::-;;;;;;;;3530:201;3457:274:::0;;:::o;2185:118:3:-;2248:7;2274:22;2288:7;2274:13;:22::i;:::-;2267:29;;2185:118;;;:::o;1920:208::-;1983:7;2023:1;2006:19;;:5;:19;;;2002:87;;2075:1;2048:30;;;;;;;;;;;:::i;:::-;;;;;;;;2002:87;2105:9;:16;2115:5;2105:16;;;;;;;;;;;;;;;;2098:23;;1920:208;;;:::o;4964:146:13:-;1531:13:0;:11;:13::i;:::-;5081:21:13::1;5058:20;:44;;;;4964:146:::0;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;4736:98:13:-;1531:13:0;:11;:13::i;:::-;4817:9:13::1;4806:8;:20;;;;4736:98:::0;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2518:93:3:-;2565:13;2597:7;2590:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2518:93;:::o;3718:144::-;3803:52;3822:12;:10;:12::i;:::-;3836:8;3846;3803:18;:52::i;:::-;3718:144;;:::o;721:27:13:-;;;;:::o;4985:208:3:-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;:::-;4985:208;;;;:::o;891:44:13:-;;;;;;;;;;;;;;;;;;;;;;:::o;847:37::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2677:255:3:-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;:8;:10::i;:::-;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2850:75;2843:82;;;2677:255;;;:::o;4152:260:13:-;4218:13;;:::i;:::-;4278:1;4252:7;:16;4260:7;4252:16;;;;;;;;;;;;;;;:22;;;:27;;:58;;;;4309:1;4283:7;:16;4291:7;4283:16;;;;;;;;;;;;;;;:22;;;:27;;4252:58;:91;;;;4342:1;4314:7;:16;4322:7;4314:16;;;;;;;;;;;;;;;:24;;;:29;;4252:91;4244:126;;;;;;;;;;;;:::i;:::-;;;;;;;;;4388:7;:16;4396:7;4388:16;;;;;;;;;;;;;;;4381:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4152:260;;;:::o;691:23::-;;;;:::o;3739:405::-;3798:16;3817:5;:14;3823:7;3817:14;;;;;;;;;;;3798:33;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3881:4;:10;;;3850:5;;;;;;;;;;;:15;;;3866:10;3850:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;3842:90;;;;;;;;;;;;:::i;:::-;;;;;;;;;3951:5;;;;;;;;;;;:18;;;3970:10;3990:4;3997;:10;;;3951:57;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3943:91;;;;;;;;;;;;:::i;:::-;;;;;;;;;4047:7;:19;4055:10;4047:19;;;;;;;;;;;;;;;:25;;4078:7;4047:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4128:7;4116:10;4102:34;;;;;;;;;;;;3787:357;3739:405;:::o;799:41::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;755:35::-;;;;:::o;3928:153:3:-;4016:4;4039:18;:25;4058:5;4039:25;;;;;;;;;;;;;;;:35;4065:8;4039:35;;;;;;;;;;;;;;;;;;;;;;;;;4032:42;;3928:153;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;574:19:13:-;;;;;;;;;;;;;:::o;762:146:9:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;16138:241:3:-;16201:7;16220:13;16236:17;16245:7;16236:8;:17::i;:::-;16220:33;;16284:1;16267:19;;:5;:19;;;16263:88;;16332:7;16309:31;;;;;;;;;;;:::i;:::-;;;;;;;;16263:88;16367:5;16360:12;;;16138:241;;;:::o;5938:127::-;6008:7;6034:15;:24;6050:7;6034:24;;;;;;;;;;;;;;;;;;;;;6027:31;;5938:127;;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;656:96:7:-;709:7;735:10;728:17;;656:96;:::o;14418:120:3:-;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;:::-;14418:120;;;:::o;848:114:14:-;913:7;940;:14;;;933:21;;848:114;;;:::o;970:127::-;1077:1;1059:7;:14;;;:19;;;;;;;;;;;970:127;:::o;9955:327:3:-;10036:1;10022:16;;:2;:16;;;10018:87;;10091:1;10061:33;;;;;;;;;;;:::i;:::-;;;;;;;;10018:87;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;;10209:1;10184:27;;:13;:27;;;10180:96;;10262:1;10234:31;;;;;;;;;;;:::i;:::-;;;;;;;;10180:96;10008:274;9955:327;;:::o;8838:795::-;8924:7;8943:12;8958:17;8967:7;8958:8;:17::i;:::-;8943:32;;9051:1;9035:18;;:4;:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;9031:86;9177:1;9161:18;;:4;:18;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;9387:1;9368:9;:15;9378:4;9368:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9157:256;9441:1;9427:16;;:2;:16;;;9423:107;;9504:1;9487:9;:13;9497:2;9487:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9423:107;9559:2;9540:7;:16;9548:7;9540:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9596:7;9592:2;9577:27;;9586:4;9577:27;;;;;;;;;;;;9622:4;9615:11;;;8838:795;;;;;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;15591:312:3:-;15718:1;15698:22;;:8;:22;;;15694:91;;15765:8;15743:31;;;;;;;;;;;:::i;:::-;;;;;;;;15694:91;15832:8;15794:18;:25;15813:5;15794:25;;;;;;;;;;;;;;;:35;15820:8;15794:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15877:8;15855:41;;15870:5;15855:41;;;15887:8;15855:41;;;;;;:::i;:::-;;;;;;;;15591:312;;;:::o;16918:782::-;17051:1;17034:2;:14;;;:18;17030:664;;;17088:2;17072:36;;;17109:12;:10;:12::i;:::-;17123:4;17129:7;17138:4;17072:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17398:1;17381:6;:13;:18;17377:293;;17452:2;17430:25;;;;;;;;;;;:::i;:::-;;;;;;;;17377:293;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;17200:41;;;17190:51;;;:6;:51;;;;17186:130;;17294:2;17272:25;;;;;;;;;;;:::i;:::-;;;;;;;;17186:130;17144:186;17030:664;16918:782;;;;:::o;3174:92::-;3225:13;3250:9;;;;;;;;;;;;;;3174:92;:::o;637:698:8:-;693:13;742:14;779:1;759:17;770:5;759:10;:17::i;:::-;:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:41;;849:11;975:6;971:2;967:15;959:6;955:28;948:35;;1010:282;1017:4;1010:282;;;1041:5;;;;;;;;1180:10;1175:2;1168:5;1164:14;1159:32;1154:3;1146:46;1236:2;1227:11;;;;;;:::i;:::-;;;;;1269:1;1260:5;:10;1010:282;1256:21;1010:282;1312:6;1305:13;;;;;637:698;;;:::o;5707:115:3:-;5773:7;5799;:16;5807:7;5799:16;;;;;;;;;;;;;;;;;;;;;5792:23;;5707:115;;;:::o;14720:662::-;14880:9;:31;;;;14909:1;14893:18;;:4;:18;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;;15109:1;15093:18;;:4;:18;;;;:35;;;;;15124:4;15115:13;;:5;:13;;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15211:4;15189:27;;;;;;;;;;;:::i;:::-;;;;;;;;15089:142;15249:9;15245:81;;;15303:7;15299:2;15283:28;;15292:5;15283:28;;;;;;;;;;;;15245:81;14913:423;14876:460;15373:2;15346:15;:24;15362:7;15346:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14720:662;;;;:::o;7082:368::-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;7269:1;7252:19;;:5;:19;;;7248:186;;7321:7;7298:31;;;;;;;;;;;:::i;:::-;;;;;;;;7248:186;7402:7;7411;7375:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7189:255;7082:368;;;:::o;12214:916:11:-;12267:7;12286:14;12303:1;12286:18;;12351:8;12342:5;:17;12338:103;;12388:8;12379:17;;;;;;:::i;:::-;;;;;12424:2;12414:12;;;;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;;;;:::i;:::-;;;;;12540:2;12530:12;;;;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;;;;:::i;:::-;;;;;12656:2;12646:12;;;;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;;;;:::i;:::-;;;;;12770:1;12760:11;;;;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;;;;:::i;:::-;;;;;12883:1;12873:11;;;;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;;;;:::i;:::-;;;;;12996:1;12986:11;;;;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;;;;13025:66;13117:6;13110:13;;;12214:916;;;:::o;6376:272:3:-;6479:4;6533:1;6514:21;;:7;:21;;;;:127;;;;;6561:7;6552:16;;:5;:16;;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:52;:88;;;;6633:7;6608:32;;:21;6621:7;6608:12;:21::i;:::-;:32;;;6552:88;6514:127;6495:146;;6376:272;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:15:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:329::-;4949:6;4998:2;4986:9;4977:7;4973:23;4969:32;4966:119;;;5004:79;;:::i;:::-;4966:119;5124:1;5149:53;5194:7;5185:6;5174:9;5170:22;5149:53;:::i;:::-;5139:63;;5095:117;4890:329;;;;:::o;5225:619::-;5302:6;5310;5318;5367:2;5355:9;5346:7;5342:23;5338:32;5335:119;;;5373:79;;:::i;:::-;5335:119;5493:1;5518:53;5563:7;5554:6;5543:9;5539:22;5518:53;:::i;:::-;5508:63;;5464:117;5620:2;5646:53;5691:7;5682:6;5671:9;5667:22;5646:53;:::i;:::-;5636:63;;5591:118;5748:2;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5719:118;5225:619;;;;;:::o;5850:136::-;5939:6;5973:5;5967:12;5957:22;;5850:136;;;:::o;5992:206::-;6113:11;6147:6;6142:3;6135:19;6187:4;6182:3;6178:14;6163:29;;5992:206;;;;:::o;6204:154::-;6293:4;6316:3;6308:11;;6346:4;6341:3;6337:14;6329:22;;6204:154;;;:::o;6364:108::-;6441:24;6459:5;6441:24;:::i;:::-;6436:3;6429:37;6364:108;;:::o;6478:159::-;6552:11;6586:6;6581:3;6574:19;6626:4;6621:3;6617:14;6602:29;;6478:159;;;;:::o;6643:357::-;6721:3;6749:39;6782:5;6749:39;:::i;:::-;6804:61;6858:6;6853:3;6804:61;:::i;:::-;6797:68;;6874:65;6932:6;6927:3;6920:4;6913:5;6909:16;6874:65;:::i;:::-;6964:29;6986:6;6964:29;:::i;:::-;6959:3;6955:39;6948:46;;6725:275;6643:357;;;;:::o;7062:763::-;7165:3;7201:4;7196:3;7192:14;7286:4;7279:5;7275:16;7269:23;7305:63;7362:4;7357:3;7353:14;7339:12;7305:63;:::i;:::-;7216:162;7460:4;7453:5;7449:16;7443:23;7513:3;7507:4;7503:14;7496:4;7491:3;7487:14;7480:38;7539:73;7607:4;7593:12;7539:73;:::i;:::-;7531:81;;7388:235;7706:4;7699:5;7695:16;7689:23;7725:63;7782:4;7777:3;7773:14;7759:12;7725:63;:::i;:::-;7633:165;7815:4;7808:11;;7170:655;7062:763;;;;:::o;7831:244::-;7944:10;7979:90;8065:3;8057:6;7979:90;:::i;:::-;7965:104;;7831:244;;;;:::o;8081:135::-;8173:4;8205;8200:3;8196:14;8188:22;;8081:135;;;:::o;8282:1087::-;8445:3;8474:76;8544:5;8474:76;:::i;:::-;8566:108;8667:6;8662:3;8566:108;:::i;:::-;8559:115;;8700:3;8745:4;8737:6;8733:17;8728:3;8724:27;8775:78;8847:5;8775:78;:::i;:::-;8876:7;8907:1;8892:432;8917:6;8914:1;8911:13;8892:432;;;8988:9;8982:4;8978:20;8973:3;8966:33;9039:6;9033:13;9067:108;9170:4;9155:13;9067:108;:::i;:::-;9059:116;;9198:82;9273:6;9198:82;:::i;:::-;9188:92;;9309:4;9304:3;9300:14;9293:21;;8952:372;8939:1;8936;8932:9;8927:14;;8892:432;;;8896:14;9340:4;9333:11;;9360:3;9353:10;;8450:919;;;;;8282:1087;;;;:::o;9375:461::-;9562:4;9600:2;9589:9;9585:18;9577:26;;9649:9;9643:4;9639:20;9635:1;9624:9;9620:17;9613:47;9677:152;9824:4;9815:6;9677:152;:::i;:::-;9669:160;;9375:461;;;;:::o;9842:117::-;9951:1;9948;9941:12;9965:117;10074:1;10071;10064:12;10088:180;10136:77;10133:1;10126:88;10233:4;10230:1;10223:15;10257:4;10254:1;10247:15;10274:281;10357:27;10379:4;10357:27;:::i;:::-;10349:6;10345:40;10487:6;10475:10;10472:22;10451:18;10439:10;10436:34;10433:62;10430:88;;;10498:18;;:::i;:::-;10430:88;10538:10;10534:2;10527:22;10317:238;10274:281;;:::o;10561:129::-;10595:6;10622:20;;:::i;:::-;10612:30;;10651:33;10679:4;10671:6;10651:33;:::i;:::-;10561:129;;;:::o;10696:308::-;10758:4;10848:18;10840:6;10837:30;10834:56;;;10870:18;;:::i;:::-;10834:56;10908:29;10930:6;10908:29;:::i;:::-;10900:37;;10992:4;10986;10982:15;10974:23;;10696:308;;;:::o;11010:146::-;11107:6;11102:3;11097;11084:30;11148:1;11139:6;11134:3;11130:16;11123:27;11010:146;;;:::o;11162:425::-;11240:5;11265:66;11281:49;11323:6;11281:49;:::i;:::-;11265:66;:::i;:::-;11256:75;;11354:6;11347:5;11340:21;11392:4;11385:5;11381:16;11430:3;11421:6;11416:3;11412:16;11409:25;11406:112;;;11437:79;;:::i;:::-;11406:112;11527:54;11574:6;11569:3;11564;11527:54;:::i;:::-;11246:341;11162:425;;;;;:::o;11607:340::-;11663:5;11712:3;11705:4;11697:6;11693:17;11689:27;11679:122;;11720:79;;:::i;:::-;11679:122;11837:6;11824:20;11862:79;11937:3;11929:6;11922:4;11914:6;11910:17;11862:79;:::i;:::-;11853:88;;11669:278;11607:340;;;;:::o;11953:654::-;12031:6;12039;12088:2;12076:9;12067:7;12063:23;12059:32;12056:119;;;12094:79;;:::i;:::-;12056:119;12242:1;12231:9;12227:17;12214:31;12272:18;12264:6;12261:30;12258:117;;;12294:79;;:::i;:::-;12258:117;12399:63;12454:7;12445:6;12434:9;12430:22;12399:63;:::i;:::-;12389:73;;12185:287;12511:2;12537:53;12582:7;12573:6;12562:9;12558:22;12537:53;:::i;:::-;12527:63;;12482:118;11953:654;;;;;:::o;12613:118::-;12700:24;12718:5;12700:24;:::i;:::-;12695:3;12688:37;12613:118;;:::o;12737:222::-;12830:4;12868:2;12857:9;12853:18;12845:26;;12881:71;12949:1;12938:9;12934:17;12925:6;12881:71;:::i;:::-;12737:222;;;;:::o;12965:116::-;13035:21;13050:5;13035:21;:::i;:::-;13028:5;13025:32;13015:60;;13071:1;13068;13061:12;13015:60;12965:116;:::o;13087:133::-;13130:5;13168:6;13155:20;13146:29;;13184:30;13208:5;13184:30;:::i;:::-;13087:133;;;;:::o;13226:468::-;13291:6;13299;13348:2;13336:9;13327:7;13323:23;13319:32;13316:119;;;13354:79;;:::i;:::-;13316:119;13474:1;13499:53;13544:7;13535:6;13524:9;13520:22;13499:53;:::i;:::-;13489:63;;13445:117;13601:2;13627:50;13669:7;13660:6;13649:9;13645:22;13627:50;:::i;:::-;13617:60;;13572:115;13226:468;;;;;:::o;13700:307::-;13761:4;13851:18;13843:6;13840:30;13837:56;;;13873:18;;:::i;:::-;13837:56;13911:29;13933:6;13911:29;:::i;:::-;13903:37;;13995:4;13989;13985:15;13977:23;;13700:307;;;:::o;14013:423::-;14090:5;14115:65;14131:48;14172:6;14131:48;:::i;:::-;14115:65;:::i;:::-;14106:74;;14203:6;14196:5;14189:21;14241:4;14234:5;14230:16;14279:3;14270:6;14265:3;14261:16;14258:25;14255:112;;;14286:79;;:::i;:::-;14255:112;14376:54;14423:6;14418:3;14413;14376:54;:::i;:::-;14096:340;14013:423;;;;;:::o;14455:338::-;14510:5;14559:3;14552:4;14544:6;14540:17;14536:27;14526:122;;14567:79;;:::i;:::-;14526:122;14684:6;14671:20;14709:78;14783:3;14775:6;14768:4;14760:6;14756:17;14709:78;:::i;:::-;14700:87;;14516:277;14455:338;;;;:::o;14799:943::-;14894:6;14902;14910;14918;14967:3;14955:9;14946:7;14942:23;14938:33;14935:120;;;14974:79;;:::i;:::-;14935:120;15094:1;15119:53;15164:7;15155:6;15144:9;15140:22;15119:53;:::i;:::-;15109:63;;15065:117;15221:2;15247:53;15292:7;15283:6;15272:9;15268:22;15247:53;:::i;:::-;15237:63;;15192:118;15349:2;15375:53;15420:7;15411:6;15400:9;15396:22;15375:53;:::i;:::-;15365:63;;15320:118;15505:2;15494:9;15490:18;15477:32;15536:18;15528:6;15525:30;15522:117;;;15558:79;;:::i;:::-;15522:117;15663:62;15717:7;15708:6;15697:9;15693:22;15663:62;:::i;:::-;15653:72;;15448:287;14799:943;;;;;;;:::o;15748:533::-;15917:4;15955:2;15944:9;15940:18;15932:26;;15968:71;16036:1;16025:9;16021:17;16012:6;15968:71;:::i;:::-;16086:9;16080:4;16076:20;16071:2;16060:9;16056:18;16049:48;16114:78;16187:4;16178:6;16114:78;:::i;:::-;16106:86;;16202:72;16270:2;16259:9;16255:18;16246:6;16202:72;:::i;:::-;15748:533;;;;;;:::o;16287:114::-;16354:6;16388:5;16382:12;16372:22;;16287:114;;;:::o;16407:174::-;16496:11;16530:6;16525:3;16518:19;16570:4;16565:3;16561:14;16546:29;;16407:174;;;;:::o;16587:132::-;16654:4;16677:3;16669:11;;16707:4;16702:3;16698:14;16690:22;;16587:132;;;:::o;16725:179::-;16794:10;16815:46;16857:3;16849:6;16815:46;:::i;:::-;16893:4;16888:3;16884:14;16870:28;;16725:179;;;;:::o;16910:113::-;16980:4;17012;17007:3;17003:14;16995:22;;16910:113;;;:::o;17059:712::-;17168:3;17197:54;17245:5;17197:54;:::i;:::-;17267:76;17336:6;17331:3;17267:76;:::i;:::-;17260:83;;17367:56;17417:5;17367:56;:::i;:::-;17446:7;17477:1;17462:284;17487:6;17484:1;17481:13;17462:284;;;17563:6;17557:13;17590:63;17649:3;17634:13;17590:63;:::i;:::-;17583:70;;17676:60;17729:6;17676:60;:::i;:::-;17666:70;;17522:224;17509:1;17506;17502:9;17497:14;;17462:284;;;17466:14;17762:3;17755:10;;17173:598;;;17059:712;;;;:::o;17837:988::-;17954:3;17990:4;17985:3;17981:14;18078:4;18071:5;18067:16;18061:23;18097:63;18154:4;18149:3;18145:14;18131:12;18097:63;:::i;:::-;18005:165;18255:4;18248:5;18244:16;18238:23;18274:63;18331:4;18326:3;18322:14;18308:12;18274:63;:::i;:::-;18180:167;18430:4;18423:5;18419:16;18413:23;18449:63;18506:4;18501:3;18497:14;18483:12;18449:63;:::i;:::-;18357:165;18605:4;18598:5;18594:16;18588:23;18658:3;18652:4;18648:14;18641:4;18636:3;18632:14;18625:38;18684:103;18782:4;18768:12;18684:103;:::i;:::-;18676:111;;18532:266;18815:4;18808:11;;17959:866;17837:988;;;;:::o;18831:369::-;18972:4;19010:2;18999:9;18995:18;18987:26;;19059:9;19053:4;19049:20;19045:1;19034:9;19030:17;19023:47;19087:106;19188:4;19179:6;19087:106;:::i;:::-;19079:114;;18831:369;;;;:::o;19206:442::-;19355:4;19393:2;19382:9;19378:18;19370:26;;19406:71;19474:1;19463:9;19459:17;19450:6;19406:71;:::i;:::-;19487:72;19555:2;19544:9;19540:18;19531:6;19487:72;:::i;:::-;19569;19637:2;19626:9;19622:18;19613:6;19569:72;:::i;:::-;19206:442;;;;;;:::o;19654:474::-;19722:6;19730;19779:2;19767:9;19758:7;19754:23;19750:32;19747:119;;;19785:79;;:::i;:::-;19747:119;19905:1;19930:53;19975:7;19966:6;19955:9;19951:22;19930:53;:::i;:::-;19920:63;;19876:117;20032:2;20058:53;20103:7;20094:6;20083:9;20079:22;20058:53;:::i;:::-;20048:63;;20003:118;19654:474;;;;;:::o;20134:60::-;20162:3;20183:5;20176:12;;20134:60;;;:::o;20200:142::-;20250:9;20283:53;20301:34;20310:24;20328:5;20310:24;:::i;:::-;20301:34;:::i;:::-;20283:53;:::i;:::-;20270:66;;20200:142;;;:::o;20348:126::-;20398:9;20431:37;20462:5;20431:37;:::i;:::-;20418:50;;20348:126;;;:::o;20480:140::-;20544:9;20577:37;20608:5;20577:37;:::i;:::-;20564:50;;20480:140;;;:::o;20626:159::-;20727:51;20772:5;20727:51;:::i;:::-;20722:3;20715:64;20626:159;;:::o;20791:250::-;20898:4;20936:2;20925:9;20921:18;20913:26;;20949:85;21031:1;21020:9;21016:17;21007:6;20949:85;:::i;:::-;20791:250;;;;:::o;21047:180::-;21095:77;21092:1;21085:88;21192:4;21189:1;21182:15;21216:4;21213:1;21206:15;21233:320;21277:6;21314:1;21308:4;21304:12;21294:22;;21361:1;21355:4;21351:12;21382:18;21372:81;;21438:4;21430:6;21426:17;21416:27;;21372:81;21500:2;21492:6;21489:14;21469:18;21466:38;21463:84;;21519:18;;:::i;:::-;21463:84;21284:269;21233:320;;;:::o;21559:332::-;21680:4;21718:2;21707:9;21703:18;21695:26;;21731:71;21799:1;21788:9;21784:17;21775:6;21731:71;:::i;:::-;21812:72;21880:2;21869:9;21865:18;21856:6;21812:72;:::i;:::-;21559:332;;;;;:::o;21897:137::-;21951:5;21982:6;21976:13;21967:22;;21998:30;22022:5;21998:30;:::i;:::-;21897:137;;;;:::o;22040:345::-;22107:6;22156:2;22144:9;22135:7;22131:23;22127:32;22124:119;;;22162:79;;:::i;:::-;22124:119;22282:1;22307:61;22360:7;22351:6;22340:9;22336:22;22307:61;:::i;:::-;22297:71;;22253:125;22040:345;;;;:::o;22391:164::-;22531:16;22527:1;22519:6;22515:14;22508:40;22391:164;:::o;22561:366::-;22703:3;22724:67;22788:2;22783:3;22724:67;:::i;:::-;22717:74;;22800:93;22889:3;22800:93;:::i;:::-;22918:2;22913:3;22909:12;22902:19;;22561:366;;;:::o;22933:419::-;23099:4;23137:2;23126:9;23122:18;23114:26;;23186:9;23180:4;23176:20;23172:1;23161:9;23157:17;23150:47;23214:131;23340:4;23214:131;:::i;:::-;23206:139;;22933:419;;;:::o;23358:442::-;23507:4;23545:2;23534:9;23530:18;23522:26;;23558:71;23626:1;23615:9;23611:17;23602:6;23558:71;:::i;:::-;23639:72;23707:2;23696:9;23692:18;23683:6;23639:72;:::i;:::-;23721;23789:2;23778:9;23774:18;23765:6;23721:72;:::i;:::-;23358:442;;;;;;:::o;23806:169::-;23946:21;23942:1;23934:6;23930:14;23923:45;23806:169;:::o;23981:366::-;24123:3;24144:67;24208:2;24203:3;24144:67;:::i;:::-;24137:74;;24220:93;24309:3;24220:93;:::i;:::-;24338:2;24333:3;24329:12;24322:19;;23981:366;;;:::o;24353:419::-;24519:4;24557:2;24546:9;24542:18;24534:26;;24606:9;24600:4;24596:20;24592:1;24581:9;24577:17;24570:47;24634:131;24760:4;24634:131;:::i;:::-;24626:139;;24353:419;;;:::o;24778:172::-;24918:24;24914:1;24906:6;24902:14;24895:48;24778:172;:::o;24956:366::-;25098:3;25119:67;25183:2;25178:3;25119:67;:::i;:::-;25112:74;;25195:93;25284:3;25195:93;:::i;:::-;25313:2;25308:3;25304:12;25297:19;;24956:366;;;:::o;25328:419::-;25494:4;25532:2;25521:9;25517:18;25509:26;;25581:9;25575:4;25571:20;25567:1;25556:9;25552:17;25545:47;25609:131;25735:4;25609:131;:::i;:::-;25601:139;;25328:419;;;:::o;25753:180::-;25801:77;25798:1;25791:88;25898:4;25895:1;25888:15;25922:4;25919:1;25912:15;25939:180;25987:77;25984:1;25977:88;26084:4;26081:1;26074:15;26108:4;26105:1;26098:15;26125:233;26164:3;26187:24;26205:5;26187:24;:::i;:::-;26178:33;;26233:66;26226:5;26223:77;26220:103;;26303:18;;:::i;:::-;26220:103;26350:1;26343:5;26339:13;26332:20;;26125:233;;;:::o;26364:143::-;26421:5;26452:6;26446:13;26437:22;;26468:33;26495:5;26468:33;:::i;:::-;26364:143;;;;:::o;26513:351::-;26583:6;26632:2;26620:9;26611:7;26607:23;26603:32;26600:119;;;26638:79;;:::i;:::-;26600:119;26758:1;26783:64;26839:7;26830:6;26819:9;26815:22;26783:64;:::i;:::-;26773:74;;26729:128;26513:351;;;;:::o;26870:177::-;27010:29;27006:1;26998:6;26994:14;26987:53;26870:177;:::o;27053:366::-;27195:3;27216:67;27280:2;27275:3;27216:67;:::i;:::-;27209:74;;27292:93;27381:3;27292:93;:::i;:::-;27410:2;27405:3;27401:12;27394:19;;27053:366;;;:::o;27425:419::-;27591:4;27629:2;27618:9;27614:18;27606:26;;27678:9;27672:4;27668:20;27664:1;27653:9;27649:17;27642:47;27706:131;27832:4;27706:131;:::i;:::-;27698:139;;27425:419;;;:::o;27850:442::-;27999:4;28037:2;28026:9;28022:18;28014:26;;28050:71;28118:1;28107:9;28103:17;28094:6;28050:71;:::i;:::-;28131:72;28199:2;28188:9;28184:18;28175:6;28131:72;:::i;:::-;28213;28281:2;28270:9;28266:18;28257:6;28213:72;:::i;:::-;27850:442;;;;;;:::o;28298:171::-;28438:23;28434:1;28426:6;28422:14;28415:47;28298:171;:::o;28475:366::-;28617:3;28638:67;28702:2;28697:3;28638:67;:::i;:::-;28631:74;;28714:93;28803:3;28714:93;:::i;:::-;28832:2;28827:3;28823:12;28816:19;;28475:366;;;:::o;28847:419::-;29013:4;29051:2;29040:9;29036:18;29028:26;;29100:9;29094:4;29090:20;29086:1;29075:9;29071:17;29064:47;29128:131;29254:4;29128:131;:::i;:::-;29120:139;;28847:419;;;:::o;29272:191::-;29312:3;29331:20;29349:1;29331:20;:::i;:::-;29326:25;;29365:20;29383:1;29365:20;:::i;:::-;29360:25;;29408:1;29405;29401:9;29394:16;;29429:3;29426:1;29423:10;29420:36;;;29436:18;;:::i;:::-;29420:36;29272:191;;;;:::o;29469:180::-;29517:77;29514:1;29507:88;29614:4;29611:1;29604:15;29638:4;29635:1;29628:15;29655:185;29695:1;29712:20;29730:1;29712:20;:::i;:::-;29707:25;;29746:20;29764:1;29746:20;:::i;:::-;29741:25;;29785:1;29775:35;;29790:18;;:::i;:::-;29775:35;29832:1;29829;29825:9;29820:14;;29655:185;;;;:::o;29846:194::-;29886:4;29906:20;29924:1;29906:20;:::i;:::-;29901:25;;29940:20;29958:1;29940:20;:::i;:::-;29935:25;;29984:1;29981;29977:9;29969:17;;30008:1;30002:4;29999:11;29996:37;;;30013:18;;:::i;:::-;29996:37;29846:194;;;;:::o;30046:332::-;30167:4;30205:2;30194:9;30190:18;30182:26;;30218:71;30286:1;30275:9;30271:17;30262:6;30218:71;:::i;:::-;30299:72;30367:2;30356:9;30352:18;30343:6;30299:72;:::i;:::-;30046:332;;;;;:::o;30384:141::-;30433:4;30456:3;30448:11;;30479:3;30476:1;30469:14;30513:4;30510:1;30500:18;30492:26;;30384:141;;;:::o;30531:93::-;30568:6;30615:2;30610;30603:5;30599:14;30595:23;30585:33;;30531:93;;;:::o;30630:107::-;30674:8;30724:5;30718:4;30714:16;30693:37;;30630:107;;;;:::o;30743:393::-;30812:6;30862:1;30850:10;30846:18;30885:97;30915:66;30904:9;30885:97;:::i;:::-;31003:39;31033:8;31022:9;31003:39;:::i;:::-;30991:51;;31075:4;31071:9;31064:5;31060:21;31051:30;;31124:4;31114:8;31110:19;31103:5;31100:30;31090:40;;30819:317;;30743:393;;;;;:::o;31142:142::-;31192:9;31225:53;31243:34;31252:24;31270:5;31252:24;:::i;:::-;31243:34;:::i;:::-;31225:53;:::i;:::-;31212:66;;31142:142;;;:::o;31290:75::-;31333:3;31354:5;31347:12;;31290:75;;;:::o;31371:269::-;31481:39;31512:7;31481:39;:::i;:::-;31542:91;31591:41;31615:16;31591:41;:::i;:::-;31583:6;31576:4;31570:11;31542:91;:::i;:::-;31536:4;31529:105;31447:193;31371:269;;;:::o;31646:73::-;31691:3;31646:73;:::o;31725:189::-;31802:32;;:::i;:::-;31843:65;31901:6;31893;31887:4;31843:65;:::i;:::-;31778:136;31725:189;;:::o;31920:186::-;31980:120;31997:3;31990:5;31987:14;31980:120;;;32051:39;32088:1;32081:5;32051:39;:::i;:::-;32024:1;32017:5;32013:13;32004:22;;31980:120;;;31920:186;;:::o;32112:543::-;32213:2;32208:3;32205:11;32202:446;;;32247:38;32279:5;32247:38;:::i;:::-;32331:29;32349:10;32331:29;:::i;:::-;32321:8;32317:44;32514:2;32502:10;32499:18;32496:49;;;32535:8;32520:23;;32496:49;32558:80;32614:22;32632:3;32614:22;:::i;:::-;32604:8;32600:37;32587:11;32558:80;:::i;:::-;32217:431;;32202:446;32112:543;;;:::o;32661:117::-;32715:8;32765:5;32759:4;32755:16;32734:37;;32661:117;;;;:::o;32784:169::-;32828:6;32861:51;32909:1;32905:6;32897:5;32894:1;32890:13;32861:51;:::i;:::-;32857:56;32942:4;32936;32932:15;32922:25;;32835:118;32784:169;;;;:::o;32958:295::-;33034:4;33180:29;33205:3;33199:4;33180:29;:::i;:::-;33172:37;;33242:3;33239:1;33235:11;33229:4;33226:21;33218:29;;32958:295;;;;:::o;33258:1395::-;33375:37;33408:3;33375:37;:::i;:::-;33477:18;33469:6;33466:30;33463:56;;;33499:18;;:::i;:::-;33463:56;33543:38;33575:4;33569:11;33543:38;:::i;:::-;33628:67;33688:6;33680;33674:4;33628:67;:::i;:::-;33722:1;33746:4;33733:17;;33778:2;33770:6;33767:14;33795:1;33790:618;;;;34452:1;34469:6;34466:77;;;34518:9;34513:3;34509:19;34503:26;34494:35;;34466:77;34569:67;34629:6;34622:5;34569:67;:::i;:::-;34563:4;34556:81;34425:222;33760:887;;33790:618;33842:4;33838:9;33830:6;33826:22;33876:37;33908:4;33876:37;:::i;:::-;33935:1;33949:208;33963:7;33960:1;33957:14;33949:208;;;34042:9;34037:3;34033:19;34027:26;34019:6;34012:42;34093:1;34085:6;34081:14;34071:24;;34140:2;34129:9;34125:18;34112:31;;33986:4;33983:1;33979:12;33974:17;;33949:208;;;34185:6;34176:7;34173:19;34170:179;;;34243:9;34238:3;34234:19;34228:26;34286:48;34328:4;34320:6;34316:17;34305:9;34286:48;:::i;:::-;34278:6;34271:64;34193:156;34170:179;34395:1;34391;34383:6;34379:14;34375:22;34369:4;34362:36;33797:611;;;33760:887;;33350:1303;;;33258:1395;;:::o;34659:423::-;34800:4;34838:2;34827:9;34823:18;34815:26;;34887:9;34881:4;34877:20;34873:1;34862:9;34858:17;34851:47;34915:78;34988:4;34979:6;34915:78;:::i;:::-;34907:86;;35003:72;35071:2;35060:9;35056:18;35047:6;35003:72;:::i;:::-;34659:423;;;;;:::o;35088:148::-;35190:11;35227:3;35212:18;;35088:148;;;;:::o;35242:390::-;35348:3;35376:39;35409:5;35376:39;:::i;:::-;35431:89;35513:6;35508:3;35431:89;:::i;:::-;35424:96;;35529:65;35587:6;35582:3;35575:4;35568:5;35564:16;35529:65;:::i;:::-;35619:6;35614:3;35610:16;35603:23;;35352:280;35242:390;;;;:::o;35638:435::-;35818:3;35840:95;35931:3;35922:6;35840:95;:::i;:::-;35833:102;;35952:95;36043:3;36034:6;35952:95;:::i;:::-;35945:102;;36064:3;36057:10;;35638:435;;;;;:::o;36079:172::-;36219:24;36215:1;36207:6;36203:14;36196:48;36079:172;:::o;36257:366::-;36399:3;36420:67;36484:2;36479:3;36420:67;:::i;:::-;36413:74;;36496:93;36585:3;36496:93;:::i;:::-;36614:2;36609:3;36605:12;36598:19;;36257:366;;;:::o;36629:419::-;36795:4;36833:2;36822:9;36818:18;36810:26;;36882:9;36876:4;36872:20;36868:1;36857:9;36853:17;36846:47;36910:131;37036:4;36910:131;:::i;:::-;36902:139;;36629:419;;;:::o;37054:223::-;37194:34;37190:1;37182:6;37178:14;37171:58;37263:6;37258:2;37250:6;37246:15;37239:31;37054:223;:::o;37283:366::-;37425:3;37446:67;37510:2;37505:3;37446:67;:::i;:::-;37439:74;;37522:93;37611:3;37522:93;:::i;:::-;37640:2;37635:3;37631:12;37624:19;;37283:366;;;:::o;37655:419::-;37821:4;37859:2;37848:9;37844:18;37836:26;;37908:9;37902:4;37898:20;37894:1;37883:9;37879:17;37872:47;37936:131;38062:4;37936:131;:::i;:::-;37928:139;;37655:419;;;:::o;38080:98::-;38131:6;38165:5;38159:12;38149:22;;38080:98;;;:::o;38184:168::-;38267:11;38301:6;38296:3;38289:19;38341:4;38336:3;38332:14;38317:29;;38184:168;;;;:::o;38358:373::-;38444:3;38472:38;38504:5;38472:38;:::i;:::-;38526:70;38589:6;38584:3;38526:70;:::i;:::-;38519:77;;38605:65;38663:6;38658:3;38651:4;38644:5;38640:16;38605:65;:::i;:::-;38695:29;38717:6;38695:29;:::i;:::-;38690:3;38686:39;38679:46;;38448:283;38358:373;;;;:::o;38737:640::-;38932:4;38970:3;38959:9;38955:19;38947:27;;38984:71;39052:1;39041:9;39037:17;39028:6;38984:71;:::i;:::-;39065:72;39133:2;39122:9;39118:18;39109:6;39065:72;:::i;:::-;39147;39215:2;39204:9;39200:18;39191:6;39147:72;:::i;:::-;39266:9;39260:4;39256:20;39251:2;39240:9;39236:18;39229:48;39294:76;39365:4;39356:6;39294:76;:::i;:::-;39286:84;;38737:640;;;;;;;:::o;39383:141::-;39439:5;39470:6;39464:13;39455:22;;39486:32;39512:5;39486:32;:::i;:::-;39383:141;;;;:::o;39530:349::-;39599:6;39648:2;39636:9;39627:7;39623:23;39619:32;39616:119;;;39654:79;;:::i;:::-;39616:119;39774:1;39799:63;39854:7;39845:6;39834:9;39830:22;39799:63;:::i;:::-;39789:73;;39745:127;39530:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3361600","executionCost":"infinite","totalCost":"infinite"},"external":{"addItem(string,uint256)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","claimRewards()":"infinite","gameCost()":"2518","getApproved(uint256)":"infinite","getItems()":"infinite","getPlayerDetails(address)":"infinite","initialAirdropAmount()":"2495","initializePlayer(address)":"infinite","isApprovedForAll(address,address)":"infinite","items(uint256)":"infinite","levelUpScore()":"2474","mintNFT()":"152918","name()":"infinite","nftOwners(uint256)":"2928","owner()":"2590","ownerOf(uint256)":"infinite","playGame(uint256)":"infinite","players(address)":"infinite","purchaseItem(uint256)":"infinite","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setGameCost(uint256)":"infinite","setInitialAirdropAmount(uint256)":"infinite","setLevelUpScore(uint256)":"infinite","supportsInterface(bytes4)":"820","symbol()":"infinite","token()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"addItem(string,uint256)":"62d6bbdf","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","claimRewards()":"372500ab","gameCost()":"cab896dc","getApproved(uint256)":"081812fc","getItems()":"410d59cc","getPlayerDetails(address)":"c8dd6ce7","initialAirdropAmount()":"e7804338","initializePlayer(address)":"139652e4","isApprovedForAll(address,address)":"e985e9c5","items(uint256)":"bfb231d2","levelUpScore()":"affc55c0","mintNFT()":"14f710fe","name()":"06fdde03","nftOwners(uint256)":"bbd94c2f","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","playGame(uint256)":"5873533d","players(address)":"e2eb41ff","purchaseItem(uint256)":"d38ea5bf","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setGameCost(uint256)":"7f17b79d","setInitialAirdropAmount(uint256)":"70ca3b16","setLevelUpScore(uint256)":"0931a4d1","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","token()":"fc0c546a","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialAirdropAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"ItemPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_power\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcadeGame.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ArcadeGame.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAirdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"initializePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelUpScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"purchaseItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameCost\",\"type\":\"uint256\"}],\"name\":\"setGameCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAirdropAmount\",\"type\":\"uint256\"}],\"name\":\"setInitialAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelUpScore\",\"type\":\"uint256\"}],\"name\":\"setLevelUpScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcadeGame.sol\":\"ArcadeGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/ArcadeGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Counters.sol\\\";\\r\\n\\r\\ncontract ArcadeGame is ERC721, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    struct Player {\\r\\n        uint256 score;\\r\\n        uint256 rewards;\\r\\n        uint256 level;\\r\\n        uint256[] items;\\r\\n    }\\r\\n\\r\\n    struct Item {\\r\\n        uint256 id;\\r\\n        string name;\\r\\n        uint256 power;\\r\\n    }\\r\\n\\r\\n    IERC20 public token;\\r\\n    Counters.Counter private _itemIdCounter;\\r\\n    Counters.Counter private _nftIdCounter;\\r\\n    uint256 public gameCost;\\r\\n    uint256 public levelUpScore;\\r\\n    uint256 public initialAirdropAmount;\\r\\n\\r\\n    mapping(address => Player) public players;\\r\\n    mapping(uint256 => Item) public items;\\r\\n    mapping(uint256 => address) public nftOwners;\\r\\n\\r\\n    event GamePlayed(address indexed player, uint256 score, uint256 level);\\r\\n    event RewardsClaimed(address indexed player, uint256 rewards);\\r\\n    event ItemAdded(uint256 indexed itemId, string name, uint256 power);\\r\\n    event ItemPurchased(address indexed player, uint256 indexed itemId);\\r\\n    event LevelUp(address indexed player, uint256 newLevel);\\r\\n\\r\\n    constructor(address _token, address _initialOwner, uint256 _initialAirdropAmount) \\r\\n    ERC721(\\\"ArcadeGameToken\\\", \\\"AGT\\\") \\r\\n    Ownable(_initialOwner) {\\r\\n        token = IERC20(_token);\\r\\n        gameCost = 100 * 10**18; // Example cost in tokens\\r\\n        levelUpScore = 1000; // Score needed to level up\\r\\n        initialAirdropAmount = _initialAirdropAmount; // Initial airdrop amount for new players\\r\\n    }\\r\\n\\r\\n    function initializePlayer(address playerAddress) public {\\r\\n        if (players[playerAddress].level == 0 && players[playerAddress].score == 0 && players[playerAddress].rewards == 0) {\\r\\n            players[playerAddress] = Player(0, 0, 1, new uint256[](0)); // Initialize player with default values\\r\\n            require(token.transfer(playerAddress, initialAirdropAmount), \\\"Airdrop failed\\\"); // Airdrop tokens to new player\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function playGame(uint256 _score) public {\\r\\n        require(token.balanceOf(msg.sender) >= gameCost, \\\"Insufficient tokens to play\\\");\\r\\n        require(token.transferFrom(msg.sender, address(this), gameCost), \\\"Token transfer failed\\\");\\r\\n\\r\\n        initializePlayer(msg.sender); // Ensure player is initialized\\r\\n\\r\\n        Player storage player = players[msg.sender];\\r\\n        player.score += _score;\\r\\n        player.rewards += _score / 10; // Example reward calculation\\r\\n\\r\\n        if (player.score >= levelUpScore) {\\r\\n            player.level++;\\r\\n            player.score -= levelUpScore;\\r\\n            emit LevelUp(msg.sender, player.level);\\r\\n        }\\r\\n\\r\\n        emit GamePlayed(msg.sender, _score, player.level);\\r\\n    }\\r\\n\\r\\n    function claimRewards() external {\\r\\n        Player storage player = players[msg.sender];\\r\\n        uint256 rewards = player.rewards;\\r\\n        require(rewards > 0, \\\"No rewards to claim\\\");\\r\\n\\r\\n        player.rewards = 0;\\r\\n        require(token.transfer(msg.sender, rewards), \\\"Reward transfer failed\\\");\\r\\n\\r\\n        emit RewardsClaimed(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    function mintNFT() public {\\r\\n        uint256 nftId = _nftIdCounter.current();\\r\\n        _nftIdCounter.increment();\\r\\n\\r\\n        _mint(msg.sender, nftId);\\r\\n        nftOwners[nftId] = msg.sender;\\r\\n    }\\r\\n\\r\\n    function addItem(string memory _name, uint256 _power) external onlyOwner {\\r\\n        uint256 itemId = _itemIdCounter.current();\\r\\n        _itemIdCounter.increment();\\r\\n\\r\\n        items[itemId] = Item(itemId, _name, _power);\\r\\n        emit ItemAdded(itemId, _name, _power);\\r\\n    }\\r\\n\\r\\n    function purchaseItem(uint256 _itemId) external {\\r\\n        Item memory item = items[_itemId];\\r\\n        require(token.balanceOf(msg.sender) >= item.power, \\\"Insufficient tokens to purchase item\\\");\\r\\n        require(token.transferFrom(msg.sender, address(this), item.power), \\\"Token transfer failed\\\");\\r\\n\\r\\n        players[msg.sender].items.push(_itemId);\\r\\n        emit ItemPurchased(msg.sender, _itemId);\\r\\n    }\\r\\n\\r\\n    function getPlayerDetails(address _player) external view returns (Player memory) {\\r\\n        require(players[_player].level != 0 || players[_player].score != 0 || players[_player].rewards != 0, \\\"Player not initialized\\\");\\r\\n        return players[_player];\\r\\n    }\\r\\n\\r\\n    function getItems() external  view returns (Item[] memory) {\\r\\n        uint256 itemCount = _itemIdCounter.current();\\r\\n        Item[] memory itemList = new Item[](itemCount);\\r\\n\\r\\n        for (uint256 i = 0; i < itemCount; i++) {\\r\\n            itemList[i] = items[i];\\r\\n        }\\r\\n\\r\\n        return itemList;\\r\\n    }\\r\\n\\r\\n    function setGameCost(uint256 _gameCost) external onlyOwner {\\r\\n        gameCost = _gameCost;\\r\\n    }\\r\\n\\r\\n    function setLevelUpScore(uint256 _levelUpScore) external onlyOwner {\\r\\n        levelUpScore = _levelUpScore;\\r\\n    }\\r\\n\\r\\n    function setInitialAirdropAmount(uint256 _initialAirdropAmount) external onlyOwner {\\r\\n        initialAirdropAmount = _initialAirdropAmount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x496defa3badf25f2177e366ce814444f0d4e1fe207b9afdc188ff54b31bc6c88\",\"license\":\"MIT\"},\"contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45f2d503ebecf25ea4b038d02a7ed96898bd197bec585d0ba3560bfb4b509a82\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":395,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":397,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":401,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":405,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":409,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":415,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":8,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":3048,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"token","offset":0,"slot":"7","type":"t_contract(IERC20)362"},{"astId":3051,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_itemIdCounter","offset":0,"slot":"8","type":"t_struct(Counter)3583_storage"},{"astId":3054,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_nftIdCounter","offset":0,"slot":"9","type":"t_struct(Counter)3583_storage"},{"astId":3056,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"gameCost","offset":0,"slot":"10","type":"t_uint256"},{"astId":3058,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"levelUpScore","offset":0,"slot":"11","type":"t_uint256"},{"astId":3060,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"initialAirdropAmount","offset":0,"slot":"12","type":"t_uint256"},{"astId":3065,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"players","offset":0,"slot":"13","type":"t_mapping(t_address,t_struct(Player)3038_storage)"},{"astId":3070,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"items","offset":0,"slot":"14","type":"t_mapping(t_uint256,t_struct(Item)3045_storage)"},{"astId":3074,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"nftOwners","offset":0,"slot":"15","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)362":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_struct(Player)3038_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ArcadeGame.Player)","numberOfBytes":"32","value":"t_struct(Player)3038_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_struct(Item)3045_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ArcadeGame.Item)","numberOfBytes":"32","value":"t_struct(Item)3045_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3583_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3582,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Item)3045_storage":{"encoding":"inplace","label":"struct ArcadeGame.Item","members":[{"astId":3040,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"id","offset":0,"slot":"0","type":"t_uint256"},{"astId":3042,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3044,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"power","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(Player)3038_storage":{"encoding":"inplace","label":"struct ArcadeGame.Player","members":[{"astId":3030,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"score","offset":0,"slot":"0","type":"t_uint256"},{"astId":3032,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"rewards","offset":0,"slot":"1","type":"t_uint256"},{"astId":3034,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"level","offset":0,"slot":"2","type":"t_uint256"},{"astId":3037,"contract":"contracts/ArcadeGame.sol:ArcadeGame","label":"items","offset":0,"slot":"3","type":"t_array(t_uint256)dyn_storage"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098b3baac81611a7268960ec6a3c0ffad3d1d152f0ffc921d1fcb2f995897f5bd64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xB3 0xBA 0xAC DUP2 PUSH2 0x1A72 PUSH9 0x960EC6A3C0FFAD3D1D ISZERO 0x2F 0xF 0xFC SWAP3 SAR 0x1F 0xCB 0x2F SWAP10 PC SWAP8 CREATE2 0xBD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"437:1000:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098b3baac81611a7268960ec6a3c0ffad3d1d152f0ffc921d1fcb2f995897f5bd64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xB3 0xBA 0xAC DUP2 PUSH2 0x1A72 PUSH9 0x960EC6A3C0FFAD3D1D ISZERO 0x2F 0xF 0xFC SWAP3 SAR 0x1F 0xCB 0x2F SWAP10 PC SWAP8 CREATE2 0xBD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"437:1000:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Counters.sol\":\"Counters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45f2d503ebecf25ea4b038d02a7ed96898bd197bec585d0ba3560bfb4b509a82\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}